{"file_contents":{"drizzle.config.ts":{"content":"import { defineConfig } from \"drizzle-kit\";\n\nif (!process.env.DATABASE_URL) {\n  throw new Error(\"DATABASE_URL, ensure the database is provisioned\");\n}\n\nexport default defineConfig({\n  out: \"./migrations\",\n  schema: \"./shared/schema.ts\",\n  dialect: \"postgresql\",\n  dbCredentials: {\n    url: process.env.DATABASE_URL,\n  },\n});\n","size_bytes":325},"postcss.config.js":{"content":"export default {\n  plugins: {\n    tailwindcss: {},\n    autoprefixer: {},\n  },\n}\n","size_bytes":80},"tailwind.config.ts":{"content":"import type { Config } from \"tailwindcss\";\n\nexport default {\n  darkMode: [\"class\"],\n  content: [\"./client/index.html\", \"./client/src/**/*.{js,jsx,ts,tsx}\"],\n  theme: {\n    extend: {\n      colors: {\n        background: \"hsl(var(--background))\",\n        surface: \"hsl(var(--surface))\",\n        foreground: \"hsl(var(--foreground))\",\n        card: {\n          DEFAULT: \"hsl(var(--card))\",\n          foreground: \"hsl(var(--card-foreground))\",\n        },\n        popover: {\n          DEFAULT: \"hsl(var(--popover))\",\n          foreground: \"hsl(var(--popover-foreground))\",\n        },\n        primary: {\n          DEFAULT: \"hsl(var(--primary))\",\n          foreground: \"hsl(var(--primary-foreground))\",\n        },\n        secondary: {\n          DEFAULT: \"hsl(var(--secondary))\",\n          foreground: \"hsl(var(--secondary-foreground))\",\n        },\n        muted: {\n          DEFAULT: \"hsl(var(--muted))\",\n          foreground: \"hsl(var(--muted-foreground))\",\n        },\n        accent: {\n          DEFAULT: \"hsl(var(--accent))\",\n          foreground: \"hsl(var(--accent-foreground))\",\n        },\n        success: \"hsl(var(--success))\",\n        warning: \"hsl(var(--warning))\",\n        destructive: {\n          DEFAULT: \"hsl(var(--destructive))\",\n          foreground: \"hsl(var(--destructive-foreground))\",\n        },\n        border: \"hsl(var(--border))\",\n        input: \"hsl(var(--input))\",\n        ring: \"hsl(var(--ring))\",\n        chart: {\n          \"1\": \"hsl(var(--chart-1))\",\n          \"2\": \"hsl(var(--chart-2))\",\n          \"3\": \"hsl(var(--chart-3))\",\n          \"4\": \"hsl(var(--chart-4))\",\n          \"5\": \"hsl(var(--chart-5))\",\n        },\n      },\n      fontSize: {\n        'display': 'var(--font-display)',\n        'h1': 'var(--font-h1)',\n        'h2': 'var(--font-h2)', \n        'body': 'var(--font-body)',\n      },\n      fontFamily: {\n        display: [\"var(--font-family-display)\"],\n        sans: [\"var(--font-family-sans)\"],\n        mono: [\"var(--font-family-mono)\"],\n      },\n      borderRadius: {\n        'card': 'var(--r-card)',\n        'chip': 'var(--r-chip)',\n        lg: 'var(--radius)',\n        md: 'calc(var(--radius) - 2px)',\n        sm: 'calc(var(--radius) - 4px)',\n      },\n      boxShadow: {\n        'card': 'var(--sh-card)',\n        'hover': 'var(--sh-hover)',\n      },\n      spacing: {\n        'section': 'var(--space-section)',\n      },\n      transitionDuration: {\n        'fast': 'var(--dur-fast)',\n        'med': 'var(--dur-med)',\n      },\n      transitionTimingFunction: {\n        'smooth': 'var(--easing)',\n      },\n      keyframes: {\n        \"accordion-down\": {\n          from: {\n            height: \"0\",\n          },\n          to: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n        },\n        \"accordion-up\": {\n          from: {\n            height: \"var(--radix-accordion-content-height)\",\n          },\n          to: {\n            height: \"0\",\n          },\n        },\n        fadeIn: {\n          from: { opacity: \"0\" },\n          to: { opacity: \"1\" },\n        },\n        slideUp: {\n          from: { transform: \"translateY(20px)\", opacity: \"0\" },\n          to: { transform: \"translateY(0)\", opacity: \"1\" },\n        },\n        scaleIn: {\n          from: { transform: \"scale(0.95)\", opacity: \"0\" },\n          to: { transform: \"scale(1)\", opacity: \"1\" },\n        },\n      },\n      animation: {\n        \"accordion-down\": \"accordion-down 0.2s ease-out\",\n        \"accordion-up\": \"accordion-up 0.2s ease-out\",\n        \"fade-in\": \"fadeIn 0.5s ease-in-out\",\n        \"slide-up\": \"slideUp 0.6s ease-out\",\n        \"scale-in\": \"scaleIn 0.4s ease-out\",\n      },\n    },\n  },\n  plugins: [require(\"tailwindcss-animate\"), require(\"@tailwindcss/typography\")],\n} satisfies Config;\n","size_bytes":3713},"vite.config.ts":{"content":"import { defineConfig } from \"vite\";\nimport react from \"@vitejs/plugin-react\";\nimport path from \"path\";\nimport runtimeErrorOverlay from \"@replit/vite-plugin-runtime-error-modal\";\n\nexport default defineConfig({\n  plugins: [\n    react(),\n    runtimeErrorOverlay(),\n    ...(process.env.NODE_ENV !== \"production\" &&\n    process.env.REPL_ID !== undefined\n      ? [\n          await import(\"@replit/vite-plugin-cartographer\").then((m) =>\n            m.cartographer(),\n          ),\n          await import(\"@replit/vite-plugin-dev-banner\").then((m) =>\n            m.devBanner(),\n          ),\n        ]\n      : []),\n  ],\n  resolve: {\n    alias: {\n      \"@\": path.resolve(import.meta.dirname, \"client\", \"src\"),\n      \"@shared\": path.resolve(import.meta.dirname, \"shared\"),\n      \"@assets\": path.resolve(import.meta.dirname, \"attached_assets\"),\n    },\n  },\n  root: path.resolve(import.meta.dirname, \"client\"),\n  build: {\n    outDir: path.resolve(import.meta.dirname, \"dist/public\"),\n    emptyOutDir: true,\n  },\n  server: {\n    fs: {\n      strict: true,\n      deny: [\"**/.*\"],\n    },\n  },\n});\n","size_bytes":1080},"server/index.ts":{"content":"import express, { type Request, Response, NextFunction } from \"express\";\nimport { registerRoutes } from \"./routes\";\nimport { setupVite, serveStatic, log } from \"./vite\";\n\nconst app = express();\napp.use(express.json());\napp.use(express.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  const start = Date.now();\n  const path = req.path;\n  let capturedJsonResponse: Record<string, any> | undefined = undefined;\n\n  const originalResJson = res.json;\n  res.json = function (bodyJson, ...args) {\n    capturedJsonResponse = bodyJson;\n    return originalResJson.apply(res, [bodyJson, ...args]);\n  };\n\n  res.on(\"finish\", () => {\n    const duration = Date.now() - start;\n    if (path.startsWith(\"/api\")) {\n      let logLine = `${req.method} ${path} ${res.statusCode} in ${duration}ms`;\n      if (capturedJsonResponse) {\n        logLine += ` :: ${JSON.stringify(capturedJsonResponse)}`;\n      }\n\n      if (logLine.length > 80) {\n        logLine = logLine.slice(0, 79) + \"…\";\n      }\n\n      log(logLine);\n    }\n  });\n\n  next();\n});\n\n(async () => {\n  const server = await registerRoutes(app);\n\n  app.use((err: any, _req: Request, res: Response, _next: NextFunction) => {\n    const status = err.status || err.statusCode || 500;\n    const message = err.message || \"Internal Server Error\";\n\n    res.status(status).json({ message });\n    throw err;\n  });\n\n  // importantly only setup vite in development and after\n  // setting up all the other routes so the catch-all route\n  // doesn't interfere with the other routes\n  if (app.get(\"env\") === \"development\") {\n    await setupVite(app, server);\n  } else {\n    serveStatic(app);\n  }\n\n  // ALWAYS serve the app on the port specified in the environment variable PORT\n  // Other ports are firewalled. Default to 5000 if not specified.\n  // this serves both the API and the client.\n  // It is the only port that is not firewalled.\n  const port = parseInt(process.env.PORT || '5000', 10);\n  server.listen({\n    port,\n    host: \"0.0.0.0\",\n    reusePort: true,\n  }, () => {\n    log(`serving on port ${port}`);\n  });\n})();\n","size_bytes":2066},"server/routes.ts":{"content":"import type { Express } from \"express\";\nimport { createServer, type Server } from \"http\";\nimport { storage } from \"./storage\";\nimport { insertContactSubmissionSchema, insertAnalyticsEventSchema } from \"@shared/schema\";\nimport { contactFormRateLimit, analyticsRateLimit } from \"./middleware/rate-limit\";\nimport { emailService } from \"./services/email\";\n\nexport async function registerRoutes(app: Express): Promise<Server> {\n  // Contact form submission\n  app.post(\"/api/contact\", contactFormRateLimit.middleware(), async (req, res) => {\n    try {\n      // Honeypot check\n      if (req.body.website) {\n        return res.status(400).json({ \n          success: false, \n          message: \"Invalid submission\" \n        });\n      }\n\n      const validatedData = insertContactSubmissionSchema.parse(req.body);\n      \n      const submission = await storage.createContactSubmission({\n        ...validatedData,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      // Send email notification\n      const emailSent = await emailService.sendContactNotification({\n        ...validatedData,\n        company: validatedData.company || undefined,\n        utmSource: validatedData.utmSource || undefined\n      });\n      \n      if (!emailSent) {\n        console.error(\"Failed to send email notification for contact submission:\", submission.id);\n      }\n\n      res.json({ \n        success: true, \n        message: \"Thank you for your message! I'll get back to you soon.\",\n        submissionId: submission.id\n      });\n    } catch (error) {\n      console.error(\"Contact form error:\", error);\n      \n      if (error instanceof Error && \"issues\" in error) {\n        return res.status(400).json({ \n          success: false, \n          message: \"Please check your input and try again.\",\n          errors: error.issues \n        });\n      }\n      \n      res.status(500).json({ \n        success: false, \n        message: \"Something went wrong. Please try again later.\" \n      });\n    }\n  });\n\n  // Analytics event tracking\n  app.post(\"/api/analytics\", analyticsRateLimit.middleware(), async (req, res) => {\n    try {\n      const validatedData = insertAnalyticsEventSchema.parse(req.body);\n      \n      await storage.createAnalyticsEvent({\n        ...validatedData,\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      res.json({ success: true });\n    } catch (error) {\n      console.error(\"Analytics error:\", error);\n      res.status(400).json({ success: false });\n    }\n  });\n\n  // Resume download tracking\n  app.get(\"/api/resume/download\", async (req, res) => {\n    try {\n      // Track download event\n      await storage.createAnalyticsEvent({\n        event: \"resume_download\",\n        properties: { \n          source: req.get(\"Referer\") || \"direct\",\n          userAgent: req.get(\"User-Agent\") \n        },\n        sessionId: req.get(\"X-Session-ID\"),\n        ipAddress: req.ip,\n        userAgent: req.get(\"User-Agent\"),\n      });\n\n      // In a real implementation, you would serve the actual PDF file\n      // For now, we'll return a success response\n      res.json({ \n        success: true, \n        message: \"Resume download tracked\",\n        downloadUrl: \"/jacob-darling-resume.pdf\" // This would be a real file URL\n      });\n    } catch (error) {\n      console.error(\"Resume download error:\", error);\n      res.status(500).json({ success: false });\n    }\n  });\n\n  // Health check\n  app.get(\"/api/health\", (req, res) => {\n    res.json({ status: \"ok\", timestamp: new Date().toISOString() });\n  });\n\n  const httpServer = createServer(app);\n  return httpServer;\n}\n","size_bytes":3604},"server/storage.ts":{"content":"import { type User, type InsertUser, type ContactSubmission, type InsertContactSubmission, type AnalyticsEvent, type InsertAnalyticsEvent } from \"@shared/schema\";\nimport { randomUUID } from \"crypto\";\n\nexport interface IStorage {\n  getUser(id: string): Promise<User | undefined>;\n  getUserByUsername(username: string): Promise<User | undefined>;\n  createUser(user: InsertUser): Promise<User>;\n  createContactSubmission(submission: InsertContactSubmission & { ipAddress?: string; userAgent?: string }): Promise<ContactSubmission>;\n  createAnalyticsEvent(event: InsertAnalyticsEvent & { ipAddress?: string; userAgent?: string }): Promise<AnalyticsEvent>;\n  getContactSubmissions(): Promise<ContactSubmission[]>;\n}\n\nexport class MemStorage implements IStorage {\n  private users: Map<string, User>;\n  private contactSubmissions: Map<string, ContactSubmission>;\n  private analyticsEvents: Map<string, AnalyticsEvent>;\n\n  constructor() {\n    this.users = new Map();\n    this.contactSubmissions = new Map();\n    this.analyticsEvents = new Map();\n  }\n\n  async getUser(id: string): Promise<User | undefined> {\n    return this.users.get(id);\n  }\n\n  async getUserByUsername(username: string): Promise<User | undefined> {\n    return Array.from(this.users.values()).find(\n      (user) => user.username === username,\n    );\n  }\n\n  async createUser(insertUser: InsertUser): Promise<User> {\n    const id = randomUUID();\n    const user: User = { ...insertUser, id };\n    this.users.set(id, user);\n    return user;\n  }\n\n  async createContactSubmission(submission: InsertContactSubmission & { ipAddress?: string; userAgent?: string }): Promise<ContactSubmission> {\n    const id = randomUUID();\n    const contactSubmission: ContactSubmission = {\n      ...submission,\n      company: submission.company || null,\n      utmSource: submission.utmSource || null,\n      ipAddress: submission.ipAddress || null,\n      userAgent: submission.userAgent || null,\n      id,\n      createdAt: new Date(),\n    };\n    this.contactSubmissions.set(id, contactSubmission);\n    return contactSubmission;\n  }\n\n  async createAnalyticsEvent(event: InsertAnalyticsEvent & { ipAddress?: string; userAgent?: string }): Promise<AnalyticsEvent> {\n    const id = randomUUID();\n    const analyticsEvent: AnalyticsEvent = {\n      ...event,\n      properties: event.properties || null,\n      sessionId: event.sessionId || null,\n      ipAddress: event.ipAddress || null,\n      userAgent: event.userAgent || null,\n      id,\n      createdAt: new Date(),\n    };\n    this.analyticsEvents.set(id, analyticsEvent);\n    return analyticsEvent;\n  }\n\n  async getContactSubmissions(): Promise<ContactSubmission[]> {\n    return Array.from(this.contactSubmissions.values()).sort(\n      (a, b) => (b.createdAt?.getTime() || 0) - (a.createdAt?.getTime() || 0)\n    );\n  }\n}\n\nexport const storage = new MemStorage();\n","size_bytes":2844},"server/vite.ts":{"content":"import express, { type Express } from \"express\";\nimport fs from \"fs\";\nimport path from \"path\";\nimport { createServer as createViteServer, createLogger } from \"vite\";\nimport { type Server } from \"http\";\nimport viteConfig from \"../vite.config\";\nimport { nanoid } from \"nanoid\";\n\nconst viteLogger = createLogger();\n\nexport function log(message: string, source = \"express\") {\n  const formattedTime = new Date().toLocaleTimeString(\"en-US\", {\n    hour: \"numeric\",\n    minute: \"2-digit\",\n    second: \"2-digit\",\n    hour12: true,\n  });\n\n  console.log(`${formattedTime} [${source}] ${message}`);\n}\n\nexport async function setupVite(app: Express, server: Server) {\n  const serverOptions = {\n    middlewareMode: true,\n    hmr: { server },\n    allowedHosts: true as const,\n  };\n\n  const vite = await createViteServer({\n    ...viteConfig,\n    configFile: false,\n    customLogger: {\n      ...viteLogger,\n      error: (msg, options) => {\n        viteLogger.error(msg, options);\n        process.exit(1);\n      },\n    },\n    server: serverOptions,\n    appType: \"custom\",\n  });\n\n  app.use(vite.middlewares);\n  app.use(\"*\", async (req, res, next) => {\n    const url = req.originalUrl;\n\n    try {\n      const clientTemplate = path.resolve(\n        import.meta.dirname,\n        \"..\",\n        \"client\",\n        \"index.html\",\n      );\n\n      // always reload the index.html file from disk incase it changes\n      let template = await fs.promises.readFile(clientTemplate, \"utf-8\");\n      template = template.replace(\n        `src=\"/src/main.tsx\"`,\n        `src=\"/src/main.tsx?v=${nanoid()}\"`,\n      );\n      const page = await vite.transformIndexHtml(url, template);\n      res.status(200).set({ \"Content-Type\": \"text/html\" }).end(page);\n    } catch (e) {\n      vite.ssrFixStacktrace(e as Error);\n      next(e);\n    }\n  });\n}\n\nexport function serveStatic(app: Express) {\n  const distPath = path.resolve(import.meta.dirname, \"public\");\n\n  if (!fs.existsSync(distPath)) {\n    throw new Error(\n      `Could not find the build directory: ${distPath}, make sure to build the client first`,\n    );\n  }\n\n  app.use(express.static(distPath));\n\n  // fall through to index.html if the file doesn't exist\n  app.use(\"*\", (_req, res) => {\n    res.sendFile(path.resolve(distPath, \"index.html\"));\n  });\n}\n","size_bytes":2263},"shared/schema.ts":{"content":"import { sql } from \"drizzle-orm\";\nimport { pgTable, text, varchar, timestamp, json, boolean } from \"drizzle-orm/pg-core\";\nimport { createInsertSchema } from \"drizzle-zod\";\nimport { z } from \"zod\";\n\nexport const users = pgTable(\"users\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  username: text(\"username\").notNull().unique(),\n  password: text(\"password\").notNull(),\n});\n\nexport const contactSubmissions = pgTable(\"contact_submissions\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  name: text(\"name\").notNull(),\n  email: text(\"email\").notNull(),\n  company: text(\"company\"),\n  message: text(\"message\").notNull(),\n  utmSource: text(\"utm_source\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const analyticsEvents = pgTable(\"analytics_events\", {\n  id: varchar(\"id\").primaryKey().default(sql`gen_random_uuid()`),\n  event: text(\"event\").notNull(),\n  properties: json(\"properties\"),\n  sessionId: text(\"session_id\"),\n  ipAddress: text(\"ip_address\"),\n  userAgent: text(\"user_agent\"),\n  createdAt: timestamp(\"created_at\").defaultNow(),\n});\n\nexport const insertUserSchema = createInsertSchema(users).pick({\n  username: true,\n  password: true,\n});\n\nexport const insertContactSubmissionSchema = createInsertSchema(contactSubmissions).pick({\n  name: true,\n  email: true,\n  company: true,\n  message: true,\n  utmSource: true,\n}).extend({\n  email: z.string().email(\"Invalid email address\"),\n  name: z.string().min(1, \"Name is required\"),\n  message: z.string().min(10, \"Message must be at least 10 characters\"),\n});\n\nexport const insertAnalyticsEventSchema = createInsertSchema(analyticsEvents).pick({\n  event: true,\n  properties: true,\n  sessionId: true,\n});\n\nexport type InsertUser = z.infer<typeof insertUserSchema>;\nexport type User = typeof users.$inferSelect;\nexport type InsertContactSubmission = z.infer<typeof insertContactSubmissionSchema>;\nexport type ContactSubmission = typeof contactSubmissions.$inferSelect;\nexport type InsertAnalyticsEvent = z.infer<typeof insertAnalyticsEventSchema>;\nexport type AnalyticsEvent = typeof analyticsEvents.$inferSelect;\n","size_bytes":2188},"client/src/App.tsx":{"content":"import { Switch, Route } from \"wouter\";\nimport { queryClient } from \"./lib/queryClient\";\nimport { QueryClientProvider } from \"@tanstack/react-query\";\nimport { Toaster } from \"@/components/ui/toaster\";\nimport { TooltipProvider } from \"@/components/ui/tooltip\";\nimport { ThemeProvider } from \"@/components/layout/theme-provider\";\nimport NotFound from \"@/pages/not-found\";\nimport Home from \"@/pages/home\";\nimport Work from \"@/pages/work\";\nimport CaseStudy from \"@/pages/work/[slug]\";\nimport Toolbox from \"@/pages/toolbox\";\nimport About from \"@/pages/about\";\nimport Contact from \"@/pages/contact\";\nimport ContactSuccess from \"@/pages/contact-success\";\n\nfunction Router() {\n  return (\n    <Switch>\n      <Route path=\"/\" component={Home} />\n      <Route path=\"/work\" component={Work} />\n      <Route path=\"/work/:slug\" component={CaseStudy} />\n      <Route path=\"/toolbox\" component={Toolbox} />\n      <Route path=\"/about\" component={About} />\n      <Route path=\"/contact\" component={Contact} />\n      <Route path=\"/contact/success\" component={ContactSuccess} />\n      <Route component={NotFound} />\n    </Switch>\n  );\n}\n\nfunction App() {\n  return (\n    <QueryClientProvider client={queryClient}>\n      <ThemeProvider>\n        <TooltipProvider>\n          <Toaster />\n          <Router />\n        </TooltipProvider>\n      </ThemeProvider>\n    </QueryClientProvider>\n  );\n}\n\nexport default App;\n","size_bytes":1387},"client/src/index.css":{"content":"@import url('https://fonts.googleapis.com/css2?family=Space+Grotesk:wght@300;400;500;600;700&family=Inter:wght@300;400;500;600;700&family=JetBrains+Mono:wght@400;500&display=swap');\n\n@tailwind base;\n@tailwind components;\n@tailwind utilities;\n\n:root {\n  /* Typography Scale (Fluid) */\n  --font-display: clamp(2.2rem, 2.6vw + 1rem, 3rem);\n  --font-h1: clamp(1.8rem, 1.6vw + 1rem, 2.4rem);\n  --font-h2: clamp(1.4rem, 1.2vw + 0.9rem, 1.8rem);\n  --font-body: clamp(1rem, 0.35vw + 0.9rem, 1.1rem);\n  \n  /* Radius Tokens */\n  --r-card: 1.25rem;\n  --r-chip: 999px;\n  --radius: 0.75rem;\n  \n  /* Shadow Tokens */\n  --sh-card: 0 8px 30px rgba(0,0,0,0.06);\n  --sh-hover: 0 12px 40px rgba(0,0,0,0.10);\n  \n  /* Spacing Tokens */\n  --space-section: clamp(2.5rem, 6vw, 5rem);\n  \n  /* Motion Tokens */\n  --dur-fast: 160ms;\n  --dur-med: 260ms;\n  --easing: cubic-bezier(.2,.7,.2,1);\n  \n  /* Color System */\n  --background: hsl(0, 0%, 99%);\n  --surface: hsl(0, 0%, 100%);\n  --foreground: hsl(224, 71%, 4%);\n  --card: hsl(0, 0%, 100%);\n  --card-foreground: hsl(224, 71%, 4%);\n  --popover: hsl(0, 0%, 100%);\n  --popover-foreground: hsl(224, 71%, 4%);\n  --primary: hsl(234, 89%, 74%);\n  --primary-foreground: hsl(0, 0%, 100%);\n  --secondary: hsl(220, 14%, 96%);\n  --secondary-foreground: hsl(224, 71%, 4%);\n  --muted: hsl(220, 13%, 91%);\n  --muted-foreground: hsl(220, 8.9%, 46%);\n  --accent: hsl(234, 89%, 74%);\n  --accent-foreground: hsl(0, 0%, 100%);\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(32, 95%, 44%);\n  --destructive: hsl(0, 84%, 60%);\n  --destructive-foreground: hsl(0, 0%, 100%);\n  --border: hsl(220, 13%, 91%);\n  --input: hsl(220, 13%, 91%);\n  --ring: hsl(234, 89%, 74%);\n  --chart-1: hsl(12, 76%, 61%);\n  --chart-2: hsl(173, 58%, 39%);\n  --chart-3: hsl(197, 37%, 24%);\n  --chart-4: hsl(43, 74%, 66%);\n  --chart-5: hsl(27, 87%, 67%);\n  \n  /* Fonts */\n  --font-family-display: 'Space Grotesk', sans-serif;\n  --font-family-sans: 'Inter', system-ui, sans-serif;\n  --font-family-mono: 'JetBrains Mono', ui-monospace, monospace;\n}\n\n.dark {\n  /* Dark Color System */\n  --background: hsl(224, 71%, 4%);\n  --surface: hsl(224, 45%, 7%);\n  --foreground: hsl(213, 31%, 91%);\n  --card: hsl(224, 45%, 7%);\n  --card-foreground: hsl(213, 31%, 91%);\n  --popover: hsl(224, 45%, 7%);\n  --popover-foreground: hsl(213, 31%, 91%);\n  --primary: hsl(234, 89%, 74%);\n  --primary-foreground: hsl(224, 71%, 4%);\n  --secondary: hsl(215, 27%, 17%);\n  --secondary-foreground: hsl(213, 31%, 91%);\n  --muted: hsl(215, 27%, 17%);\n  --muted-foreground: hsl(217, 10%, 64%);\n  --accent: hsl(234, 89%, 74%);\n  --accent-foreground: hsl(224, 71%, 4%);\n  --success: hsl(142, 76%, 36%);\n  --warning: hsl(32, 95%, 44%);\n  --destructive: hsl(0, 62%, 30%);\n  --destructive-foreground: hsl(213, 31%, 91%);\n  --border: hsl(215, 27%, 17%);\n  --input: hsl(215, 27%, 17%);\n  --ring: hsl(234, 89%, 74%);\n  \n  /* Dark mode shadows */\n  --sh-card: 0 8px 30px rgba(0,0,0,0.4);\n  --sh-hover: 0 12px 40px rgba(0,0,0,0.6);\n}\n\n@layer base {\n  * {\n    @apply border-border;\n  }\n\n  body {\n    @apply bg-background text-foreground antialiased;\n    font-family: var(--font-family-sans);\n    font-size: var(--font-body);\n    line-height: 1.6;\n  }\n\n  html {\n    scroll-behavior: smooth;\n  }\n}\n\n@layer components {\n  .gradient-text {\n    background: linear-gradient(135deg, hsl(var(--primary)) 0%, hsl(var(--chart-1)) 100%);\n    -webkit-background-clip: text;\n    -webkit-text-fill-color: transparent;\n    background-clip: text;\n  }\n\n  .glass-effect {\n    background: rgba(255, 255, 255, 0.1);\n    backdrop-filter: blur(10px);\n    border: 1px solid rgba(255, 255, 255, 0.2);\n  }\n\n  /* Typography Scale */\n  .text-display {\n    font-size: var(--font-display);\n    font-family: var(--font-family-display);\n    font-weight: 700;\n    letter-spacing: -0.025em;\n    line-height: 1.1;\n  }\n\n  .text-h1 {\n    font-size: var(--font-h1);\n    font-family: var(--font-family-display);\n    font-weight: 600;\n    letter-spacing: -0.02em;\n    line-height: 1.2;\n  }\n\n  .text-h2 {\n    font-size: var(--font-h2);\n    font-family: var(--font-family-display);\n    font-weight: 600;\n    letter-spacing: -0.015em;\n    line-height: 1.3;\n  }\n\n  .text-body-lg {\n    font-size: var(--font-body);\n    font-family: var(--font-family-sans);\n    font-weight: 400;\n    line-height: 1.6;\n  }\n\n  /* Longform content typography */\n  .prose-enhanced {\n    font-family: var(--font-family-sans);\n    line-height: 1.7;\n  }\n\n  .prose-enhanced h1,\n  .prose-enhanced h2,\n  .prose-enhanced h3,\n  .prose-enhanced h4 {\n    font-family: var(--font-family-display);\n    font-weight: 600;\n  }\n\n  .prose-enhanced h1 {\n    font-size: var(--font-h1);\n    letter-spacing: -0.02em;\n    line-height: 1.2;\n  }\n\n  .prose-enhanced h2 {\n    font-size: var(--font-h2);\n    letter-spacing: -0.015em;\n    line-height: 1.3;\n  }\n\n  .prose-enhanced h3 {\n    font-size: 1.25rem;\n    letter-spacing: -0.01em;\n    line-height: 1.4;\n  }\n\n  .prose-enhanced p {\n    font-size: var(--font-body);\n    line-height: 1.7;\n    margin-bottom: 1.25em;\n  }\n\n  .prose-enhanced strong {\n    font-weight: 600;\n  }\n}\n\n@layer utilities {\n  .animate-fade-in {\n    animation: fadeIn 0.5s ease-in-out;\n  }\n\n  .animate-slide-up {\n    animation: slideUp 0.6s ease-out;\n  }\n\n  .animate-scale-in {\n    animation: scaleIn 0.4s ease-out;\n  }\n\n  @keyframes fadeIn {\n    from { opacity: 0; }\n    to { opacity: 1; }\n  }\n\n  @keyframes slideUp {\n    from { transform: translateY(20px); opacity: 0; }\n    to { transform: translateY(0); opacity: 1; }\n  }\n\n  @keyframes scaleIn {\n    from { transform: scale(0.95); opacity: 0; }\n    to { transform: scale(1); opacity: 1; }\n  }\n}\n\n/* Custom scrollbar */\n::-webkit-scrollbar {\n  width: 6px;\n}\n\n::-webkit-scrollbar-track {\n  background: hsl(var(--muted));\n}\n\n::-webkit-scrollbar-thumb {\n  background: hsl(var(--muted-foreground));\n  border-radius: 3px;\n}\n\n::-webkit-scrollbar-thumb:hover {\n  background: hsl(var(--primary));\n}\n","size_bytes":5908},"client/src/main.tsx":{"content":"import { createRoot } from \"react-dom/client\";\nimport App from \"./App\";\nimport \"./index.css\";\n\ncreateRoot(document.getElementById(\"root\")!).render(<App />);\n","size_bytes":157},"server/middleware/rate-limit.ts":{"content":"import { Request, Response, NextFunction } from \"express\";\n\ninterface RateLimitStore {\n  [key: string]: {\n    count: number;\n    resetTime: number;\n  };\n}\n\nclass RateLimiter {\n  private store: RateLimitStore = {};\n  private windowMs: number;\n  private maxRequests: number;\n\n  constructor(windowMs: number = 15 * 60 * 1000, maxRequests: number = 5) {\n    this.windowMs = windowMs;\n    this.maxRequests = maxRequests;\n  }\n\n  middleware() {\n    return (req: Request, res: Response, next: NextFunction) => {\n      const key = this.getKey(req);\n      const now = Date.now();\n      const record = this.store[key];\n\n      if (!record || now > record.resetTime) {\n        this.store[key] = {\n          count: 1,\n          resetTime: now + this.windowMs,\n        };\n        return next();\n      }\n\n      if (record.count >= this.maxRequests) {\n        return res.status(429).json({\n          error: \"Too many requests\",\n          message: \"Please wait before submitting another request.\",\n          retryAfter: Math.ceil((record.resetTime - now) / 1000),\n        });\n      }\n\n      record.count++;\n      next();\n    };\n  }\n\n  private getKey(req: Request): string {\n    return req.ip || req.connection.remoteAddress || \"unknown\";\n  }\n\n  cleanup() {\n    const now = Date.now();\n    Object.keys(this.store).forEach(key => {\n      if (now > this.store[key].resetTime) {\n        delete this.store[key];\n      }\n    });\n  }\n}\n\nexport const contactFormRateLimit = new RateLimiter(15 * 60 * 1000, 3); // 3 requests per 15 minutes\nexport const analyticsRateLimit = new RateLimiter(5 * 60 * 1000, 50); // 50 events per 5 minutes\n\n// Cleanup expired entries every hour\nsetInterval(() => {\n  contactFormRateLimit.cleanup();\n  analyticsRateLimit.cleanup();\n}, 60 * 60 * 1000);\n","size_bytes":1755},"server/services/email.ts":{"content":"interface EmailService {\n  sendContactNotification(submission: {\n    name: string;\n    email: string;\n    company?: string;\n    message: string;\n    utmSource?: string;\n  }): Promise<boolean>;\n}\n\nclass ConsoleEmailService implements EmailService {\n  async sendContactNotification(submission: {\n    name: string;\n    email: string;\n    company?: string;\n    message: string;\n    utmSource?: string;\n  }): Promise<boolean> {\n    console.log(\"📧 New contact form submission:\");\n    console.log(\"Name:\", submission.name);\n    console.log(\"Email:\", submission.email);\n    console.log(\"Company:\", submission.company || \"Not provided\");\n    console.log(\"Message:\", submission.message);\n    console.log(\"UTM Source:\", submission.utmSource || \"direct\");\n    console.log(\"---\");\n\n    // Simulate email sending delay\n    await new Promise(resolve => setTimeout(resolve, 100));\n    \n    return true;\n  }\n}\n\nexport const emailService: EmailService = new ConsoleEmailService();\n","size_bytes":966},"client/src/data/case-studies.ts":{"content":"export interface CaseStudy {\n  slug: string;\n  title: string;\n  emoji: string;\n  role: string;\n  timeframe: string;\n  context: string;\n  problem: string;\n  constraints: string[];\n  approach: string;\n  results: {\n    metric: string;\n    baseline?: string;\n    value: string;\n    delta?: string;\n    unit?: string;\n    period: string;\n  }[];\n  stack: string[];\n  artifacts: {\n    src: string;\n    type: \"image\" | \"video\" | \"document\";\n    caption: string;\n    alt: string;\n  }[];\n  learnings: string[];\n  confidential: boolean;\n  tags: string[];\n}\n\nexport const caseStudies: CaseStudy[] = [\n  {\n    slug: \"the-launchpad\",\n    title: \"The Launchpad\",\n    emoji: \"🚀\",\n    role: \"Marketing Director & System Architect\",\n    timeframe: \"2023-2024\",\n    context: \"Graston Technique® - Healthcare Training Platform\",\n    problem: \"A static directory of healthcare providers was underperforming as a lead generation tool. The existing system had no automation, poor user experience, and limited conversion tracking.\",\n    constraints: [\n      \"Legacy WordPress infrastructure\",\n      \"Limited development resources\",\n      \"Compliance requirements for healthcare data\",\n      \"Tight timeline for implementation\"\n    ],\n    approach: \"I designed and implemented a comprehensive marketing automation system that transformed the static directory into an intelligent lead generation engine. This included automated email sequences, progressive profiling, and integrated CRM workflows.\",\n    results: [\n      {\n        metric: \"Qualified Leads\",\n        baseline: \"12 per month\",\n        value: \"35 per month\",\n        delta: \"+192%\",\n        period: \"6 months post-launch\"\n      },\n      {\n        metric: \"Provider Engagement\",\n        baseline: \"23%\",\n        value: \"67%\",\n        delta: \"+191%\",\n        period: \"3 months\"\n      },\n      {\n        metric: \"Conversion Rate\",\n        baseline: \"1.2%\",\n        value: \"4.8%\",\n        delta: \"+300%\",\n        period: \"90 days\"\n      }\n    ],\n    stack: [\n      \"WordPress\",\n      \"FluentCRM\",\n      \"Custom PHP\",\n      \"Google Analytics 4\",\n      \"Google Tag Manager\",\n      \"Gravity Forms\"\n    ],\n    artifacts: [\n      {\n        src: \"/case-studies/launchpad-automation-flow.png\",\n        type: \"image\",\n        caption: \"Marketing automation workflow diagram showing lead nurturing sequences\",\n        alt: \"Flowchart showing automated email sequences and decision points for lead nurturing\"\n      },\n      {\n        src: \"/case-studies/launchpad-dashboard.png\",\n        type: \"image\",\n        caption: \"Analytics dashboard showing conversion metrics and engagement rates\",\n        alt: \"Screenshot of analytics dashboard with charts showing lead conversion rates and engagement metrics\"\n      }\n    ],\n    learnings: [\n      \"Progressive profiling significantly improved data quality while maintaining user experience\",\n      \"Automated lead scoring helped prioritize follow-up efforts and improved sales efficiency\",\n      \"Integration challenges taught me the importance of robust error handling in CRM workflows\"\n    ],\n    confidential: false,\n    tags: [\"Marketing Automation\", \"Product Vision\", \"Revenue Growth\"]\n  },\n  {\n    slug: \"the-compass\",\n    title: \"The Compass\",\n    emoji: \"🧭\",\n    role: \"Analytics Engineering Lead\",\n    timeframe: \"2023\",\n    context: \"Multi-platform e-commerce optimization\",\n    problem: \"Marketing attribution was broken across multiple touchpoints, making it impossible to optimize ad spend or measure true ROI. Legacy tracking setup was capturing incomplete data and providing misleading insights.\",\n    constraints: [\n      \"Multiple advertising platforms (Google, Facebook, LinkedIn)\",\n      \"Complex customer journey spanning months\",\n      \"Legacy analytics implementation with data gaps\",\n      \"Need for real-time optimization\"\n    ],\n    approach: \"I architected a comprehensive data layer and attribution model using Google Tag Manager, implementing server-side tracking, custom conversion events, and advanced audience segmentation to provide accurate attribution data.\",\n    results: [\n      {\n        metric: \"Attribution Accuracy\",\n        baseline: \"43%\",\n        value: \"91%\",\n        delta: \"+112%\",\n        period: \"Post-implementation\"\n      },\n      {\n        metric: \"Ad Spend Efficiency\",\n        baseline: \"$12.50\",\n        value: \"$7.80\",\n        delta: \"-38%\",\n        unit: \"Cost per conversion\",\n        period: \"3 months\"\n      },\n      {\n        metric: \"Marketing ROI Visibility\",\n        baseline: \"Limited\",\n        value: \"Complete\",\n        period: \"Ongoing\"\n      }\n    ],\n    stack: [\n      \"Google Tag Manager\",\n      \"Google Analytics 4\",\n      \"Google Ads\",\n      \"Facebook Pixel\",\n      \"Custom JavaScript\",\n      \"PHP Webhooks\"\n    ],\n    artifacts: [\n      {\n        src: \"/case-studies/compass-attribution-model.png\",\n        type: \"image\",\n        caption: \"Multi-touch attribution model showing customer journey mapping\",\n        alt: \"Diagram showing customer touchpoints across multiple channels with attribution weights\"\n      },\n      {\n        src: \"/case-studies/compass-data-flow.png\",\n        type: \"image\",\n        caption: \"Data architecture diagram showing tracking implementation\",\n        alt: \"Technical diagram of data flow from user interactions to analytics platforms\"\n      }\n    ],\n    learnings: [\n      \"Server-side tracking is essential for accurate attribution in privacy-focused environments\",\n      \"Custom event naming conventions are crucial for long-term data consistency\",\n      \"Attribution modeling requires balancing accuracy with actionable insights\"\n    ],\n    confidential: false,\n    tags: [\"Analytics Engineering\", \"Data Integrity\", \"Performance Marketing\"]\n  },\n  {\n    slug: \"the-fortress\",\n    title: \"The Fortress\",\n    emoji: \"🛡️\",\n    role: \"Infrastructure Security Lead\",\n    timeframe: \"2023-2024\",\n    context: \"High-traffic healthcare platform security hardening\",\n    problem: \"The platform was experiencing significant bot traffic, performance degradation, and security vulnerabilities that threatened both user experience and business operations.\",\n    constraints: [\n      \"High-traffic WordPress environment\",\n      \"Strict healthcare compliance requirements\",\n      \"24/7 uptime requirements\",\n      \"Limited maintenance windows\"\n    ],\n    approach: \"I implemented a multi-layered security and performance optimization strategy using Cloudflare's enterprise features, server-side optimizations, and proactive monitoring to create a robust defense system.\",\n    results: [\n      {\n        metric: \"Malicious Bot Blocks\",\n        value: \"85,000\",\n        unit: \"per month\",\n        period: \"Ongoing\"\n      },\n      {\n        metric: \"Page Load Speed\",\n        baseline: \"4.3s\",\n        value: \"1.8s\",\n        delta: \"-58%\",\n        period: \"Post-optimization\"\n      },\n      {\n        metric: \"Server Load Reduction\",\n        baseline: \"100%\",\n        value: \"65%\",\n        delta: \"-35%\",\n        period: \"Average reduction\"\n      },\n      {\n        metric: \"Security Score\",\n        baseline: \"B+\",\n        value: \"A+\",\n        period: \"Security headers audit\"\n      }\n    ],\n    stack: [\n      \"Cloudflare WAF\",\n      \"LiteSpeed Cache\",\n      \"Apache optimizations\",\n      \"PHP-FPM tuning\",\n      \"Custom security headers\",\n      \"Netdata monitoring\"\n    ],\n    artifacts: [\n      {\n        src: \"/case-studies/fortress-security-layers.png\",\n        type: \"image\",\n        caption: \"Multi-layer security architecture showing defense mechanisms\",\n        alt: \"Diagram showing security layers from CDN to application level with threat mitigation strategies\"\n      },\n      {\n        src: \"/case-studies/fortress-performance-metrics.png\",\n        type: \"image\",\n        caption: \"Performance monitoring dashboard showing Core Web Vitals improvements\",\n        alt: \"Performance metrics dashboard showing before and after page speed optimization results\"\n      }\n    ],\n    learnings: [\n      \"Layered security approaches are more effective than single-point solutions\",\n      \"Performance and security optimizations often complement each other\",\n      \"Monitoring and alerting are crucial for maintaining security posture\"\n    ],\n    confidential: false,\n    tags: [\"Infrastructure Security\", \"Performance Tuning\", \"DevOps\"]\n  }\n];\n\nexport function getCaseStudy(slug: string): CaseStudy | undefined {\n  return caseStudies.find(study => study.slug === slug);\n}\n\nexport function getFeaturedCaseStudies(): CaseStudy[] {\n  return caseStudies.slice(0, 3);\n}\n","size_bytes":8543},"client/src/data/experience.ts":{"content":"export interface ExperienceItem {\n  company: string;\n  role: string;\n  startDate: string;\n  endDate?: string;\n  current: boolean;\n  highlights: string[];\n  stack: string[];\n  impactMetrics: {\n    metric: string;\n    value: string;\n    context: string;\n  }[];\n}\n\nexport const experience: ExperienceItem[] = [\n  {\n    company: \"Graston Technique®\",\n    role: \"Marketing Director & System Architect\",\n    startDate: \"2023-01\",\n    current: true,\n    highlights: [\n      \"Led complete digital transformation of healthcare training platform serving 20,000+ providers\",\n      \"Architected scalable marketing automation ecosystem integrating brand strategy with technical infrastructure\",\n      \"Directed cross-functional team implementing data-driven growth strategies\",\n      \"Managed multi-channel campaigns across email, social, and paid advertising platforms\"\n    ],\n    stack: [\n      \"WordPress\",\n      \"FluentCRM\",\n      \"Google Analytics 4\",\n      \"Google Tag Manager\",\n      \"Cloudflare\",\n      \"PHP\",\n      \"JavaScript\"\n    ],\n    impactMetrics: [\n      {\n        metric: \"Lead Generation\",\n        value: \"+192% increase\",\n        context: \"Qualified monthly leads from automation\"\n      },\n      {\n        metric: \"Provider Engagement\",\n        value: \"+191% increase\",\n        context: \"Active platform participation rates\"\n      },\n      {\n        metric: \"Campaign Efficiency\",\n        value: \"40% faster\",\n        context: \"Marketing campaign production timelines\"\n      }\n    ]\n  },\n  {\n    company: \"Ultimate Technologies Group\",\n    role: \"Interim Director of Marketing\",\n    startDate: \"2023-01\",\n    endDate: \"2023-06\",\n    current: false,\n    highlights: [\n      \"Stabilized marketing operations during critical leadership transition period\",\n      \"Streamlined lead generation workflows and CRM processes\",\n      \"Implemented new marketing automation efficiencies\",\n      \"Maintained campaign momentum while optimizing team productivity\"\n    ],\n    stack: [\n      \"HubSpot\",\n      \"Salesforce\",\n      \"Google Ads\",\n      \"LinkedIn Ads\",\n      \"Marketing Automation\"\n    ],\n    impactMetrics: [\n      {\n        metric: \"Campaign Production\",\n        value: \"40% improvement\",\n        context: \"Timeline efficiency during transition\"\n      },\n      {\n        metric: \"Lead Quality\",\n        value: \"Maintained 95%+\",\n        context: \"Quality scores throughout transition\"\n      }\n    ]\n  },\n  {\n    company: \"Riley Bennett Egloff, LLP\",\n    role: \"Marketing Manager → Administrator\",\n    startDate: \"2015-03\",\n    endDate: \"2023-01\",\n    current: false,\n    highlights: [\n      \"Directed firm-wide marketing strategy, content development, and business development programs\",\n      \"Managed complete digital rebrand and website redesign project\",\n      \"Implemented technical SEO overhaul resulting in significant organic growth\",\n      \"Developed integrated marketing campaigns across multiple service lines\",\n      \"Advanced from Marketing Manager to Marketing Administrator recognizing strategic leadership\"\n    ],\n    stack: [\n      \"WordPress\",\n      \"SEO Tools\",\n      \"Content Management\",\n      \"Brand Strategy\",\n      \"Digital Marketing\"\n    ],\n    impactMetrics: [\n      {\n        metric: \"Client Inquiries\",\n        value: \"+35% increase\",\n        context: \"Qualified leads from digital rebrand\"\n      },\n      {\n        metric: \"Organic Traffic\",\n        value: \"Significant growth\",\n        context: \"From technical SEO implementation\"\n      },\n      {\n        metric: \"Brand Recognition\",\n        value: \"Market leader\",\n        context: \"Regional legal services positioning\"\n      }\n    ]\n  }\n];\n\nexport function getCurrentRole(): ExperienceItem | undefined {\n  return experience.find(item => item.current);\n}\n\nexport function getExperienceByTimeframe(): ExperienceItem[] {\n  return experience.sort((a, b) => {\n    const aDate = new Date(a.startDate);\n    const bDate = new Date(b.startDate);\n    return bDate.getTime() - aDate.getTime();\n  });\n}\n","size_bytes":3980},"client/src/data/skills.ts":{"content":"export interface Skill {\n  name: string;\n  category: \"frontend\" | \"backend\" | \"devops\" | \"marketing\" | \"analytics\";\n  level: 1 | 2 | 3 | 4 | 5;\n  evidenceLinks?: string[];\n}\n\nexport interface SkillCategory {\n  id: string;\n  name: string;\n  description: string;\n  icon: string;\n  skills: Skill[];\n}\n\nexport const skillCategories: SkillCategory[] = [\n  {\n    id: \"marketing\",\n    name: \"Marketing Automation\",\n    description: \"Strategic campaign design and lifecycle management\",\n    icon: \"📧\",\n    skills: [\n      { name: \"FluentCRM\", category: \"marketing\", level: 5 },\n      { name: \"WP Fusion\", category: \"marketing\", level: 4 },\n      { name: \"Lifecycle Campaigns\", category: \"marketing\", level: 5 },\n      { name: \"Lead Nurturing\", category: \"marketing\", level: 5 },\n      { name: \"Progressive Profiling\", category: \"marketing\", level: 4 },\n      { name: \"Segmentation Strategy\", category: \"marketing\", level: 5 }\n    ]\n  },\n  {\n    id: \"analytics\",\n    name: \"Analytics & Tracking\",\n    description: \"Data architecture and attribution modeling\",\n    icon: \"📊\",\n    skills: [\n      { name: \"Google Tag Manager\", category: \"analytics\", level: 5 },\n      { name: \"Google Analytics 4\", category: \"analytics\", level: 5 },\n      { name: \"Google Ads\", category: \"analytics\", level: 4 },\n      { name: \"Conversion Tracking\", category: \"analytics\", level: 5 },\n      { name: \"Attribution Modeling\", category: \"analytics\", level: 4 },\n      { name: \"Custom Events\", category: \"analytics\", level: 5 }\n    ]\n  },\n  {\n    id: \"frontend\",\n    name: \"Frontend Development\",\n    description: \"User interface design and optimization\",\n    icon: \"🎨\",\n    skills: [\n      { name: \"JavaScript\", category: \"frontend\", level: 4 },\n      { name: \"jQuery\", category: \"frontend\", level: 4 },\n      { name: \"CSS\", category: \"frontend\", level: 4 },\n      { name: \"HTML\", category: \"frontend\", level: 5 },\n      { name: \"Responsive Design\", category: \"frontend\", level: 4 },\n      { name: \"Core Web Vitals\", category: \"frontend\", level: 4 }\n    ]\n  },\n  {\n    id: \"backend\",\n    name: \"Backend & Database\",\n    description: \"Server-side development and data management\",\n    icon: \"⚙️\",\n    skills: [\n      { name: \"PHP\", category: \"backend\", level: 4 },\n      { name: \"SQL\", category: \"backend\", level: 4 },\n      { name: \"WordPress\", category: \"backend\", level: 5 },\n      { name: \"WP-CLI\", category: \"backend\", level: 4 },\n      { name: \"Custom Plugins\", category: \"backend\", level: 4 },\n      { name: \"Database Optimization\", category: \"backend\", level: 4 }\n    ]\n  },\n  {\n    id: \"devops\",\n    name: \"Infrastructure & Security\",\n    description: \"Performance optimization and security hardening\",\n    icon: \"🛡️\",\n    skills: [\n      { name: \"Cloudflare\", category: \"devops\", level: 5 },\n      { name: \"Apache\", category: \"devops\", level: 4 },\n      { name: \"PHP-FPM\", category: \"devops\", level: 4 },\n      { name: \"LiteSpeed Cache\", category: \"devops\", level: 4 },\n      { name: \"WAF Configuration\", category: \"devops\", level: 4 },\n      { name: \"Performance Monitoring\", category: \"devops\", level: 4 }\n    ]\n  }\n];\n\nexport function getSkillsByCategory(categoryId: string): Skill[] {\n  const category = skillCategories.find(cat => cat.id === categoryId);\n  return category?.skills || [];\n}\n\nexport function getAllSkills(): Skill[] {\n  return skillCategories.flatMap(category => category.skills);\n}\n","size_bytes":3398},"client/src/hooks/use-mobile.tsx":{"content":"import * as React from \"react\"\n\nconst MOBILE_BREAKPOINT = 768\n\nexport function useIsMobile() {\n  const [isMobile, setIsMobile] = React.useState<boolean | undefined>(undefined)\n\n  React.useEffect(() => {\n    const mql = window.matchMedia(`(max-width: ${MOBILE_BREAKPOINT - 1}px)`)\n    const onChange = () => {\n      setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    }\n    mql.addEventListener(\"change\", onChange)\n    setIsMobile(window.innerWidth < MOBILE_BREAKPOINT)\n    return () => mql.removeEventListener(\"change\", onChange)\n  }, [])\n\n  return !!isMobile\n}\n","size_bytes":565},"client/src/hooks/use-theme.tsx":{"content":"import { createContext, useContext, useEffect, useState } from \"react\";\n\ntype Theme = \"dark\" | \"light\" | \"system\";\n\ntype ThemeProviderContextType = {\n  theme: Theme;\n  setTheme: (theme: Theme) => void;\n};\n\nconst ThemeProviderContext = createContext<ThemeProviderContextType | undefined>(undefined);\n\nexport function useTheme() {\n  const context = useContext(ThemeProviderContext);\n\n  if (context === undefined) {\n    throw new Error(\"useTheme must be used within a ThemeProvider\");\n  }\n\n  return context;\n}\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n  defaultTheme?: Theme;\n  storageKey?: string;\n}\n\nexport function ThemeProviderComponent({\n  children,\n  defaultTheme = \"system\",\n  storageKey = \"portfolio-theme\",\n}: ThemeProviderProps) {\n  const [theme, setTheme] = useState<Theme>(\n    () => (localStorage.getItem(storageKey) as Theme) || defaultTheme\n  );\n\n  useEffect(() => {\n    const root = window.document.documentElement;\n\n    root.classList.remove(\"light\", \"dark\");\n\n    if (theme === \"system\") {\n      const systemTheme = window.matchMedia(\"(prefers-color-scheme: dark)\")\n        .matches\n        ? \"dark\"\n        : \"light\";\n\n      root.classList.add(systemTheme);\n      return;\n    }\n\n    root.classList.add(theme);\n  }, [theme]);\n\n  const value = {\n    theme,\n    setTheme: (theme: Theme) => {\n      localStorage.setItem(storageKey, theme);\n      setTheme(theme);\n    },\n  };\n\n  return (\n    <ThemeProviderContext.Provider value={value}>\n      {children}\n    </ThemeProviderContext.Provider>\n  );\n}\n","size_bytes":1529},"client/src/hooks/use-toast.ts":{"content":"import * as React from \"react\"\n\nimport type {\n  ToastActionElement,\n  ToastProps,\n} from \"@/components/ui/toast\"\n\nconst TOAST_LIMIT = 1\nconst TOAST_REMOVE_DELAY = 1000000\n\ntype ToasterToast = ToastProps & {\n  id: string\n  title?: React.ReactNode\n  description?: React.ReactNode\n  action?: ToastActionElement\n}\n\nconst actionTypes = {\n  ADD_TOAST: \"ADD_TOAST\",\n  UPDATE_TOAST: \"UPDATE_TOAST\",\n  DISMISS_TOAST: \"DISMISS_TOAST\",\n  REMOVE_TOAST: \"REMOVE_TOAST\",\n} as const\n\nlet count = 0\n\nfunction genId() {\n  count = (count + 1) % Number.MAX_SAFE_INTEGER\n  return count.toString()\n}\n\ntype ActionType = typeof actionTypes\n\ntype Action =\n  | {\n      type: ActionType[\"ADD_TOAST\"]\n      toast: ToasterToast\n    }\n  | {\n      type: ActionType[\"UPDATE_TOAST\"]\n      toast: Partial<ToasterToast>\n    }\n  | {\n      type: ActionType[\"DISMISS_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n  | {\n      type: ActionType[\"REMOVE_TOAST\"]\n      toastId?: ToasterToast[\"id\"]\n    }\n\ninterface State {\n  toasts: ToasterToast[]\n}\n\nconst toastTimeouts = new Map<string, ReturnType<typeof setTimeout>>()\n\nconst addToRemoveQueue = (toastId: string) => {\n  if (toastTimeouts.has(toastId)) {\n    return\n  }\n\n  const timeout = setTimeout(() => {\n    toastTimeouts.delete(toastId)\n    dispatch({\n      type: \"REMOVE_TOAST\",\n      toastId: toastId,\n    })\n  }, TOAST_REMOVE_DELAY)\n\n  toastTimeouts.set(toastId, timeout)\n}\n\nexport const reducer = (state: State, action: Action): State => {\n  switch (action.type) {\n    case \"ADD_TOAST\":\n      return {\n        ...state,\n        toasts: [action.toast, ...state.toasts].slice(0, TOAST_LIMIT),\n      }\n\n    case \"UPDATE_TOAST\":\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === action.toast.id ? { ...t, ...action.toast } : t\n        ),\n      }\n\n    case \"DISMISS_TOAST\": {\n      const { toastId } = action\n\n      // ! Side effects ! - This could be extracted into a dismissToast() action,\n      // but I'll keep it here for simplicity\n      if (toastId) {\n        addToRemoveQueue(toastId)\n      } else {\n        state.toasts.forEach((toast) => {\n          addToRemoveQueue(toast.id)\n        })\n      }\n\n      return {\n        ...state,\n        toasts: state.toasts.map((t) =>\n          t.id === toastId || toastId === undefined\n            ? {\n                ...t,\n                open: false,\n              }\n            : t\n        ),\n      }\n    }\n    case \"REMOVE_TOAST\":\n      if (action.toastId === undefined) {\n        return {\n          ...state,\n          toasts: [],\n        }\n      }\n      return {\n        ...state,\n        toasts: state.toasts.filter((t) => t.id !== action.toastId),\n      }\n  }\n}\n\nconst listeners: Array<(state: State) => void> = []\n\nlet memoryState: State = { toasts: [] }\n\nfunction dispatch(action: Action) {\n  memoryState = reducer(memoryState, action)\n  listeners.forEach((listener) => {\n    listener(memoryState)\n  })\n}\n\ntype Toast = Omit<ToasterToast, \"id\">\n\nfunction toast({ ...props }: Toast) {\n  const id = genId()\n\n  const update = (props: ToasterToast) =>\n    dispatch({\n      type: \"UPDATE_TOAST\",\n      toast: { ...props, id },\n    })\n  const dismiss = () => dispatch({ type: \"DISMISS_TOAST\", toastId: id })\n\n  dispatch({\n    type: \"ADD_TOAST\",\n    toast: {\n      ...props,\n      id,\n      open: true,\n      onOpenChange: (open) => {\n        if (!open) dismiss()\n      },\n    },\n  })\n\n  return {\n    id: id,\n    dismiss,\n    update,\n  }\n}\n\nfunction useToast() {\n  const [state, setState] = React.useState<State>(memoryState)\n\n  React.useEffect(() => {\n    listeners.push(setState)\n    return () => {\n      const index = listeners.indexOf(setState)\n      if (index > -1) {\n        listeners.splice(index, 1)\n      }\n    }\n  }, [state])\n\n  return {\n    ...state,\n    toast,\n    dismiss: (toastId?: string) => dispatch({ type: \"DISMISS_TOAST\", toastId }),\n  }\n}\n\nexport { useToast, toast }\n","size_bytes":3895},"client/src/lib/analytics.ts":{"content":"import { apiRequest } from \"./queryClient\";\n\ninterface AnalyticsEvent {\n  event: string;\n  properties?: Record<string, any>;\n  sessionId?: string;\n}\n\nclass Analytics {\n  private sessionId: string;\n  private isEnabled: boolean;\n\n  constructor() {\n    this.sessionId = this.generateSessionId();\n    this.isEnabled = true; // In production, you might want to check for consent\n  }\n\n  private generateSessionId(): string {\n    return `session_${Date.now()}_${Math.random().toString(36).substr(2, 9)}`;\n  }\n\n  async track(event: string, properties?: Record<string, any>): Promise<void> {\n    if (!this.isEnabled) return;\n\n    try {\n      await apiRequest(\"POST\", \"/api/analytics\", {\n        event,\n        properties: {\n          ...properties,\n          timestamp: Date.now(),\n          url: window.location.href,\n          referrer: document.referrer,\n        },\n        sessionId: this.sessionId,\n      });\n    } catch (error) {\n      console.error(\"Analytics tracking error:\", error);\n    }\n  }\n\n  // Predefined event methods\n  async trackCTAClick(location: string, label: string): Promise<void> {\n    return this.track(\"cta_click\", { location, label });\n  }\n\n  async trackCaseStudyOpen(slug: string): Promise<void> {\n    return this.track(\"case_open\", { slug });\n  }\n\n  async trackResumeDownload(): Promise<void> {\n    return this.track(\"resume_download\");\n  }\n\n  async trackContactSubmit(valid: boolean, source?: string): Promise<void> {\n    return this.track(\"contact_submit\", { valid, source });\n  }\n\n  async trackPageView(path: string): Promise<void> {\n    return this.track(\"page_view\", { path });\n  }\n}\n\nexport const analytics = new Analytics();\n\n// Track page views automatically\nif (typeof window !== \"undefined\") {\n  let currentPath = window.location.pathname;\n  \n  // Track initial page view\n  analytics.trackPageView(currentPath);\n  \n  // Track navigation changes\n  const observer = new MutationObserver(() => {\n    if (window.location.pathname !== currentPath) {\n      currentPath = window.location.pathname;\n      analytics.trackPageView(currentPath);\n    }\n  });\n  \n  observer.observe(document.body, { childList: true, subtree: true });\n}\n","size_bytes":2153},"client/src/lib/queryClient.ts":{"content":"import { QueryClient, QueryFunction } from \"@tanstack/react-query\";\n\nasync function throwIfResNotOk(res: Response) {\n  if (!res.ok) {\n    const text = (await res.text()) || res.statusText;\n    throw new Error(`${res.status}: ${text}`);\n  }\n}\n\nexport async function apiRequest(\n  method: string,\n  url: string,\n  data?: unknown | undefined,\n): Promise<Response> {\n  const res = await fetch(url, {\n    method,\n    headers: data ? { \"Content-Type\": \"application/json\" } : {},\n    body: data ? JSON.stringify(data) : undefined,\n    credentials: \"include\",\n  });\n\n  await throwIfResNotOk(res);\n  return res;\n}\n\ntype UnauthorizedBehavior = \"returnNull\" | \"throw\";\nexport const getQueryFn: <T>(options: {\n  on401: UnauthorizedBehavior;\n}) => QueryFunction<T> =\n  ({ on401: unauthorizedBehavior }) =>\n  async ({ queryKey }) => {\n    const res = await fetch(queryKey.join(\"/\") as string, {\n      credentials: \"include\",\n    });\n\n    if (unauthorizedBehavior === \"returnNull\" && res.status === 401) {\n      return null;\n    }\n\n    await throwIfResNotOk(res);\n    return await res.json();\n  };\n\nexport const queryClient = new QueryClient({\n  defaultOptions: {\n    queries: {\n      queryFn: getQueryFn({ on401: \"throw\" }),\n      refetchInterval: false,\n      refetchOnWindowFocus: false,\n      staleTime: Infinity,\n      retry: false,\n    },\n    mutations: {\n      retry: false,\n    },\n  },\n});\n","size_bytes":1383},"client/src/lib/utils.ts":{"content":"import { clsx, type ClassValue } from \"clsx\"\nimport { twMerge } from \"tailwind-merge\"\n\nexport function cn(...inputs: ClassValue[]) {\n  return twMerge(clsx(inputs))\n}\n","size_bytes":166},"client/src/pages/about.tsx":{"content":"import { Header } from \"@/components/layout/header\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { TimelineItem } from \"@/components/ui/timeline-item\";\nimport { getExperienceByTimeframe } from \"@/data/experience\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { Link } from \"wouter\";\nimport { analytics } from \"@/lib/analytics\";\n\nexport default function About() {\n  const experienceItems = getExperienceByTimeframe();\n\n  const handleContactCTA = () => {\n    analytics.trackCTAClick(\"about\", \"Get In Touch\");\n  };\n\n  const principles = [\n    {\n      title: \"Systems Thinking\",\n      description: \"Every marketing initiative should be designed as part of a larger ecosystem. I focus on creating interconnected systems that amplify each other's effectiveness rather than isolated campaigns.\"\n    },\n    {\n      title: \"Data-Driven Decisions\",\n      description: \"Intuition guides strategy, but data validates execution. I build robust measurement frameworks that provide actionable insights for continuous optimization and growth.\"\n    },\n    {\n      title: \"Technical Excellence\",\n      description: \"Marketing technology should enhance creativity, not constrain it. I architect scalable, maintainable systems that empower teams to execute ambitious campaigns with confidence.\"\n    },\n    {\n      title: \"Continuous Learning\",\n      description: \"The marketing landscape evolves rapidly. I stay current with emerging technologies, industry best practices, and regulatory changes to maintain competitive advantages.\"\n    }\n  ];\n\n  const workingStyle = [\n    {\n      aspect: \"Collaboration\",\n      description: \"I work best in cross-functional environments where I can bridge the gap between creative, technical, and business stakeholders.\"\n    },\n    {\n      aspect: \"Communication\",\n      description: \"I translate complex technical concepts into clear business language and ensure all team members understand system implications.\"\n    },\n    {\n      aspect: \"Problem-Solving\",\n      description: \"I approach challenges methodically, analyzing root causes before implementing solutions, and always document learnings for future reference.\"\n    },\n    {\n      aspect: \"Innovation\",\n      description: \"I balance proven strategies with experimental approaches, always testing new methods while maintaining reliable core systems.\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n\n      <main className=\"py-16\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"about-page-heading\">\n                The Architect in the Marketing Room\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"about-page-description\">\n                My story, working philosophy, and the experience that shaped my approach to marketing systems architecture.\n              </p>\n            </div>\n\n            {/* Main Story */}\n            <section className=\"mb-16\">\n              <div className=\"prose prose-lg max-w-none text-muted-foreground space-y-6\">\n                <p data-testid=\"story-paragraph-1\">\n                  Great marketing ideas often break at the handoff—the critical point where a creative vision meets the complex reality of technical execution. My career has been built to solve this problem.\n                </p>\n                \n                <p data-testid=\"story-paragraph-2\">\n                  I'm Jacob Darling, a marketing leader who operates as both a brand strategist and a systems architect. On one side, I direct bold rebrands, craft compelling narratives, and launch creative campaigns. On the other, I design and build the underlying technical infrastructure that makes those campaigns possible and measurable.\n                </p>\n\n                <p data-testid=\"story-paragraph-3\">\n                  This dual expertise didn't happen by accident. Early in my career, I witnessed too many brilliant marketing strategies fail because the technical execution couldn't support the creative vision. I saw campaigns that couldn't track attribution, automation workflows that broke under load, and data systems that provided more confusion than clarity.\n                </p>\n\n                <p data-testid=\"story-paragraph-4\">\n                  That's when I made a deliberate choice to become fluent in both languages—the creative language of brand strategy and the technical language of system architecture. Today, I bridge these worlds, ensuring that ambitious marketing strategies have the robust technical foundation they need to succeed at scale.\n                </p>\n              </div>\n            </section>\n\n            {/* Core Principles */}\n            <section className=\"mb-16\">\n              <h2 className=\"text-3xl font-bold mb-8\" data-testid=\"principles-heading\">\n                Core Principles\n              </h2>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {principles.map((principle, index) => (\n                  <div \n                    key={principle.title}\n                    className=\"bg-card border border-border rounded-xl p-6\"\n                    data-testid={`principle-${index}`}\n                  >\n                    <h3 className=\"text-xl font-semibold mb-3\" data-testid={`principle-title-${index}`}>\n                      {principle.title}\n                    </h3>\n                    <p className=\"text-muted-foreground\" data-testid={`principle-description-${index}`}>\n                      {principle.description}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </section>\n\n            {/* Working Style */}\n            <section className=\"mb-16\">\n              <h2 className=\"text-3xl font-bold mb-8\" data-testid=\"working-style-heading\">\n                Working Style\n              </h2>\n              <div className=\"space-y-6\">\n                {workingStyle.map((style, index) => (\n                  <div \n                    key={style.aspect}\n                    className=\"border-l-4 border-primary pl-6\"\n                    data-testid={`working-style-${index}`}\n                  >\n                    <h3 className=\"text-lg font-semibold mb-2\" data-testid={`working-style-title-${index}`}>\n                      {style.aspect}\n                    </h3>\n                    <p className=\"text-muted-foreground\" data-testid={`working-style-description-${index}`}>\n                      {style.description}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </section>\n\n            {/* Professional Journey */}\n            <section className=\"mb-16\">\n              <div className=\"bg-card border border-border rounded-xl p-8\">\n                <h2 className=\"text-3xl font-bold mb-8 text-foreground\" data-testid=\"professional-journey-heading\">\n                  Professional Journey\n                </h2>\n                \n                <div className=\"space-y-8\">\n                  {experienceItems.map((experience, index) => (\n                    <TimelineItem \n                      key={`${experience.company}-${experience.startDate}`} \n                      experience={experience} \n                    />\n                  ))}\n                </div>\n              </div>\n            </section>\n\n            {/* Certifications & Education */}\n            <section className=\"mb-16\">\n              <h2 className=\"text-3xl font-bold mb-8\" data-testid=\"certifications-heading\">\n                Certifications & Continuous Learning\n              </h2>\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                <div className=\"bg-card border border-border rounded-xl p-6\">\n                  <h3 className=\"text-xl font-semibold mb-4\" data-testid=\"certifications-title\">\n                    Industry Certifications\n                  </h3>\n                  <div className=\"space-y-3\">\n                    <div className=\"flex items-center justify-between\">\n                      <span>Google Analytics Certified</span>\n                      <Badge variant=\"outline\" data-testid=\"cert-ga\">Current</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Google Ads Certified</span>\n                      <Badge variant=\"outline\" data-testid=\"cert-ads\">Current</Badge>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span>Cloudflare Certified</span>\n                      <Badge variant=\"outline\" data-testid=\"cert-cloudflare\">Current</Badge>\n                    </div>\n                  </div>\n                </div>\n\n                <div className=\"bg-card border border-border rounded-xl p-6\">\n                  <h3 className=\"text-xl font-semibold mb-4\" data-testid=\"learning-title\">\n                    Continuous Learning Focus\n                  </h3>\n                  <div className=\"space-y-2\">\n                    <div className=\"text-muted-foreground\">• Marketing Attribution Modeling</div>\n                    <div className=\"text-muted-foreground\">• Privacy-First Analytics</div>\n                    <div className=\"text-muted-foreground\">• Server-Side Tracking</div>\n                    <div className=\"text-muted-foreground\">• Marketing Automation Strategy</div>\n                    <div className=\"text-muted-foreground\">• Performance Optimization</div>\n                  </div>\n                </div>\n              </div>\n            </section>\n\n            {/* CTA */}\n            <div className=\"bg-card border border-border rounded-xl p-8 text-center\">\n              <h3 className=\"text-2xl font-bold mb-4\" data-testid=\"about-cta-heading\">\n                Ready to work together?\n              </h3>\n              <p className=\"text-muted-foreground mb-6\" data-testid=\"about-cta-description\">\n                I'm always interested in discussing how strategic marketing systems can drive growth for ambitious organizations.\n              </p>\n              <div className=\"flex flex-col sm:flex-row gap-4 justify-center\">\n                <Link href=\"/contact\">\n                  <Button \n                    size=\"lg\" \n                    onClick={handleContactCTA}\n                    data-testid=\"button-about-contact\"\n                  >\n                    Get In Touch\n                  </Button>\n                </Link>\n                <Link href=\"/work\">\n                  <Button \n                    variant=\"outline\" \n                    size=\"lg\"\n                    data-testid=\"button-about-work\"\n                  >\n                    View My Work\n                  </Button>\n                </Link>\n              </div>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11107},"client/src/pages/contact.tsx":{"content":"import { useState } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { Card, CardContent, CardDescription, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { CalendarEmbed } from \"@/components/ui/calendar-embed\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { analytics } from \"@/lib/analytics\";\nimport { useLocation } from \"wouter\";\nimport { Linkedin, Github, Calendar, Download, Mail, Phone } from \"lucide-react\";\n\nexport default function Contact() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    company: \"\",\n    message: \"\",\n    website: \"\", // Honeypot field\n  });\n  const { toast } = useToast();\n  const [, navigate] = useLocation();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Capture UTM parameters\n      const urlParams = new URLSearchParams(window.location.search);\n      const utmSource = urlParams.get('utm_source') || 'direct';\n\n      const response = await apiRequest(\"POST\", \"/api/contact\", {\n        ...formData,\n        utmSource,\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        // Track successful submission\n        analytics.trackContactSubmit(true, utmSource);\n\n        // Redirect to success page instead of showing toast\n        navigate('/contact/success');\n      } else {\n        throw new Error(result.message || \"Failed to send message\");\n      }\n    } catch (error) {\n      console.error(\"Contact form error:\", error);\n      \n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n\n      // Track failed submission\n      analytics.trackContactSubmit(false);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleResumeDownload = async () => {\n    try {\n      analytics.trackResumeDownload();\n      \n      const response = await apiRequest(\"GET\", \"/api/resume/download\");\n      const result = await response.json();\n      \n      if (result.success) {\n        // In a real implementation, this would trigger a file download\n        toast({\n          title: \"Resume download tracked\",\n          description: \"Resume download would begin now.\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Resume download error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to download resume. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n\n  const contactMethods = [\n    {\n      icon: Mail,\n      title: \"Email\",\n      description: \"Best for detailed project discussions\",\n      action: \"Use the form below\",\n      primary: true\n    },\n    {\n      icon: Calendar,\n      title: \"Video Call\",\n      description: \"15-minute portfolio walk-through\",\n      action: \"Book calendar time\",\n      primary: false\n    },\n    {\n      icon: Phone,\n      title: \"Phone\",\n      description: \"For urgent inquiries\",\n      action: \"Available upon request\",\n      primary: false\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n\n      <main className=\"py-16\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-6xl mx-auto\">\n            {/* Hero Section */}\n            <div className=\"text-center mb-16\">\n              <h1 className=\"text-display font-bold mb-6\" data-testid=\"contact-page-heading\">\n                Let's Build Something Great Together\n              </h1>\n              <p className=\"text-body-lg text-muted-foreground max-w-3xl mx-auto mb-8\" data-testid=\"contact-page-description\">\n                Ready to discuss how strategic marketing automation and systems architecture can accelerate your growth? I'd love to hear about your challenges and explore how we can solve them together.\n              </p>\n              \n              {/* Value Proposition Stats */}\n              <div className=\"flex flex-wrap justify-center gap-8 text-center\">\n                <div>\n                  <div className=\"text-h4 font-bold text-primary\">24hr</div>\n                  <div className=\"text-caption text-muted-foreground\">Response Time</div>\n                </div>\n                <div>\n                  <div className=\"text-h4 font-bold text-primary\">15min</div>\n                  <div className=\"text-caption text-muted-foreground\">Discovery Call</div>\n                </div>\n                <div>\n                  <div className=\"text-h4 font-bold text-primary\">100%</div>\n                  <div className=\"text-caption text-muted-foreground\">No Sales Pressure</div>\n                </div>\n              </div>\n            </div>\n\n            {/* Contact Methods */}\n            <div className=\"grid md:grid-cols-3 gap-6 mb-12\">\n              {contactMethods.map((method, index) => {\n                const IconComponent = method.icon;\n                return (\n                  <Card \n                    key={method.title} \n                    className={method.primary ? \"border-primary\" : \"\"}\n                    data-testid={`contact-method-${index}`}\n                  >\n                    <CardHeader className=\"text-center\">\n                      <div className=\"bg-primary/10 rounded-full w-12 h-12 flex items-center justify-center mx-auto mb-3\">\n                        <IconComponent className=\"w-6 h-6 text-primary\" />\n                      </div>\n                      <CardTitle data-testid={`contact-method-title-${index}`}>{method.title}</CardTitle>\n                      <CardDescription data-testid={`contact-method-description-${index}`}>\n                        {method.description}\n                      </CardDescription>\n                    </CardHeader>\n                    <CardContent className=\"text-center\">\n                      <p className=\"text-sm text-muted-foreground\" data-testid={`contact-method-action-${index}`}>\n                        {method.action}\n                      </p>\n                    </CardContent>\n                  </Card>\n                );\n              })}\n            </div>\n\n            <div className=\"grid lg:grid-cols-5 gap-8 lg:gap-12\">\n              {/* Contact Form - Takes 3 columns */}\n              <div className=\"lg:col-span-3\">\n                <Card>\n                  <CardHeader>\n                    <CardTitle data-testid=\"contact-form-title\">Send a Message</CardTitle>\n                    <CardDescription data-testid=\"contact-form-subtitle\">\n                      Tell me about your project, challenges, or questions. I typically respond within 24 hours.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <form onSubmit={handleSubmit} className=\"space-y-6\">\n                      <div className=\"grid md:grid-cols-2 gap-4\">\n                        <div>\n                          <Label htmlFor=\"name\">Name *</Label>\n                          <Input\n                            type=\"text\"\n                            id=\"name\"\n                            name=\"name\"\n                            value={formData.name}\n                            onChange={handleInputChange}\n                            required\n                            data-testid=\"input-contact-name\"\n                          />\n                        </div>\n                        \n                        <div>\n                          <Label htmlFor=\"email\">Email *</Label>\n                          <Input\n                            type=\"email\"\n                            id=\"email\"\n                            name=\"email\"\n                            value={formData.email}\n                            onChange={handleInputChange}\n                            required\n                            data-testid=\"input-contact-email\"\n                          />\n                        </div>\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"company\">Company / Organization</Label>\n                        <Input\n                          type=\"text\"\n                          id=\"company\"\n                          name=\"company\"\n                          value={formData.company}\n                          onChange={handleInputChange}\n                          data-testid=\"input-contact-company\"\n                        />\n                      </div>\n                      \n                      <div>\n                        <Label htmlFor=\"message\">Message *</Label>\n                        <Textarea\n                          id=\"message\"\n                          name=\"message\"\n                          rows={6}\n                          placeholder=\"Tell me about your project, challenges, timeline, and what you're hoping to achieve...\"\n                          value={formData.message}\n                          onChange={handleInputChange}\n                          required\n                          data-testid=\"textarea-contact-message\"\n                        />\n                      </div>\n                      \n                      {/* Honeypot field */}\n                      <input\n                        type=\"text\"\n                        name=\"website\"\n                        value={formData.website}\n                        onChange={handleInputChange}\n                        style={{ display: \"none\" }}\n                        tabIndex={-1}\n                        autoComplete=\"off\"\n                      />\n                      \n                      <Button \n                        type=\"submit\" \n                        className=\"w-full\" \n                        size=\"lg\"\n                        disabled={isSubmitting}\n                        data-testid=\"button-submit-contact-form\"\n                      >\n                        {isSubmitting ? \"Sending...\" : \"Send Message\"}\n                      </Button>\n                    </form>\n                  </CardContent>\n                </Card>\n              </div>\n\n              {/* Right Sidebar - Takes 2 columns */}\n              <div className=\"lg:col-span-2 space-y-6\">\n                {/* Calendar Embed */}\n                <CalendarEmbed \n                  title=\"Schedule a Call\"\n                  description=\"Book a 15-minute portfolio walk-through to discuss your marketing technology challenges.\"\n                />\n\n                {/* Resume Download */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\" data-testid=\"resume-card-title\">\n                      <Download className=\"w-5 h-5 mr-2 text-primary\" />\n                      Resume & Portfolio\n                    </CardTitle>\n                    <CardDescription data-testid=\"resume-card-description\">\n                      Download a detailed overview of my experience, technical skills, and key achievements across marketing systems architecture.\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full\" \n                      size=\"lg\"\n                      onClick={handleResumeDownload}\n                      data-testid=\"button-download-resume-contact\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Download PDF Resume\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Response Time */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle data-testid=\"response-time-title\">Response Time</CardTitle>\n                  </CardHeader>\n                  <CardContent className=\"space-y-4\">\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-muted-foreground\">Email inquiries:</span>\n                      <span className=\"font-medium\">Within 24 hours</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-muted-foreground\">Project discussions:</span>\n                      <span className=\"font-medium\">Same day</span>\n                    </div>\n                    <div className=\"flex items-center justify-between\">\n                      <span className=\"text-muted-foreground\">Urgent matters:</span>\n                      <span className=\"font-medium\">Within 4 hours</span>\n                    </div>\n                  </CardContent>\n                </Card>\n\n                {/* Social Links */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle data-testid=\"connect-title\">Connect Online</CardTitle>\n                    <CardDescription data-testid=\"connect-description\">\n                      Follow my work and connect on professional platforms\n                    </CardDescription>\n                  </CardHeader>\n                  <CardContent>\n                    <div className=\"flex space-x-4\">\n                      <a \n                        href=\"https://linkedin.com/in/jacobdarling\" \n                        className=\"flex items-center justify-center w-12 h-12 bg-primary/10 rounded-lg hover:bg-primary/20 transition-colors\"\n                        aria-label=\"LinkedIn\"\n                        data-testid=\"link-contact-linkedin\"\n                      >\n                        <Linkedin className=\"w-6 h-6 text-primary\" />\n                      </a>\n                      <a \n                        href=\"https://github.com/jacobdarling\" \n                        className=\"flex items-center justify-center w-12 h-12 bg-primary/10 rounded-lg hover:bg-primary/20 transition-colors\"\n                        aria-label=\"GitHub\"\n                        data-testid=\"link-contact-github\"\n                      >\n                        <Github className=\"w-6 h-6 text-primary\" />\n                      </a>\n                    </div>\n                  </CardContent>\n                </Card>\n              </div>\n            </div>\n\n            {/* FAQ Section */}\n            <section className=\"mt-16\">\n              <h2 className=\"text-3xl font-bold text-center mb-12\" data-testid=\"faq-heading\">\n                Frequently Asked Questions\n              </h2>\n              <div className=\"grid md:grid-cols-2 gap-8 max-w-4xl mx-auto\">\n                <div className=\"space-y-6\">\n                  <div data-testid=\"faq-item-0\">\n                    <h3 className=\"font-semibold mb-2\">What types of projects do you work on?</h3>\n                    <p className=\"text-muted-foreground text-sm\">\n                      I specialize in marketing systems architecture, automation implementation, analytics engineering, and performance optimization for growing businesses.\n                    </p>\n                  </div>\n                  \n                  <div data-testid=\"faq-item-1\">\n                    <h3 className=\"font-semibold mb-2\">Do you work with remote teams?</h3>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Yes, I work effectively with distributed teams and have experience managing projects across different time zones and collaboration styles.\n                    </p>\n                  </div>\n                </div>\n                \n                <div className=\"space-y-6\">\n                  <div data-testid=\"faq-item-2\">\n                    <h3 className=\"font-semibold mb-2\">What's your typical project timeline?</h3>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Project timelines vary based on scope, but most marketing automation implementations take 4-8 weeks, while full system architectures can take 3-6 months.\n                    </p>\n                  </div>\n                  \n                  <div data-testid=\"faq-item-3\">\n                    <h3 className=\"font-semibold mb-2\">Do you provide ongoing support?</h3>\n                    <p className=\"text-muted-foreground text-sm\">\n                      Yes, I offer various support arrangements from monthly optimization reviews to full-service ongoing management depending on your needs.\n                    </p>\n                  </div>\n                </div>\n              </div>\n            </section>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":17124},"client/src/pages/home.tsx":{"content":"import { Header } from \"@/components/layout/header\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { HeroSection } from \"@/components/sections/hero\";\nimport { FeaturedWorkSection } from \"@/components/sections/featured-work\";\nimport { PhilosophySection } from \"@/components/sections/philosophy\";\nimport { SkillsOverviewSection } from \"@/components/sections/skills-overview\";\nimport { AboutSection } from \"@/components/sections/about-section\";\nimport { ContactSection } from \"@/components/sections/contact-section\";\nimport { Button } from \"@/components/ui/button\";\nimport { analytics } from \"@/lib/analytics\";\n\nexport default function Home() {\n  const handleMobileCTA = () => {\n    analytics.trackCTAClick(\"mobile-sticky\", \"Request Portfolio Walk-through\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      {/* Skip to content link */}\n      <a\n        href=\"#main-content\"\n        className=\"sr-only focus:not-sr-only focus:absolute focus:top-4 focus:left-4 bg-primary text-primary-foreground px-4 py-2 rounded-md z-50\"\n        data-testid=\"skip-to-content\"\n      >\n        Skip to main content\n      </a>\n\n      <Header />\n\n      <main id=\"main-content\">\n        <HeroSection />\n        <FeaturedWorkSection />\n        <PhilosophySection />\n        <SkillsOverviewSection />\n        <AboutSection />\n        <ContactSection />\n      </main>\n\n      <Footer />\n\n      {/* Sticky Mobile CTA */}\n      <div className=\"fixed bottom-4 left-4 right-4 md:hidden z-50\">\n        <Button \n          className=\"w-full shadow-lg\" \n          onClick={handleMobileCTA}\n          data-testid=\"button-mobile-sticky-cta\"\n        >\n          Request Portfolio Walk-through\n        </Button>\n      </div>\n    </div>\n  );\n}\n","size_bytes":1756},"client/src/pages/not-found.tsx":{"content":"import { Card, CardContent } from \"@/components/ui/card\";\nimport { AlertCircle } from \"lucide-react\";\n\nexport default function NotFound() {\n  return (\n    <div className=\"min-h-screen w-full flex items-center justify-center bg-gray-50\">\n      <Card className=\"w-full max-w-md mx-4\">\n        <CardContent className=\"pt-6\">\n          <div className=\"flex mb-4 gap-2\">\n            <AlertCircle className=\"h-8 w-8 text-red-500\" />\n            <h1 className=\"text-2xl font-bold text-gray-900\">404 Page Not Found</h1>\n          </div>\n\n          <p className=\"mt-4 text-sm text-gray-600\">\n            Did you forget to add the page to the router?\n          </p>\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n","size_bytes":711},"client/src/pages/toolbox.tsx":{"content":"import { Header } from \"@/components/layout/header\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { SkillCategoryComponent } from \"@/components/ui/skill-category\";\nimport { skillCategories } from \"@/data/skills\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport default function Toolbox() {\n  const competencies = [\n    {\n      title: \"Web Performance & Optimization\",\n      description: \"I take a full-stack approach to speed, from edge caching and CDN configuration with Cloudflare to server-side tuning of Apache and PHP-FPM. I specialize in WordPress performance, leveraging tools like LiteSpeed Cache and WP Rocket, optimizing databases by removing orphaned data, and refactoring heavy front-end components to achieve superior Core Web Vitals.\"\n    },\n    {\n      title: \"Security & Infrastructure Hardening\", \n      description: \"I build resilient and secure web environments. This includes deploying and managing Cloudflare's WAF, Bot Management, and Rate-Limiting rules, as well as hardening servers with security headers, configuring DNSSEC, and locking down API keys to mitigate risks and stop common attack vectors.\"\n    },\n    {\n      title: \"Analytics & Conversion Tracking Engineering\",\n      description: \"I architect robust data layers and tracking systems using Google Tag Manager (GTM). My expertise includes cleaning up legacy tags, implementing GA4-native tracking, and writing custom scripts to capture critical engagement and conversion events—from Gravity Forms submissions to e-commerce purchases—ensuring every marketing dollar can be accurately attributed.\"\n    },\n    {\n      title: \"Server Administration & DevOps\",\n      description: \"I am proficient in managing and monitoring server resources, diagnosing performance bottlenecks with tools like htop and Netdata, and performing critical backend operations like PHP upgrades, debugging fatal errors, and optimizing server configurations to ensure stability and scalability.\"\n    }\n  ];\n\n  const spotlights = [\n    {\n      title: \"Full-Stack Performance Optimization\",\n      challenge: \"A high-traffic WordPress site was suffering from a bloated database, with over 800KB of unused plugin data loading on every page view.\",\n      action: \"Using WP-CLI and direct SQL queries, I safely removed the orphaned autoloaded options. I then tuned the server, enabling Brotli compression and configuring LiteSpeed Cache for Edge-Side Includes (ESI) to serve personalized content on fully cached pages.\",\n      result: \"The admin dashboard became ~250ms faster, and repeat page views were 30-70% faster due to advanced browser caching rules.\"\n    },\n    {\n      title: \"Advanced Conversion Tracking & Attribution\",\n      challenge: \"Google Ads was optimizing inefficiently because it couldn't distinguish between low-intent actions and actual sales conversions.\",\n      action: \"I re-architected the tracking system in GTM, building a custom PHP hook to create a gravityFormSubmission dataLayer event. I then configured Google Ads to treat only \\\"Purchase\\\" and specific high-intent form submissions as Primary conversion actions.\",\n      result: \"This ensured that Google's smart bidding algorithms focused squarely on driving actual sales, dramatically improving ad ROI.\"\n    },\n    {\n      title: \"Infrastructure Security Hardening\",\n      challenge: \"A client's site was vulnerable to common WordPress attack vectors like XML-RPC floods and brute-force login attempts.\",\n      action: \"I deployed a multi-layered defense using Cloudflare, configuring WAF rules to block exploits, enabling \\\"Super Bot Fight Mode\\\" which blocks ~85k malicious bot hits per month, and setting up Authenticated Origin Pulls to secure the server.\",\n      result: \"The site's attack surface was drastically reduced, and server load from malicious traffic dropped significantly, improving performance for real users.\"\n    }\n  ];\n\n  const technologyStack = {\n    \"Software & Platform Knowledge\": {\n      \"CDN & Security\": [\"Cloudflare (WAF, CDN, Rules, Bot Management)\", \"Netdata\"],\n      \"Analytics & Tag Management\": [\"Google Tag Manager (GTM)\", \"Google Analytics 4 (GA4)\", \"Umami\"],\n      \"Advertising & Conversion\": [\"Google Ads\", \"PixelYourSite Pro\", \"OptinMonster\"],\n      \"Hosting & Server\": [\"Liquid Web\", \"GoDaddy\", \"Apache\", \"PHP-FPM\"],\n      \"WordPress Core\": [\"WP-CLI\", \"Custom MU Plugins\", \"WP-Cron\", \"Heartbeat API\"]\n    },\n    \"WordPress Plugins\": {\n      \"Caching\": [\"WP Rocket\", \"LiteSpeed Cache\", \"Autoptimize\"],\n      \"CRM\": [\"FluentCRM\"],\n      \"Forms\": [\"Gravity Forms\", \"WP Forms\"],\n      \"LMS\": [\"LearnDash\"],\n      \"Builder\": [\"Divi Builder\"]\n    },\n    \"Development Tools\": [\"Git\", \"VS Code\"],\n    \"Programming, Scripting & Query Languages\": [\"PHP\", \"JavaScript\", \"jQuery\", \"SQL\", \"CSS\", \"HTML\"]\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n\n      <main className=\"py-16\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-6xl mx-auto\">\n            <div className=\"text-center mb-12\">\n              <h1 className=\"text-4xl md:text-5xl font-bold mb-4\" data-testid=\"toolbox-page-heading\">\n                Technical Toolbox\n              </h1>\n              <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"toolbox-page-description\">\n                This page provides the granular, hard-skill validation that technical leads and detail-oriented hiring managers are looking for. It's organized to be easily scannable while telling a story of deep expertise.\n              </p>\n            </div>\n\n            {/* Core Competencies */}\n            <section className=\"mb-16\">\n              <h2 className=\"text-3xl font-bold mb-8 text-center\" data-testid=\"core-competencies-heading\">\n                Core Competencies\n              </h2>\n              <div className=\"space-y-8\">\n                {competencies.map((competency, index) => (\n                  <div \n                    key={competency.title}\n                    className=\"bg-card border border-border rounded-xl p-6\"\n                    data-testid={`competency-${index}`}\n                  >\n                    <h3 className=\"text-xl font-semibold mb-4\" data-testid={`competency-title-${index}`}>\n                      {competency.title}\n                    </h3>\n                    <p className=\"text-muted-foreground\" data-testid={`competency-description-${index}`}>\n                      {competency.description}\n                    </p>\n                  </div>\n                ))}\n              </div>\n            </section>\n\n            {/* Technical Spotlights */}\n            <section className=\"mb-16\">\n              <h2 className=\"text-3xl font-bold mb-8 text-center\" data-testid=\"technical-spotlights-heading\">\n                Technical Spotlights: From Problem to Impact\n              </h2>\n              <div className=\"grid md:grid-cols-1 gap-8\">\n                {spotlights.map((spotlight, index) => (\n                  <div \n                    key={spotlight.title}\n                    className=\"bg-card border border-border rounded-xl p-6\"\n                    data-testid={`spotlight-${index}`}\n                  >\n                    <h3 className=\"text-xl font-semibold mb-4\" data-testid={`spotlight-title-${index}`}>\n                      {spotlight.title}\n                    </h3>\n                    \n                    <div className=\"space-y-4\">\n                      <div>\n                        <h4 className=\"font-medium text-red-600 dark:text-red-400 mb-2\">Challenge:</h4>\n                        <p className=\"text-muted-foreground\" data-testid={`spotlight-challenge-${index}`}>\n                          {spotlight.challenge}\n                        </p>\n                      </div>\n                      \n                      <div>\n                        <h4 className=\"font-medium text-blue-600 dark:text-blue-400 mb-2\">Action:</h4>\n                        <p className=\"text-muted-foreground\" data-testid={`spotlight-action-${index}`}>\n                          {spotlight.action}\n                        </p>\n                      </div>\n                      \n                      <div>\n                        <h4 className=\"font-medium text-green-600 dark:text-green-400 mb-2\">Result:</h4>\n                        <p className=\"text-muted-foreground\" data-testid={`spotlight-result-${index}`}>\n                          {spotlight.result}\n                        </p>\n                      </div>\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </section>\n\n            {/* Technology Stack */}\n            <section className=\"mb-16\">\n              <h2 className=\"text-3xl font-bold mb-8 text-center\" data-testid=\"technology-stack-heading\">\n                Technology Stack\n              </h2>\n              <div className=\"grid md:grid-cols-2 gap-8\">\n                {Object.entries(technologyStack).map(([categoryName, category]) => (\n                  <div \n                    key={categoryName}\n                    className=\"bg-card border border-border rounded-xl p-6\"\n                    data-testid={`tech-category-${categoryName.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    <h3 className=\"text-xl font-semibold mb-6\" data-testid={`tech-category-title-${categoryName.toLowerCase().replace(/\\s+/g, '-')}`}>\n                      {categoryName}\n                    </h3>\n                    \n                    {typeof category === \"object\" && !Array.isArray(category) ? (\n                      <div className=\"space-y-4\">\n                        {Object.entries(category).map(([subCategory, tools]) => (\n                          <div key={subCategory} data-testid={`tech-subcategory-${subCategory.toLowerCase().replace(/\\s+/g, '-')}`}>\n                            <h4 className=\"font-medium mb-2\">{subCategory}:</h4>\n                            <div className=\"flex flex-wrap gap-2\">\n                              {tools.map((tool) => (\n                                <Badge \n                                  key={tool} \n                                  variant=\"secondary\"\n                                  data-testid={`tech-tool-${tool.toLowerCase().replace(/\\s+/g, '-')}`}\n                                >\n                                  {tool}\n                                </Badge>\n                              ))}\n                            </div>\n                          </div>\n                        ))}\n                      </div>\n                    ) : (\n                      <div className=\"flex flex-wrap gap-2\">\n                        {(category as string[]).map((tool) => (\n                          <Badge \n                            key={tool} \n                            variant=\"secondary\"\n                            data-testid={`tech-tool-${tool.toLowerCase().replace(/\\s+/g, '-')}`}\n                          >\n                            {tool}\n                          </Badge>\n                        ))}\n                      </div>\n                    )}\n                  </div>\n                ))}\n              </div>\n            </section>\n\n            {/* Detailed Skills Grid */}\n            <section>\n              <h2 className=\"text-3xl font-bold mb-8 text-center\" data-testid=\"detailed-skills-heading\">\n                Detailed Skills Breakdown\n              </h2>\n              <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8\">\n                {skillCategories.map(category => (\n                  <SkillCategoryComponent key={category.id} category={category} />\n                ))}\n              </div>\n            </section>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":11811},"client/src/pages/work.tsx":{"content":"import { Header } from \"@/components/layout/header\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { caseStudies, CaseStudy } from \"@/data/case-studies\";\nimport { ProjectCard } from \"@/components/ui/card-v2\";\nimport { FilterChips, FilterOption } from \"@/components/ui/filter-chips\";\nimport { Input } from \"@/components/ui/input\";\nimport { Button } from \"@/components/ui/button\";\nimport { Search, X } from \"lucide-react\";\nimport { useState, useMemo, useCallback } from \"react\";\nimport Fuse from \"fuse.js\";\nimport { analytics } from \"@/lib/analytics\";\nimport { Link } from \"wouter\";\n\n// Calculate reading time estimate\nfunction getReadingTime(caseStudy: CaseStudy): string {\n  const wordsPerMinute = 200;\n  const textContent = [\n    caseStudy.problem,\n    caseStudy.approach,\n    caseStudy.learnings.join(' '),\n    caseStudy.constraints.join(' ')\n  ].join(' ');\n  \n  const wordCount = textContent.split(/\\s+/).length;\n  const minutes = Math.ceil(wordCount / wordsPerMinute);\n  return `${minutes} min read`;\n}\n\n// Extract key metrics from case study results\nfunction getTopKPIs(caseStudy: CaseStudy): Array<{ label: string; value: string }> {\n  return caseStudy.results\n    .filter(result => result.delta)\n    .sort((a, b) => {\n      const deltaA = parseInt(a.delta?.replace(/[^0-9]/g, '') || '0');\n      const deltaB = parseInt(b.delta?.replace(/[^0-9]/g, '') || '0');\n      return deltaB - deltaA;\n    })\n    .slice(0, 2)\n    .map(result => ({\n      label: result.metric,\n      value: result.delta || result.value\n    }));\n}\n\nexport default function Work() {\n  const [searchQuery, setSearchQuery] = useState(\"\");\n  const [selectedTags, setSelectedTags] = useState<string[]>([]);\n  \n\n  // Prepare filter options with counts\n  const filterOptions: FilterOption[] = useMemo(() => {\n    const tagCounts: Record<string, number> = {};\n    \n    caseStudies.forEach(study => {\n      study.tags.forEach(tag => {\n        tagCounts[tag] = (tagCounts[tag] || 0) + 1;\n      });\n    });\n\n    return Object.entries(tagCounts)\n      .sort(([a], [b]) => a.localeCompare(b))\n      .map(([tag, count]) => ({\n        id: tag.toLowerCase().replace(/\\s+/g, '-'),\n        label: tag,\n        count\n      }));\n  }, []);\n\n  // Setup fuzzy search\n  const fuse = useMemo(() => {\n    return new Fuse(caseStudies, {\n      keys: [\n        { name: 'title', weight: 0.3 },\n        { name: 'problem', weight: 0.25 },\n        { name: 'approach', weight: 0.2 },\n        { name: 'tags', weight: 0.15 },\n        { name: 'stack', weight: 0.1 }\n      ],\n      threshold: 0.4,\n      includeScore: true\n    });\n  }, []);\n\n  // Filter and search case studies\n  const filteredCaseStudies = useMemo(() => {\n    let results = caseStudies;\n\n    // Apply tag filters\n    if (selectedTags.length > 0) {\n      const tagNames = selectedTags.map(tagId => \n        filterOptions.find(option => option.id === tagId)?.label\n      ).filter((label): label is string => Boolean(label));\n      \n      results = results.filter(study =>\n        tagNames.some(tag => study.tags.includes(tag))\n      );\n    }\n\n    // Apply search\n    if (searchQuery.trim()) {\n      const searchResults = fuse.search(searchQuery.trim());\n      const searchSlugs = new Set(searchResults.map(result => result.item.slug));\n      results = results.filter(study => searchSlugs.has(study.slug));\n    }\n\n    return results;\n  }, [selectedTags, searchQuery, filterOptions, fuse]);\n\n  const handleTagsChange = useCallback((tags: string[]) => {\n    setSelectedTags(tags);\n    analytics.track('filter_select', { tags: tags.join(',') });\n  }, []);\n\n  const handleSearchChange = useCallback((e: React.ChangeEvent<HTMLInputElement>) => {\n    const query = e.target.value;\n    setSearchQuery(query);\n    \n    if (query.length > 2) {\n      analytics.track('search_query', { query });\n    }\n  }, []);\n\n  const clearSearch = useCallback(() => {\n    setSearchQuery(\"\");\n  }, []);\n\n  const handleCaseStudyClick = useCallback((slug: string) => {\n    analytics.trackCaseStudyOpen(slug);\n  }, []);\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n\n      <main className=\"py-section\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-7xl mx-auto\">\n            {/* Header */}\n            <div className=\"text-center mb-16 space-y-6\">\n              <h1 className=\"text-h1\" data-testid=\"work-page-heading\">\n                Case Studies & Deep Dives\n              </h1>\n              <p className=\"text-body-lg text-muted-foreground max-w-2xl mx-auto leading-relaxed\" data-testid=\"work-page-description\">\n                Detailed breakdowns of marketing systems architecture, strategic implementation, and measurable impact across diverse projects and challenges.\n              </p>\n            </div>\n\n            {/* Search and Filters */}\n            <div className=\"space-y-6 mb-12\">\n              {/* Search */}\n              <div className=\"max-w-md mx-auto relative\">\n                <div className=\"relative\">\n                  <Search className=\"absolute left-3 top-1/2 -translate-y-1/2 h-4 w-4 text-muted-foreground\" />\n                  <Input\n                    placeholder=\"Search case studies...\"\n                    value={searchQuery}\n                    onChange={handleSearchChange}\n                    className=\"pl-10 pr-10 transition-all duration-fast focus:shadow-card\"\n                    data-testid=\"work-search-input\"\n                  />\n                  {searchQuery && (\n                    <Button\n                      variant=\"ghost\"\n                      size=\"sm\"\n                      onClick={clearSearch}\n                      className=\"absolute right-2 top-1/2 -translate-y-1/2 h-6 w-6 p-0 text-muted-foreground hover:text-foreground\"\n                      data-testid=\"search-clear\"\n                    >\n                      <X className=\"h-3 w-3\" />\n                    </Button>\n                  )}\n                </div>\n              </div>\n\n              {/* Filter Chips */}\n              <FilterChips\n                options={filterOptions}\n                value={selectedTags}\n                onValueChange={handleTagsChange}\n                multiSelect={true}\n                urlSync={{ paramName: 'tags' }}\n                className=\"justify-center\"\n              />\n            </div>\n\n            {/* Results Count */}\n            <div className=\"flex items-center justify-between mb-8\">\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"results-count\">\n                {filteredCaseStudies.length} {filteredCaseStudies.length === 1 ? 'project' : 'projects'}\n                {searchQuery && ` matching \"${searchQuery}\"`}\n              </p>\n            </div>\n\n            {/* Case Studies Grid */}\n            <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 mb-16\">\n              {filteredCaseStudies.map(caseStudy => {\n                const kpis = getTopKPIs(caseStudy);\n                const readingTime = getReadingTime(caseStudy);\n                \n                return (\n                  <Link key={caseStudy.slug} href={`/work/${caseStudy.slug}`}>\n                    <ProjectCard\n                      title={`${caseStudy.emoji} ${caseStudy.title}`}\n                      description={caseStudy.problem}\n                      kpis={kpis}\n                      tags={caseStudy.tags}\n                      readingTime={readingTime}\n                      onClick={() => handleCaseStudyClick(caseStudy.slug)}\n                      className=\"h-full cursor-pointer\"\n                      data-testid={`case-study-card-${caseStudy.slug}`}\n                    />\n                  </Link>\n                );\n              })}\n            </div>\n\n            {/* Empty State */}\n            {filteredCaseStudies.length === 0 && (\n              <div className=\"text-center py-20\" data-testid=\"no-results\">\n                <div className=\"space-y-4\">\n                  <div className=\"text-6xl opacity-20\">🔍</div>\n                  <h3 className=\"text-h2 text-muted-foreground\">No projects found</h3>\n                  <p className=\"text-muted-foreground max-w-md mx-auto\">\n                    {searchQuery || selectedTags.length > 0 \n                      ? \"Try adjusting your search terms or filters to find what you're looking for.\"\n                      : \"No case studies are available at the moment.\"\n                    }\n                  </p>\n                  {(searchQuery || selectedTags.length > 0) && (\n                    <div className=\"flex gap-3 justify-center mt-6\">\n                      {searchQuery && (\n                        <Button variant=\"outline\" onClick={clearSearch} data-testid=\"clear-search-empty\">\n                          Clear search\n                        </Button>\n                      )}\n                      {selectedTags.length > 0 && (\n                        <Button variant=\"outline\" onClick={() => handleTagsChange([])} data-testid=\"clear-filters-empty\">\n                          Clear filters\n                        </Button>\n                      )}\n                    </div>\n                  )}\n                </div>\n              </div>\n            )}\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":9282},"client/src/components/layout/footer.tsx":{"content":"import { Link } from \"wouter\";\nimport { Linkedin, Github } from \"lucide-react\";\n\nexport function Footer() {\n  return (\n    <footer className=\"border-t border-border py-12\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"flex flex-col md:flex-row justify-between items-center\">\n            <div className=\"flex items-center space-x-2 mb-4 md:mb-0\">\n              <div className=\"h-8 w-8 rounded-full bg-primary flex items-center justify-center\">\n                <span className=\"text-primary-foreground font-bold text-sm\">JD</span>\n              </div>\n              <span className=\"font-semibold\">Jacob Darling</span>\n            </div>\n            \n            <div className=\"text-center md:text-right\">\n              <p className=\"text-muted-foreground text-sm mb-2\">\n                © 2024 Jacob Darling. All rights reserved.\n              </p>\n              <p className=\"text-muted-foreground text-xs\">\n                Built with Next.js, TypeScript, and Tailwind CSS\n              </p>\n            </div>\n          </div>\n          \n          <div className=\"flex justify-center space-x-6 mt-8\">\n            <a \n              href=\"https://linkedin.com/in/jacobdarling\" \n              className=\"text-muted-foreground hover:text-primary transition-colors\" \n              aria-label=\"LinkedIn\"\n              data-testid=\"link-linkedin\"\n            >\n              <Linkedin className=\"w-6 h-6\" />\n            </a>\n            <a \n              href=\"https://github.com/jacobdarling\" \n              className=\"text-muted-foreground hover:text-primary transition-colors\" \n              aria-label=\"GitHub\"\n              data-testid=\"link-github\"\n            >\n              <Github className=\"w-6 h-6\" />\n            </a>\n          </div>\n        </div>\n      </div>\n    </footer>\n  );\n}\n","size_bytes":1880},"client/src/components/layout/header.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { Link, useLocation } from \"wouter\";\nimport { useTheme } from \"@/hooks/use-theme\";\nimport { Button } from \"@/components/ui/button\";\nimport { \n  Menu, \n  X, \n  Sun, \n  Moon, \n  Monitor \n} from \"lucide-react\";\nimport {\n  DropdownMenu,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuTrigger,\n} from \"@/components/ui/dropdown-menu\";\n\nexport function Header() {\n  const [isMenuOpen, setIsMenuOpen] = useState(false);\n  const [location] = useLocation();\n  const { theme, setTheme } = useTheme();\n\n  // Close mobile menu when route changes\n  useEffect(() => {\n    setIsMenuOpen(false);\n  }, [location]);\n\n  const navigation = [\n    { name: \"Work\", href: \"/work\" },\n    { name: \"Toolbox\", href: \"/toolbox\" },\n    { name: \"About\", href: \"/about\" },\n    { name: \"Contact\", href: \"/contact\" },\n  ];\n\n  const ThemeIcon = theme === \"dark\" ? Sun : theme === \"light\" ? Moon : Monitor;\n\n  return (\n    <>\n      <header className=\"sticky top-0 z-40 w-full border-b border-border/40 bg-background/95 backdrop-blur supports-[backdrop-filter]:bg-background/60\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"flex h-16 items-center justify-between\">\n            <div className=\"flex items-center space-x-4\">\n              <Link href=\"/\" className=\"flex items-center space-x-2\" data-testid=\"link-home\">\n                <div className=\"h-8 w-8 rounded-full bg-primary flex items-center justify-center\">\n                  <span className=\"text-primary-foreground font-bold text-sm\">JD</span>\n                </div>\n                <span className=\"font-semibold text-lg\">Jacob Darling</span>\n              </Link>\n            </div>\n            \n            <nav className=\"hidden md:flex items-center space-x-8\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className={`text-muted-foreground hover:text-foreground transition-colors ${\n                    location === item.href ? \"text-foreground font-medium\" : \"\"\n                  }`}\n                  data-testid={`link-${item.name.toLowerCase()}`}\n                >\n                  {item.name}\n                </Link>\n              ))}\n            </nav>\n\n            <div className=\"flex items-center space-x-4\">\n              <DropdownMenu>\n                <DropdownMenuTrigger asChild>\n                  <Button variant=\"ghost\" size=\"sm\" className=\"h-8 w-8 px-0\" data-testid=\"button-theme-toggle\">\n                    <ThemeIcon className=\"h-4 w-4\" />\n                    <span className=\"sr-only\">Toggle theme</span>\n                  </Button>\n                </DropdownMenuTrigger>\n                <DropdownMenuContent align=\"end\">\n                  <DropdownMenuItem onClick={() => setTheme(\"light\")} data-testid=\"theme-light\">\n                    <Sun className=\"mr-2 h-4 w-4\" />\n                    <span>Light</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setTheme(\"dark\")} data-testid=\"theme-dark\">\n                    <Moon className=\"mr-2 h-4 w-4\" />\n                    <span>Dark</span>\n                  </DropdownMenuItem>\n                  <DropdownMenuItem onClick={() => setTheme(\"system\")} data-testid=\"theme-system\">\n                    <Monitor className=\"mr-2 h-4 w-4\" />\n                    <span>System</span>\n                  </DropdownMenuItem>\n                </DropdownMenuContent>\n              </DropdownMenu>\n\n              <Button\n                variant=\"ghost\"\n                className=\"md:hidden\"\n                onClick={() => setIsMenuOpen(!isMenuOpen)}\n                data-testid=\"button-menu-toggle\"\n              >\n                {isMenuOpen ? <X className=\"h-5 w-5\" /> : <Menu className=\"h-5 w-5\" />}\n                <span className=\"sr-only\">Toggle menu</span>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </header>\n\n      {/* Mobile menu */}\n      {isMenuOpen && (\n        <div className=\"md:hidden bg-background border-b border-border\">\n          <div className=\"container mx-auto px-4 py-4\">\n            <nav className=\"flex flex-col space-y-4\">\n              {navigation.map((item) => (\n                <Link\n                  key={item.name}\n                  href={item.href}\n                  className={`text-muted-foreground hover:text-foreground transition-colors ${\n                    location === item.href ? \"text-foreground font-medium\" : \"\"\n                  }`}\n                  data-testid={`mobile-link-${item.name.toLowerCase()}`}\n                >\n                  {item.name}\n                </Link>\n              ))}\n            </nav>\n          </div>\n        </div>\n      )}\n    </>\n  );\n}\n","size_bytes":4798},"client/src/components/layout/theme-provider.tsx":{"content":"import { ThemeProviderComponent } from \"@/hooks/use-theme\";\n\ninterface ThemeProviderProps {\n  children: React.ReactNode;\n}\n\nexport function ThemeProvider({ children }: ThemeProviderProps) {\n  return (\n    <ThemeProviderComponent defaultTheme=\"system\" storageKey=\"portfolio-theme\">\n      {children}\n    </ThemeProviderComponent>\n  );\n}\n","size_bytes":335},"client/src/components/sections/about-section.tsx":{"content":"import { TimelineItem } from \"@/components/ui/timeline-item\";\nimport { getExperienceByTimeframe } from \"@/data/experience\";\n\nexport function AboutSection() {\n  const experienceItems = getExperienceByTimeframe();\n\n  return (\n    <section id=\"about\" className=\"py-16\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"about-heading\">\n              My Story: The Architect in the Marketing Room\n            </h2>\n          </div>\n          \n          <div className=\"prose prose-lg max-w-none text-muted-foreground space-y-6 mb-12\">\n            <p data-testid=\"about-intro\">\n              Great marketing ideas often break at the handoff—the critical point where a creative vision meets the complex reality of technical execution. My career has been built to solve this problem.\n            </p>\n            \n            <p data-testid=\"about-description\">\n              I'm Jacob Darling, a marketing leader who operates as both a brand strategist and a systems architect. On one side, I direct bold rebrands, craft compelling narratives, and launch creative campaigns. On the other, I design and build the underlying technical infrastructure that makes those campaigns possible and measurable.\n            </p>\n          </div>\n          \n          <div className=\"bg-card border border-border rounded-xl p-8\">\n            <h3 className=\"text-xl font-semibold mb-6 text-foreground\" data-testid=\"professional-journey-heading\">\n              Professional Journey\n            </h3>\n            \n            <div className=\"space-y-8\">\n              {experienceItems.map((experience, index) => (\n                <TimelineItem key={`${experience.company}-${experience.startDate}`} experience={experience} />\n              ))}\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1989},"client/src/components/sections/contact-section.tsx":{"content":"import { useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Input } from \"@/components/ui/input\";\nimport { Textarea } from \"@/components/ui/textarea\";\nimport { Label } from \"@/components/ui/label\";\nimport { useToast } from \"@/hooks/use-toast\";\nimport { apiRequest } from \"@/lib/queryClient\";\nimport { analytics } from \"@/lib/analytics\";\n\nexport function ContactSection() {\n  const [isSubmitting, setIsSubmitting] = useState(false);\n  const [formData, setFormData] = useState({\n    name: \"\",\n    email: \"\",\n    company: \"\",\n    message: \"\",\n    website: \"\", // Honeypot field\n  });\n  const { toast } = useToast();\n\n  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n    const { name, value } = e.target;\n    setFormData(prev => ({\n      ...prev,\n      [name]: value\n    }));\n  };\n\n  const handleSubmit = async (e: React.FormEvent) => {\n    e.preventDefault();\n    setIsSubmitting(true);\n\n    try {\n      // Capture UTM parameters\n      const urlParams = new URLSearchParams(window.location.search);\n      const utmSource = urlParams.get('utm_source') || 'direct';\n\n      const response = await apiRequest(\"POST\", \"/api/contact\", {\n        ...formData,\n        utmSource,\n      });\n\n      const result = await response.json();\n\n      if (result.success) {\n        toast({\n          title: \"Message sent!\",\n          description: result.message,\n        });\n\n        // Track successful submission\n        analytics.trackContactSubmit(true, utmSource);\n\n        // Reset form\n        setFormData({\n          name: \"\",\n          email: \"\",\n          company: \"\",\n          message: \"\",\n          website: \"\",\n        });\n      } else {\n        throw new Error(result.message || \"Failed to send message\");\n      }\n    } catch (error) {\n      console.error(\"Contact form error:\", error);\n      \n      toast({\n        title: \"Error\",\n        description: error instanceof Error ? error.message : \"Failed to send message. Please try again.\",\n        variant: \"destructive\",\n      });\n\n      // Track failed submission\n      analytics.trackContactSubmit(false);\n    } finally {\n      setIsSubmitting(false);\n    }\n  };\n\n  const handleResumeDownload = async () => {\n    try {\n      analytics.trackResumeDownload();\n      \n      const response = await apiRequest(\"GET\", \"/api/resume/download\");\n      const result = await response.json();\n      \n      if (result.success) {\n        // In a real implementation, this would trigger a file download\n        toast({\n          title: \"Resume download tracked\",\n          description: \"Resume download would begin now.\",\n        });\n      }\n    } catch (error) {\n      console.error(\"Resume download error:\", error);\n      toast({\n        title: \"Error\",\n        description: \"Failed to download resume. Please try again.\",\n        variant: \"destructive\",\n      });\n    }\n  };\n\n  const handleBookCall = () => {\n    analytics.trackCTAClick(\"contact\", \"Book Calendar Time\");\n    // In a real implementation, this would open a calendar booking widget\n    toast({\n      title: \"Calendar integration\",\n      description: \"This would open a calendar booking widget.\",\n    });\n  };\n\n  return (\n    <section id=\"contact\" className=\"py-16 bg-muted/30\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto text-center\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"contact-heading\">\n            Ready to build a smarter marketing system?\n          </h2>\n          <p className=\"text-xl text-muted-foreground mb-12\" data-testid=\"contact-description\">\n            Let's discuss how strategic marketing automation and systems architecture can accelerate your growth.\n          </p>\n          \n          <div className=\"grid md:grid-cols-2 gap-8 max-w-3xl mx-auto\">\n            {/* Contact Form */}\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <h3 className=\"text-xl font-semibold mb-6\" data-testid=\"contact-form-heading\">Get In Touch</h3>\n              <form onSubmit={handleSubmit} className=\"space-y-4\">\n                <div>\n                  <Label htmlFor=\"name\">Name</Label>\n                  <Input\n                    type=\"text\"\n                    id=\"name\"\n                    name=\"name\"\n                    value={formData.name}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"input-name\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"email\">Email</Label>\n                  <Input\n                    type=\"email\"\n                    id=\"email\"\n                    name=\"email\"\n                    value={formData.email}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"input-email\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"company\">Company</Label>\n                  <Input\n                    type=\"text\"\n                    id=\"company\"\n                    name=\"company\"\n                    value={formData.company}\n                    onChange={handleInputChange}\n                    data-testid=\"input-company\"\n                  />\n                </div>\n                \n                <div>\n                  <Label htmlFor=\"message\">Message</Label>\n                  <Textarea\n                    id=\"message\"\n                    name=\"message\"\n                    rows={4}\n                    value={formData.message}\n                    onChange={handleInputChange}\n                    required\n                    data-testid=\"textarea-message\"\n                  />\n                </div>\n                \n                {/* Honeypot field */}\n                <input\n                  type=\"text\"\n                  name=\"website\"\n                  value={formData.website}\n                  onChange={handleInputChange}\n                  style={{ display: \"none\" }}\n                  tabIndex={-1}\n                  autoComplete=\"off\"\n                />\n                \n                <Button \n                  type=\"submit\" \n                  className=\"w-full\" \n                  disabled={isSubmitting}\n                  data-testid=\"button-submit-contact\"\n                >\n                  {isSubmitting ? \"Sending...\" : \"Send Message\"}\n                </Button>\n              </form>\n            </div>\n            \n            {/* Quick Actions */}\n            <div className=\"space-y-6\">\n              <div className=\"bg-card border border-border rounded-xl p-6\">\n                <h3 className=\"text-xl font-semibold mb-4\" data-testid=\"schedule-call-heading\">Schedule a Call</h3>\n                <p className=\"text-muted-foreground mb-4\" data-testid=\"schedule-call-description\">\n                  Book a 15-minute portfolio walk-through to discuss your marketing technology challenges.\n                </p>\n                <Button \n                  className=\"w-full\" \n                  onClick={handleBookCall}\n                  data-testid=\"button-book-call\"\n                >\n                  Book Calendar Time\n                </Button>\n              </div>\n              \n              <div className=\"bg-card border border-border rounded-xl p-6\">\n                <h3 className=\"text-xl font-semibold mb-4\" data-testid=\"resume-download-heading\">Download Resume</h3>\n                <p className=\"text-muted-foreground mb-4\" data-testid=\"resume-download-description\">\n                  Get a detailed overview of my experience, skills, and key achievements.\n                </p>\n                <Button \n                  variant=\"outline\" \n                  className=\"w-full\" \n                  onClick={handleResumeDownload}\n                  data-testid=\"button-download-resume\"\n                >\n                  Download PDF Resume\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":8111},"client/src/components/sections/featured-work.tsx":{"content":"import { CaseStudyCard } from \"@/components/ui/case-study-card\";\nimport { getFeaturedCaseStudies } from \"@/data/case-studies\";\n\nexport function FeaturedWorkSection() {\n  const featuredCaseStudies = getFeaturedCaseStudies();\n\n  return (\n    <section id=\"work\" className=\"py-16 bg-muted/30\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"text-center mb-12\">\n          <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"featured-work-heading\">\n            Project Deep Dives\n          </h2>\n          <p className=\"text-xl text-muted-foreground max-w-3xl mx-auto\" data-testid=\"featured-work-description\">\n            From Spark to System: The stories behind the strategy, architecture, and problem-solving that goes into building scalable, revenue-focused marketing systems.\n          </p>\n        </div>\n\n        <div className=\"grid md:grid-cols-2 lg:grid-cols-3 gap-8 max-w-6xl mx-auto\">\n          {featuredCaseStudies.map((caseStudy) => (\n            <CaseStudyCard key={caseStudy.slug} caseStudy={caseStudy} />\n          ))}\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":1132},"client/src/components/sections/hero.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { StatChip, StatChipGroup } from \"@/components/ui/stat-chip\";\nimport { LogoWall, sampleLogos } from \"@/components/ui/logo-wall\";\nimport { analytics } from \"@/lib/analytics\";\nimport { TrendingUp, ShieldCheck, Zap } from \"lucide-react\";\n\nexport function HeroSection() {\n  const handlePrimaryCTA = () => {\n    analytics.trackCTAClick(\"hero\", \"Book a 15-min Walk-through\");\n  };\n\n  const handleSecondaryCTA = () => {\n    analytics.trackCTAClick(\"hero\", \"View Case Studies\");\n    // Navigate to work page since work section doesn't exist on home\n    window.location.href = \"/work\";\n  };\n\n  const kpis = [\n    {\n      icon: TrendingUp,\n      label: \"Attribution Accuracy\",\n      value: \"+112%\",\n      baseline: \"industry avg\",\n      variant: \"success\" as const\n    },\n    {\n      icon: ShieldCheck,\n      label: \"Support Ticket Reduction\",\n      value: \"70%\",\n      variant: \"primary\" as const\n    },\n    {\n      icon: Zap,\n      label: \"Conversion Lift\",\n      value: \"40%\",\n      baseline: \"before/after\",\n      variant: \"success\" as const\n    }\n  ];\n\n  return (\n    <section className=\"py-section\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"grid lg:grid-cols-2 gap-12 lg:gap-16 items-center\">\n          {/* Left: Headline & CTA */}\n          <div className=\"space-y-8 animate-slide-up\">\n            <div className=\"space-y-6\">\n              <h1 className=\"text-display\" data-testid=\"hero-heading\">\n                <span className=\"gradient-text\">Marketing Systems</span>\n                <br />\n                <span className=\"text-foreground\">That Scale Revenue</span>\n              </h1>\n              \n              <p className=\"text-body-lg text-muted-foreground max-w-lg leading-relaxed\" data-testid=\"hero-description\">\n                I architect integrated marketing ecosystems that blend strategy, automation, and CRM intelligence. The result: predictable growth through measurable, scalable systems.\n              </p>\n            </div>\n\n            <div className=\"space-y-6\">\n              <div className=\"flex flex-col sm:flex-row gap-4\">\n                <Button \n                  size=\"lg\" \n                  onClick={handlePrimaryCTA}\n                  className=\"transition-all duration-med ease-smooth hover:shadow-hover\"\n                  data-testid=\"button-primary-cta\"\n                >\n                  Book a 15-min Walk-through\n                </Button>\n                <Button \n                  variant=\"outline\" \n                  size=\"lg\" \n                  onClick={handleSecondaryCTA}\n                  className=\"transition-all duration-med ease-smooth\"\n                  data-testid=\"button-secondary-cta\"\n                >\n                  View Case Studies\n                </Button>\n              </div>\n\n              {/* Microcopy */}\n              <p className=\"text-sm text-muted-foreground\" data-testid=\"hero-microcopy\">\n                Response within 24h • No sales fluff • Direct access\n              </p>\n            </div>\n          </div>\n\n          {/* Right: KPIs & Credibility */}\n          <div className=\"space-y-10 animate-slide-up [animation-delay:200ms]\">\n            {/* KPI Trio */}\n            <div className=\"space-y-4\">\n              <h2 className=\"text-sm font-medium text-muted-foreground tracking-wide uppercase\">\n                Recent Outcomes\n              </h2>\n              <StatChipGroup>\n                {kpis.map((kpi, index) => (\n                  <StatChip\n                    key={index}\n                    icon={kpi.icon}\n                    label={kpi.label}\n                    value={kpi.value}\n                    baseline={kpi.baseline}\n                    variant={kpi.variant}\n                  />\n                ))}\n              </StatChipGroup>\n            </div>\n\n            {/* Credibility & Logos */}\n            <div className=\"space-y-6\">\n              <LogoWall \n                logos={sampleLogos}\n                title=\"Trusted across industries\"\n                variant=\"compact\"\n                className=\"pt-8 border-t border-border/50\"\n              />\n            </div>\n\n            {/* Mini Case Study Teaser */}\n            <div className=\"bg-gradient-to-br from-surface to-primary/5 border border-primary/20 rounded-card p-6\">\n              <div className=\"space-y-3\">\n                <div className=\"flex items-center gap-2\">\n                  <div className=\"w-2 h-2 bg-success rounded-full\"></div>\n                  <span className=\"text-sm font-medium text-muted-foreground\">Latest Success</span>\n                </div>\n                <p className=\"text-sm text-foreground leading-relaxed\">\n                  <strong>SaaS Attribution System:</strong> Reduced customer acquisition cost by 35% while improving lead quality scoring accuracy by 112%.\n                </p>\n                <Button \n                  variant=\"ghost\" \n                  size=\"sm\"\n                  onClick={() => analytics.trackCTAClick(\"hero\", \"Mini Case Study\")}\n                  className=\"text-primary hover:text-primary/80 p-0 h-auto font-medium text-sm\"\n                  data-testid=\"button-mini-case-study\"\n                >\n                  Read 2-min case study →\n                </Button>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":5403},"client/src/components/sections/philosophy.tsx":{"content":"import { Archive, MessageCircle, BarChart3 } from \"lucide-react\";\n\nexport function PhilosophySection() {\n  const approaches = [\n    {\n      icon: Archive,\n      title: \"Build for the System\",\n      description: \"I design holistic full-funnel marketing ecosystems that ensure scalability and a seamless customer experience.\"\n    },\n    {\n      icon: MessageCircle,\n      title: \"Translate Complexity\",\n      description: \"I act as the bridge between creative vision and the MarTech stack, ensuring technical and strategic alignment across teams.\"\n    },\n    {\n      icon: BarChart3,\n      title: \"Measure & Automate\",\n      description: \"I implement robust analytics and attribution models to track KPIs, then automate workflows to drive efficiency and data-driven growth.\"\n    }\n  ];\n\n  return (\n    <section className=\"py-16\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-4xl mx-auto\">\n          <h2 className=\"text-3xl md:text-4xl font-bold text-center mb-12\" data-testid=\"philosophy-heading\">\n            My Approach: Architecting for Growth\n          </h2>\n          \n          <div className=\"grid md:grid-cols-3 gap-8\">\n            {approaches.map((approach, index) => {\n              const IconComponent = approach.icon;\n              return (\n                <div key={approach.title} className=\"text-center\" data-testid={`philosophy-item-${index}`}>\n                  <div className=\"bg-primary/10 rounded-full w-16 h-16 flex items-center justify-center mx-auto mb-4\">\n                    <IconComponent className=\"w-8 h-8 text-primary\" />\n                  </div>\n                  <h3 className=\"text-xl font-semibold mb-3\" data-testid={`philosophy-title-${index}`}>\n                    {approach.title}\n                  </h3>\n                  <p className=\"text-muted-foreground\" data-testid={`philosophy-description-${index}`}>\n                    {approach.description}\n                  </p>\n                </div>\n              );\n            })}\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":2080},"client/src/components/sections/skills-overview.tsx":{"content":"import { Code, TrendingUp } from \"lucide-react\";\nimport { Badge } from \"@/components/ui/badge\";\n\nexport function SkillsOverviewSection() {\n  const technicalSkills = {\n    \"Web Performance & Optimization\": [\"Cloudflare\", \"LiteSpeed Cache\", \"WP Rocket\", \"Core Web Vitals\"],\n    \"Analytics & Tracking\": [\"Google Tag Manager\", \"GA4\", \"Google Ads\", \"Conversion Tracking\"],\n    \"Programming Languages\": [\"PHP\", \"JavaScript\", \"SQL\", \"CSS\", \"HTML\"]\n  };\n\n  const marketingSkills = {\n    \"Marketing Automation\": [\"FluentCRM\", \"WP Fusion\", \"Lifecycle Campaigns\", \"Lead Nurturing\"],\n    \"E-commerce Platforms\": [\"WooCommerce\", \"LearnDash\", \"Gravity Forms\", \"Conversion Optimization\"],\n    \"Infrastructure & Security\": [\"WAF Configuration\", \"Bot Management\", \"Server Administration\", \"DevOps\"]\n  };\n\n  return (\n    <section id=\"skills\" className=\"py-16 bg-muted/30\">\n      <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n        <div className=\"max-w-6xl mx-auto\">\n          <div className=\"text-center mb-12\">\n            <h2 className=\"text-3xl md:text-4xl font-bold mb-4\" data-testid=\"skills-overview-heading\">\n              Core Competencies\n            </h2>\n            <p className=\"text-xl text-muted-foreground\" data-testid=\"skills-overview-description\">\n              Full-stack marketing technology expertise spanning strategy, implementation, and optimization.\n            </p>\n          </div>\n\n          <div className=\"grid md:grid-cols-2 gap-8\">\n            {/* Technical Skills */}\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <h3 className=\"text-2xl font-semibold mb-6 flex items-center\" data-testid=\"technical-skills-heading\">\n                <Code className=\"w-6 h-6 mr-2 text-primary\" />\n                Technical Stack\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {Object.entries(technicalSkills).map(([category, skills]) => (\n                  <div key={category} data-testid={`technical-category-${category.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    <h4 className=\"font-medium mb-2\">{category}</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {skills.map((skill) => (\n                        <Badge \n                          key={skill} \n                          variant=\"secondary\"\n                          data-testid={`technical-skill-${skill.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          {skill}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n\n            {/* Marketing Skills */}\n            <div className=\"bg-card border border-border rounded-xl p-6\">\n              <h3 className=\"text-2xl font-semibold mb-6 flex items-center\" data-testid=\"marketing-skills-heading\">\n                <TrendingUp className=\"w-6 h-6 mr-2 text-primary\" />\n                Marketing Expertise\n              </h3>\n              \n              <div className=\"space-y-4\">\n                {Object.entries(marketingSkills).map(([category, skills]) => (\n                  <div key={category} data-testid={`marketing-category-${category.toLowerCase().replace(/\\s+/g, '-')}`}>\n                    <h4 className=\"font-medium mb-2\">{category}</h4>\n                    <div className=\"flex flex-wrap gap-2\">\n                      {skills.map((skill) => (\n                        <Badge \n                          key={skill} \n                          variant=\"secondary\"\n                          data-testid={`marketing-skill-${skill.toLowerCase().replace(/\\s+/g, '-')}`}\n                        >\n                          {skill}\n                        </Badge>\n                      ))}\n                    </div>\n                  </div>\n                ))}\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    </section>\n  );\n}\n","size_bytes":3985},"client/src/components/ui/accordion.tsx":{"content":"import * as React from \"react\"\nimport * as AccordionPrimitive from \"@radix-ui/react-accordion\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Accordion = AccordionPrimitive.Root\n\nconst AccordionItem = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <AccordionPrimitive.Item\n    ref={ref}\n    className={cn(\"border-b\", className)}\n    {...props}\n  />\n))\nAccordionItem.displayName = \"AccordionItem\"\n\nconst AccordionTrigger = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Header className=\"flex\">\n    <AccordionPrimitive.Trigger\n      ref={ref}\n      className={cn(\n        \"flex flex-1 items-center justify-between py-4 font-medium transition-all hover:underline [&[data-state=open]>svg]:rotate-180\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <ChevronDown className=\"h-4 w-4 shrink-0 transition-transform duration-200\" />\n    </AccordionPrimitive.Trigger>\n  </AccordionPrimitive.Header>\n))\nAccordionTrigger.displayName = AccordionPrimitive.Trigger.displayName\n\nconst AccordionContent = React.forwardRef<\n  React.ElementRef<typeof AccordionPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AccordionPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <AccordionPrimitive.Content\n    ref={ref}\n    className=\"overflow-hidden text-sm transition-all data-[state=closed]:animate-accordion-up data-[state=open]:animate-accordion-down\"\n    {...props}\n  >\n    <div className={cn(\"pb-4 pt-0\", className)}>{children}</div>\n  </AccordionPrimitive.Content>\n))\n\nAccordionContent.displayName = AccordionPrimitive.Content.displayName\n\nexport { Accordion, AccordionItem, AccordionTrigger, AccordionContent }\n","size_bytes":1977},"client/src/components/ui/alert-dialog.tsx":{"content":"import * as React from \"react\"\nimport * as AlertDialogPrimitive from \"@radix-ui/react-alert-dialog\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nconst AlertDialog = AlertDialogPrimitive.Root\n\nconst AlertDialogTrigger = AlertDialogPrimitive.Trigger\n\nconst AlertDialogPortal = AlertDialogPrimitive.Portal\n\nconst AlertDialogOverlay = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nAlertDialogOverlay.displayName = AlertDialogPrimitive.Overlay.displayName\n\nconst AlertDialogContent = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPortal>\n    <AlertDialogOverlay />\n    <AlertDialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    />\n  </AlertDialogPortal>\n))\nAlertDialogContent.displayName = AlertDialogPrimitive.Content.displayName\n\nconst AlertDialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogHeader.displayName = \"AlertDialogHeader\"\n\nconst AlertDialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nAlertDialogFooter.displayName = \"AlertDialogFooter\"\n\nconst AlertDialogTitle = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold\", className)}\n    {...props}\n  />\n))\nAlertDialogTitle.displayName = AlertDialogPrimitive.Title.displayName\n\nconst AlertDialogDescription = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nAlertDialogDescription.displayName =\n  AlertDialogPrimitive.Description.displayName\n\nconst AlertDialogAction = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Action>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Action>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Action\n    ref={ref}\n    className={cn(buttonVariants(), className)}\n    {...props}\n  />\n))\nAlertDialogAction.displayName = AlertDialogPrimitive.Action.displayName\n\nconst AlertDialogCancel = React.forwardRef<\n  React.ElementRef<typeof AlertDialogPrimitive.Cancel>,\n  React.ComponentPropsWithoutRef<typeof AlertDialogPrimitive.Cancel>\n>(({ className, ...props }, ref) => (\n  <AlertDialogPrimitive.Cancel\n    ref={ref}\n    className={cn(\n      buttonVariants({ variant: \"outline\" }),\n      \"mt-2 sm:mt-0\",\n      className\n    )}\n    {...props}\n  />\n))\nAlertDialogCancel.displayName = AlertDialogPrimitive.Cancel.displayName\n\nexport {\n  AlertDialog,\n  AlertDialogPortal,\n  AlertDialogOverlay,\n  AlertDialogTrigger,\n  AlertDialogContent,\n  AlertDialogHeader,\n  AlertDialogFooter,\n  AlertDialogTitle,\n  AlertDialogDescription,\n  AlertDialogAction,\n  AlertDialogCancel,\n}\n","size_bytes":4420},"client/src/components/ui/alert.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst alertVariants = cva(\n  \"relative w-full rounded-lg border p-4 [&>svg~*]:pl-7 [&>svg+div]:translate-y-[-3px] [&>svg]:absolute [&>svg]:left-4 [&>svg]:top-4 [&>svg]:text-foreground\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-background text-foreground\",\n        destructive:\n          \"border-destructive/50 text-destructive dark:border-destructive [&>svg]:text-destructive\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Alert = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & VariantProps<typeof alertVariants>\n>(({ className, variant, ...props }, ref) => (\n  <div\n    ref={ref}\n    role=\"alert\"\n    className={cn(alertVariants({ variant }), className)}\n    {...props}\n  />\n))\nAlert.displayName = \"Alert\"\n\nconst AlertTitle = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLHeadingElement>\n>(({ className, ...props }, ref) => (\n  <h5\n    ref={ref}\n    className={cn(\"mb-1 font-medium leading-none tracking-tight\", className)}\n    {...props}\n  />\n))\nAlertTitle.displayName = \"AlertTitle\"\n\nconst AlertDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm [&_p]:leading-relaxed\", className)}\n    {...props}\n  />\n))\nAlertDescription.displayName = \"AlertDescription\"\n\nexport { Alert, AlertTitle, AlertDescription }\n","size_bytes":1584},"client/src/components/ui/aspect-ratio.tsx":{"content":"import * as AspectRatioPrimitive from \"@radix-ui/react-aspect-ratio\"\n\nconst AspectRatio = AspectRatioPrimitive.Root\n\nexport { AspectRatio }\n","size_bytes":140},"client/src/components/ui/avatar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as AvatarPrimitive from \"@radix-ui/react-avatar\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Avatar = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex h-10 w-10 shrink-0 overflow-hidden rounded-full\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatar.displayName = AvatarPrimitive.Root.displayName\n\nconst AvatarImage = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Image>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Image>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Image\n    ref={ref}\n    className={cn(\"aspect-square h-full w-full\", className)}\n    {...props}\n  />\n))\nAvatarImage.displayName = AvatarPrimitive.Image.displayName\n\nconst AvatarFallback = React.forwardRef<\n  React.ElementRef<typeof AvatarPrimitive.Fallback>,\n  React.ComponentPropsWithoutRef<typeof AvatarPrimitive.Fallback>\n>(({ className, ...props }, ref) => (\n  <AvatarPrimitive.Fallback\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full items-center justify-center rounded-full bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nAvatarFallback.displayName = AvatarPrimitive.Fallback.displayName\n\nexport { Avatar, AvatarImage, AvatarFallback }\n","size_bytes":1419},"client/src/components/ui/badge.tsx":{"content":"import * as React from \"react\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst badgeVariants = cva(\n  \"inline-flex items-center rounded-full border px-2.5 py-0.5 text-xs font-semibold transition-colors focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2\",\n  {\n    variants: {\n      variant: {\n        default:\n          \"border-transparent bg-primary text-primary-foreground hover:bg-primary/80\",\n        secondary:\n          \"border-transparent bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        destructive:\n          \"border-transparent bg-destructive text-destructive-foreground hover:bg-destructive/80\",\n        outline: \"text-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nexport interface BadgeProps\n  extends React.HTMLAttributes<HTMLDivElement>,\n    VariantProps<typeof badgeVariants> {}\n\nfunction Badge({ className, variant, ...props }: BadgeProps) {\n  return (\n    <div className={cn(badgeVariants({ variant }), className)} {...props} />\n  )\n}\n\nexport { Badge, badgeVariants }\n","size_bytes":1128},"client/src/components/ui/before-after-slider.tsx":{"content":"import { useState, useCallback, useRef, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\n\ninterface BeforeAfterSliderProps {\n  beforeImage: {\n    src: string;\n    alt: string;\n    caption?: string;\n  };\n  afterImage: {\n    src: string;\n    alt: string;\n    caption?: string;\n  };\n  className?: string;\n  initialPosition?: number; // 0-100\n}\n\nexport function BeforeAfterSlider({\n  beforeImage,\n  afterImage,\n  className,\n  initialPosition = 50\n}: BeforeAfterSliderProps) {\n  const [position, setPosition] = useState(initialPosition);\n  const [isDragging, setIsDragging] = useState(false);\n  const containerRef = useRef<HTMLDivElement>(null);\n\n  const handleMove = useCallback((clientX: number) => {\n    if (!containerRef.current) return;\n\n    const rect = containerRef.current.getBoundingClientRect();\n    const x = clientX - rect.left;\n    const percentage = Math.max(0, Math.min(100, (x / rect.width) * 100));\n    setPosition(percentage);\n  }, []);\n\n  const handleMouseDown = useCallback((e: React.MouseEvent) => {\n    e.preventDefault();\n    setIsDragging(true);\n    handleMove(e.clientX);\n  }, [handleMove]);\n\n  const handleMouseMove = useCallback((e: MouseEvent) => {\n    if (!isDragging) return;\n    handleMove(e.clientX);\n  }, [isDragging, handleMove]);\n\n  const handleMouseUp = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  const handleTouchStart = useCallback((e: React.TouchEvent) => {\n    setIsDragging(true);\n    handleMove(e.touches[0].clientX);\n  }, [handleMove]);\n\n  const handleTouchMove = useCallback((e: TouchEvent) => {\n    if (!isDragging) return;\n    e.preventDefault();\n    handleMove(e.touches[0].clientX);\n  }, [isDragging, handleMove]);\n\n  const handleTouchEnd = useCallback(() => {\n    setIsDragging(false);\n  }, []);\n\n  // Keyboard support\n  const handleKeyDown = useCallback((e: React.KeyboardEvent) => {\n    switch (e.key) {\n      case 'ArrowLeft':\n        e.preventDefault();\n        setPosition(prev => Math.max(0, prev - 5));\n        break;\n      case 'ArrowRight':\n        e.preventDefault();\n        setPosition(prev => Math.min(100, prev + 5));\n        break;\n      case 'Home':\n        e.preventDefault();\n        setPosition(0);\n        break;\n      case 'End':\n        e.preventDefault();\n        setPosition(100);\n        break;\n    }\n  }, []);\n\n  // Mouse and touch event listeners\n  useEffect(() => {\n    if (isDragging) {\n      document.addEventListener('mousemove', handleMouseMove);\n      document.addEventListener('mouseup', handleMouseUp);\n      document.addEventListener('touchmove', handleTouchMove, { passive: false });\n      document.addEventListener('touchend', handleTouchEnd);\n\n      return () => {\n        document.removeEventListener('mousemove', handleMouseMove);\n        document.removeEventListener('mouseup', handleMouseUp);\n        document.removeEventListener('touchmove', handleTouchMove);\n        document.removeEventListener('touchend', handleTouchEnd);\n      };\n    }\n  }, [isDragging, handleMouseMove, handleMouseUp, handleTouchMove, handleTouchEnd]);\n\n  return (\n    <div className={cn(\"space-y-4\", className)}>\n      <div\n        ref={containerRef}\n        className=\"relative aspect-video bg-muted rounded-lg overflow-hidden select-none cursor-ew-resize focus-within:ring-2 focus-within:ring-ring focus-within:ring-offset-2\"\n        onMouseDown={handleMouseDown}\n        onTouchStart={handleTouchStart}\n        data-testid=\"before-after-slider\"\n      >\n        {/* After image (background) */}\n        <img\n          src={afterImage.src}\n          alt={afterImage.alt}\n          className=\"absolute inset-0 w-full h-full object-cover\"\n          draggable={false}\n        />\n\n        {/* Before image (clipped) */}\n        <div\n          className=\"absolute inset-0 overflow-hidden\"\n          style={{ clipPath: `inset(0 ${100 - position}% 0 0)` }}\n        >\n          <img\n            src={beforeImage.src}\n            alt={beforeImage.alt}\n            className=\"w-full h-full object-cover\"\n            draggable={false}\n          />\n        </div>\n\n        {/* Slider handle */}\n        <div\n          className=\"absolute top-0 bottom-0 w-1 bg-white shadow-lg cursor-ew-resize\"\n          style={{ left: `${position}%` }}\n        >\n          <div className=\"absolute top-1/2 left-1/2 -translate-x-1/2 -translate-y-1/2 w-8 h-8 bg-white rounded-full shadow-lg border-2 border-gray-300 flex items-center justify-center\">\n            {/* Handle arrows */}\n            <svg width=\"12\" height=\"12\" viewBox=\"0 0 24 24\" fill=\"none\" className=\"text-gray-600\">\n              <path\n                d=\"M8 7L3 12L8 17M16 7L21 12L16 17\"\n                stroke=\"currentColor\"\n                strokeWidth=\"2\"\n                strokeLinecap=\"round\"\n                strokeLinejoin=\"round\"\n              />\n            </svg>\n          </div>\n\n          {/* Invisible interaction area for better touch/mouse handling */}\n          <div\n            className=\"absolute top-0 bottom-0 -left-4 -right-4 cursor-ew-resize\"\n            tabIndex={0}\n            role=\"slider\"\n            aria-valuenow={Math.round(position)}\n            aria-valuemin={0}\n            aria-valuemax={100}\n            aria-label={`Compare before and after images. Current position: ${Math.round(position)}%`}\n            onKeyDown={handleKeyDown}\n            data-testid=\"slider-handle\"\n          />\n        </div>\n\n        {/* Labels */}\n        <div className=\"absolute top-4 left-4 bg-black/70 text-white text-sm px-2 py-1 rounded\">\n          Before\n        </div>\n        <div className=\"absolute top-4 right-4 bg-black/70 text-white text-sm px-2 py-1 rounded\">\n          After\n        </div>\n      </div>\n\n      {/* Captions */}\n      {(beforeImage.caption || afterImage.caption) && (\n        <div className=\"flex gap-4 text-sm text-muted-foreground\">\n          {beforeImage.caption && (\n            <div className=\"flex-1\">\n              <span className=\"font-medium\">Before:</span> {beforeImage.caption}\n            </div>\n          )}\n          {afterImage.caption && (\n            <div className=\"flex-1\">\n              <span className=\"font-medium\">After:</span> {afterImage.caption}\n            </div>\n          )}\n        </div>\n      )}\n\n      {/* Instructions */}\n      <div className=\"text-center text-xs text-muted-foreground\">\n        Drag the slider or use arrow keys to compare\n      </div>\n    </div>\n  );\n}","size_bytes":6374},"client/src/components/ui/breadcrumb.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Breadcrumb = React.forwardRef<\n  HTMLElement,\n  React.ComponentPropsWithoutRef<\"nav\"> & {\n    separator?: React.ReactNode\n  }\n>(({ ...props }, ref) => <nav ref={ref} aria-label=\"breadcrumb\" {...props} />)\nBreadcrumb.displayName = \"Breadcrumb\"\n\nconst BreadcrumbList = React.forwardRef<\n  HTMLOListElement,\n  React.ComponentPropsWithoutRef<\"ol\">\n>(({ className, ...props }, ref) => (\n  <ol\n    ref={ref}\n    className={cn(\n      \"flex flex-wrap items-center gap-1.5 break-words text-sm text-muted-foreground sm:gap-2.5\",\n      className\n    )}\n    {...props}\n  />\n))\nBreadcrumbList.displayName = \"BreadcrumbList\"\n\nconst BreadcrumbItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentPropsWithoutRef<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    className={cn(\"inline-flex items-center gap-1.5\", className)}\n    {...props}\n  />\n))\nBreadcrumbItem.displayName = \"BreadcrumbItem\"\n\nconst BreadcrumbLink = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentPropsWithoutRef<\"a\"> & {\n    asChild?: boolean\n  }\n>(({ asChild, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      className={cn(\"transition-colors hover:text-foreground\", className)}\n      {...props}\n    />\n  )\n})\nBreadcrumbLink.displayName = \"BreadcrumbLink\"\n\nconst BreadcrumbPage = React.forwardRef<\n  HTMLSpanElement,\n  React.ComponentPropsWithoutRef<\"span\">\n>(({ className, ...props }, ref) => (\n  <span\n    ref={ref}\n    role=\"link\"\n    aria-disabled=\"true\"\n    aria-current=\"page\"\n    className={cn(\"font-normal text-foreground\", className)}\n    {...props}\n  />\n))\nBreadcrumbPage.displayName = \"BreadcrumbPage\"\n\nconst BreadcrumbSeparator = ({\n  children,\n  className,\n  ...props\n}: React.ComponentProps<\"li\">) => (\n  <li\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"[&>svg]:w-3.5 [&>svg]:h-3.5\", className)}\n    {...props}\n  >\n    {children ?? <ChevronRight />}\n  </li>\n)\nBreadcrumbSeparator.displayName = \"BreadcrumbSeparator\"\n\nconst BreadcrumbEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    role=\"presentation\"\n    aria-hidden=\"true\"\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More</span>\n  </span>\n)\nBreadcrumbEllipsis.displayName = \"BreadcrumbElipssis\"\n\nexport {\n  Breadcrumb,\n  BreadcrumbList,\n  BreadcrumbItem,\n  BreadcrumbLink,\n  BreadcrumbPage,\n  BreadcrumbSeparator,\n  BreadcrumbEllipsis,\n}\n","size_bytes":2712},"client/src/components/ui/button.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst buttonVariants = cva(\n  \"inline-flex items-center justify-center gap-2 whitespace-nowrap rounded-md text-sm font-medium ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-primary text-primary-foreground hover:bg-primary/90\",\n        destructive:\n          \"bg-destructive text-destructive-foreground hover:bg-destructive/90\",\n        outline:\n          \"border border-input bg-background hover:bg-accent hover:text-accent-foreground\",\n        secondary:\n          \"bg-secondary text-secondary-foreground hover:bg-secondary/80\",\n        ghost: \"hover:bg-accent hover:text-accent-foreground\",\n        link: \"text-primary underline-offset-4 hover:underline\",\n      },\n      size: {\n        default: \"h-10 px-4 py-2\",\n        sm: \"h-9 rounded-md px-3\",\n        lg: \"h-11 rounded-md px-8\",\n        icon: \"h-10 w-10\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nexport interface ButtonProps\n  extends React.ButtonHTMLAttributes<HTMLButtonElement>,\n    VariantProps<typeof buttonVariants> {\n  asChild?: boolean\n}\n\nconst Button = React.forwardRef<HTMLButtonElement, ButtonProps>(\n  ({ className, variant, size, asChild = false, ...props }, ref) => {\n    const Comp = asChild ? Slot : \"button\"\n    return (\n      <Comp\n        className={cn(buttonVariants({ variant, size, className }))}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nButton.displayName = \"Button\"\n\nexport { Button, buttonVariants }\n","size_bytes":1901},"client/src/components/ui/calendar.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight } from \"lucide-react\"\nimport { DayPicker } from \"react-day-picker\"\n\nimport { cn } from \"@/lib/utils\"\nimport { buttonVariants } from \"@/components/ui/button\"\n\nexport type CalendarProps = React.ComponentProps<typeof DayPicker>\n\nfunction Calendar({\n  className,\n  classNames,\n  showOutsideDays = true,\n  ...props\n}: CalendarProps) {\n  return (\n    <DayPicker\n      showOutsideDays={showOutsideDays}\n      className={cn(\"p-3\", className)}\n      classNames={{\n        months: \"flex flex-col sm:flex-row space-y-4 sm:space-x-4 sm:space-y-0\",\n        month: \"space-y-4\",\n        caption: \"flex justify-center pt-1 relative items-center\",\n        caption_label: \"text-sm font-medium\",\n        nav: \"space-x-1 flex items-center\",\n        nav_button: cn(\n          buttonVariants({ variant: \"outline\" }),\n          \"h-7 w-7 bg-transparent p-0 opacity-50 hover:opacity-100\"\n        ),\n        nav_button_previous: \"absolute left-1\",\n        nav_button_next: \"absolute right-1\",\n        table: \"w-full border-collapse space-y-1\",\n        head_row: \"flex\",\n        head_cell:\n          \"text-muted-foreground rounded-md w-9 font-normal text-[0.8rem]\",\n        row: \"flex w-full mt-2\",\n        cell: \"h-9 w-9 text-center text-sm p-0 relative [&:has([aria-selected].day-range-end)]:rounded-r-md [&:has([aria-selected].day-outside)]:bg-accent/50 [&:has([aria-selected])]:bg-accent first:[&:has([aria-selected])]:rounded-l-md last:[&:has([aria-selected])]:rounded-r-md focus-within:relative focus-within:z-20\",\n        day: cn(\n          buttonVariants({ variant: \"ghost\" }),\n          \"h-9 w-9 p-0 font-normal aria-selected:opacity-100\"\n        ),\n        day_range_end: \"day-range-end\",\n        day_selected:\n          \"bg-primary text-primary-foreground hover:bg-primary hover:text-primary-foreground focus:bg-primary focus:text-primary-foreground\",\n        day_today: \"bg-accent text-accent-foreground\",\n        day_outside:\n          \"day-outside text-muted-foreground aria-selected:bg-accent/50 aria-selected:text-muted-foreground\",\n        day_disabled: \"text-muted-foreground opacity-50\",\n        day_range_middle:\n          \"aria-selected:bg-accent aria-selected:text-accent-foreground\",\n        day_hidden: \"invisible\",\n        ...classNames,\n      }}\n      components={{\n        IconLeft: ({ className, ...props }) => (\n          <ChevronLeft className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n        IconRight: ({ className, ...props }) => (\n          <ChevronRight className={cn(\"h-4 w-4\", className)} {...props} />\n        ),\n      }}\n      {...props}\n    />\n  )\n}\nCalendar.displayName = \"Calendar\"\n\nexport { Calendar }\n","size_bytes":2695},"client/src/components/ui/card-v2.tsx":{"content":"import * as React from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Clock, ExternalLink } from \"lucide-react\";\n\ninterface CardV2Props extends React.HTMLAttributes<HTMLDivElement> {\n  variant?: \"default\" | \"interactive\" | \"featured\";\n  hoverable?: boolean;\n}\n\nconst Card = React.forwardRef<HTMLDivElement, CardV2Props>(\n  ({ className, variant = \"default\", hoverable = false, ...props }, ref) => (\n    <div\n      ref={ref}\n      className={cn(\n        \"rounded-card bg-surface text-card-foreground\",\n        \"border border-border shadow-card\",\n        \"transition-all duration-med ease-smooth\",\n        hoverable && [\n          \"hover:shadow-hover hover:-translate-y-1 hover:scale-[1.01]\",\n          \"focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n          \"cursor-pointer\"\n        ],\n        variant === \"featured\" && \"border-primary/20 bg-gradient-to-br from-surface to-primary/5\",\n        variant === \"interactive\" && \"hover:border-primary/40\",\n        className\n      )}\n      {...props}\n    />\n  )\n);\nCard.displayName = \"CardV2\";\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { compact?: boolean }\n>(({ className, compact = false, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"flex flex-col space-y-2\",\n      compact ? \"p-4 pb-2\" : \"p-6 pb-4\", \n      className\n    )}\n    {...props}\n  />\n));\nCardHeader.displayName = \"CardV2Header\";\n\nconst CardTitle = React.forwardRef<\n  HTMLHeadingElement,\n  React.HTMLAttributes<HTMLHeadingElement> & { \n    level?: \"h1\" | \"h2\" | \"h3\" | \"h4\" | \"h5\" | \"h6\";\n    gradient?: boolean;\n  }\n>(({ className, level = \"h3\", gradient = false, children, ...props }, ref) => {\n  const Component = level;\n  return (\n    <Component\n      ref={ref}\n      className={cn(\n        \"font-display font-semibold leading-tight tracking-tight\",\n        level === \"h1\" && \"text-h1\",\n        level === \"h2\" && \"text-h2\", \n        level === \"h3\" && \"text-lg\",\n        level === \"h4\" && \"text-base\",\n        gradient && \"gradient-text\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </Component>\n  );\n});\nCardTitle.displayName = \"CardV2Title\";\n\nconst CardDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => (\n  <p\n    ref={ref}\n    className={cn(\n      \"text-sm text-muted-foreground leading-relaxed\",\n      className\n    )}\n    {...props}\n  />\n));\nCardDescription.displayName = \"CardV2Description\";\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { compact?: boolean }\n>(({ className, compact = false, ...props }, ref) => (\n  <div \n    ref={ref} \n    className={cn(\n      compact ? \"px-4 pb-2\" : \"px-6 pb-4\", \n      className\n    )} \n    {...props} \n  />\n));\nCardContent.displayName = \"CardV2Content\";\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & { compact?: boolean }\n>(({ className, compact = false, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"flex items-center justify-between border-t border-border/50 bg-muted/20\",\n      compact ? \"px-4 py-3\" : \"px-6 py-4\",\n      className\n    )}\n    {...props}\n  />\n));\nCardFooter.displayName = \"CardV2Footer\";\n\n// Enhanced card variants for specific use cases\ninterface ProjectCardProps extends CardV2Props {\n  title: string;\n  description: string;\n  kpis?: Array<{ label: string; value: string; }>;\n  tags?: string[];\n  readingTime?: string;\n  href?: string;\n}\n\nconst ProjectCard = React.forwardRef<HTMLDivElement, ProjectCardProps>(\n  ({ title, description, kpis, tags, readingTime, href, className, ...props }, ref) => (\n    <Card\n      ref={ref}\n      variant=\"interactive\"\n      hoverable\n      className={cn(\"group\", className)}\n      {...props}\n      data-testid=\"project-card\"\n    >\n      <CardHeader compact>\n        <div className=\"flex items-start justify-between gap-4\">\n          <CardTitle level=\"h3\" className=\"group-hover:text-primary transition-colors duration-fast\">\n            {title}\n          </CardTitle>\n          {href && (\n            <ExternalLink className=\"h-4 w-4 text-muted-foreground opacity-0 group-hover:opacity-100 transition-opacity duration-fast\" />\n          )}\n        </div>\n        <CardDescription>{description}</CardDescription>\n      </CardHeader>\n\n      {kpis && kpis.length > 0 && (\n        <CardContent compact>\n          <div className=\"flex flex-wrap gap-2\">\n            {kpis.map((kpi, index) => (\n              <div key={index} className=\"text-xs bg-muted rounded px-2 py-1\">\n                <span className=\"text-muted-foreground\">{kpi.label}:</span>{\" \"}\n                <span className=\"font-medium\">{kpi.value}</span>\n              </div>\n            ))}\n          </div>\n        </CardContent>\n      )}\n\n      <CardFooter compact>\n        <div className=\"flex items-center gap-2\">\n          {tags && tags.map((tag) => (\n            <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n              {tag}\n            </Badge>\n          ))}\n        </div>\n        {readingTime && (\n          <div className=\"flex items-center gap-1 text-xs text-muted-foreground ml-auto\">\n            <Clock className=\"h-3 w-3\" />\n            {readingTime}\n          </div>\n        )}\n      </CardFooter>\n    </Card>\n  )\n);\nProjectCard.displayName = \"ProjectCard\";\n\nexport { \n  Card as CardV2, \n  CardHeader as CardV2Header, \n  CardFooter as CardV2Footer, \n  CardTitle as CardV2Title, \n  CardDescription as CardV2Description, \n  CardContent as CardV2Content,\n  ProjectCard\n};","size_bytes":5667},"client/src/components/ui/card.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Card = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nCard.displayName = \"Card\"\n\nconst CardHeader = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\n    {...props}\n  />\n))\nCardHeader.displayName = \"CardHeader\"\n\nconst CardTitle = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\n      \"text-2xl font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nCardTitle.displayName = \"CardTitle\"\n\nconst CardDescription = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nCardDescription.displayName = \"CardDescription\"\n\nconst CardContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\n))\nCardContent.displayName = \"CardContent\"\n\nconst CardFooter = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    className={cn(\"flex items-center p-6 pt-0\", className)}\n    {...props}\n  />\n))\nCardFooter.displayName = \"CardFooter\"\n\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\n","size_bytes":1858},"client/src/components/ui/carousel.tsx":{"content":"import * as React from \"react\"\nimport useEmblaCarousel, {\n  type UseEmblaCarouselType,\n} from \"embla-carousel-react\"\nimport { ArrowLeft, ArrowRight } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\n\ntype CarouselApi = UseEmblaCarouselType[1]\ntype UseCarouselParameters = Parameters<typeof useEmblaCarousel>\ntype CarouselOptions = UseCarouselParameters[0]\ntype CarouselPlugin = UseCarouselParameters[1]\n\ntype CarouselProps = {\n  opts?: CarouselOptions\n  plugins?: CarouselPlugin\n  orientation?: \"horizontal\" | \"vertical\"\n  setApi?: (api: CarouselApi) => void\n}\n\ntype CarouselContextProps = {\n  carouselRef: ReturnType<typeof useEmblaCarousel>[0]\n  api: ReturnType<typeof useEmblaCarousel>[1]\n  scrollPrev: () => void\n  scrollNext: () => void\n  canScrollPrev: boolean\n  canScrollNext: boolean\n} & CarouselProps\n\nconst CarouselContext = React.createContext<CarouselContextProps | null>(null)\n\nfunction useCarousel() {\n  const context = React.useContext(CarouselContext)\n\n  if (!context) {\n    throw new Error(\"useCarousel must be used within a <Carousel />\")\n  }\n\n  return context\n}\n\nconst Carousel = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement> & CarouselProps\n>(\n  (\n    {\n      orientation = \"horizontal\",\n      opts,\n      setApi,\n      plugins,\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const [carouselRef, api] = useEmblaCarousel(\n      {\n        ...opts,\n        axis: orientation === \"horizontal\" ? \"x\" : \"y\",\n      },\n      plugins\n    )\n    const [canScrollPrev, setCanScrollPrev] = React.useState(false)\n    const [canScrollNext, setCanScrollNext] = React.useState(false)\n\n    const onSelect = React.useCallback((api: CarouselApi) => {\n      if (!api) {\n        return\n      }\n\n      setCanScrollPrev(api.canScrollPrev())\n      setCanScrollNext(api.canScrollNext())\n    }, [])\n\n    const scrollPrev = React.useCallback(() => {\n      api?.scrollPrev()\n    }, [api])\n\n    const scrollNext = React.useCallback(() => {\n      api?.scrollNext()\n    }, [api])\n\n    const handleKeyDown = React.useCallback(\n      (event: React.KeyboardEvent<HTMLDivElement>) => {\n        if (event.key === \"ArrowLeft\") {\n          event.preventDefault()\n          scrollPrev()\n        } else if (event.key === \"ArrowRight\") {\n          event.preventDefault()\n          scrollNext()\n        }\n      },\n      [scrollPrev, scrollNext]\n    )\n\n    React.useEffect(() => {\n      if (!api || !setApi) {\n        return\n      }\n\n      setApi(api)\n    }, [api, setApi])\n\n    React.useEffect(() => {\n      if (!api) {\n        return\n      }\n\n      onSelect(api)\n      api.on(\"reInit\", onSelect)\n      api.on(\"select\", onSelect)\n\n      return () => {\n        api?.off(\"select\", onSelect)\n      }\n    }, [api, onSelect])\n\n    return (\n      <CarouselContext.Provider\n        value={{\n          carouselRef,\n          api: api,\n          opts,\n          orientation:\n            orientation || (opts?.axis === \"y\" ? \"vertical\" : \"horizontal\"),\n          scrollPrev,\n          scrollNext,\n          canScrollPrev,\n          canScrollNext,\n        }}\n      >\n        <div\n          ref={ref}\n          onKeyDownCapture={handleKeyDown}\n          className={cn(\"relative\", className)}\n          role=\"region\"\n          aria-roledescription=\"carousel\"\n          {...props}\n        >\n          {children}\n        </div>\n      </CarouselContext.Provider>\n    )\n  }\n)\nCarousel.displayName = \"Carousel\"\n\nconst CarouselContent = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { carouselRef, orientation } = useCarousel()\n\n  return (\n    <div ref={carouselRef} className=\"overflow-hidden\">\n      <div\n        ref={ref}\n        className={cn(\n          \"flex\",\n          orientation === \"horizontal\" ? \"-ml-4\" : \"-mt-4 flex-col\",\n          className\n        )}\n        {...props}\n      />\n    </div>\n  )\n})\nCarouselContent.displayName = \"CarouselContent\"\n\nconst CarouselItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const { orientation } = useCarousel()\n\n  return (\n    <div\n      ref={ref}\n      role=\"group\"\n      aria-roledescription=\"slide\"\n      className={cn(\n        \"min-w-0 shrink-0 grow-0 basis-full\",\n        orientation === \"horizontal\" ? \"pl-4\" : \"pt-4\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nCarouselItem.displayName = \"CarouselItem\"\n\nconst CarouselPrevious = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollPrev, canScrollPrev } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute  h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-left-12 top-1/2 -translate-y-1/2\"\n          : \"-top-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollPrev}\n      onClick={scrollPrev}\n      {...props}\n    >\n      <ArrowLeft className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Previous slide</span>\n    </Button>\n  )\n})\nCarouselPrevious.displayName = \"CarouselPrevious\"\n\nconst CarouselNext = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<typeof Button>\n>(({ className, variant = \"outline\", size = \"icon\", ...props }, ref) => {\n  const { orientation, scrollNext, canScrollNext } = useCarousel()\n\n  return (\n    <Button\n      ref={ref}\n      variant={variant}\n      size={size}\n      className={cn(\n        \"absolute h-8 w-8 rounded-full\",\n        orientation === \"horizontal\"\n          ? \"-right-12 top-1/2 -translate-y-1/2\"\n          : \"-bottom-12 left-1/2 -translate-x-1/2 rotate-90\",\n        className\n      )}\n      disabled={!canScrollNext}\n      onClick={scrollNext}\n      {...props}\n    >\n      <ArrowRight className=\"h-4 w-4\" />\n      <span className=\"sr-only\">Next slide</span>\n    </Button>\n  )\n})\nCarouselNext.displayName = \"CarouselNext\"\n\nexport {\n  type CarouselApi,\n  Carousel,\n  CarouselContent,\n  CarouselItem,\n  CarouselPrevious,\n  CarouselNext,\n}\n","size_bytes":6210},"client/src/components/ui/case-study-card.tsx":{"content":"import { Button } from \"@/components/ui/button\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Link } from \"wouter\";\nimport { analytics } from \"@/lib/analytics\";\nimport type { CaseStudy } from \"@/data/case-studies\";\n\ninterface CaseStudyCardProps {\n  caseStudy: CaseStudy;\n  className?: string;\n}\n\nexport function CaseStudyCard({ caseStudy, className = \"\" }: CaseStudyCardProps) {\n  const handleReadMore = () => {\n    analytics.trackCaseStudyOpen(caseStudy.slug);\n  };\n\n  return (\n    <div \n      className={`bg-card border border-border rounded-xl p-6 hover:shadow-lg transition-shadow animate-scale-in ${className}`}\n      data-testid={`case-study-card-${caseStudy.slug}`}\n    >\n      <div className=\"flex items-center mb-4\">\n        <div className=\"text-3xl mr-3\" data-testid={`case-study-emoji-${caseStudy.slug}`}>\n          {caseStudy.emoji}\n        </div>\n        <h3 className=\"text-xl font-semibold\" data-testid={`case-study-title-${caseStudy.slug}`}>\n          {caseStudy.title}\n        </h3>\n      </div>\n      \n      <p className=\"text-muted-foreground mb-6\" data-testid={`case-study-description-${caseStudy.slug}`}>\n        {caseStudy.problem}\n      </p>\n      \n      <div className=\"flex flex-wrap gap-2 mb-6\">\n        {caseStudy.tags.map((tag) => (\n          <Badge \n            key={tag} \n            variant=\"secondary\" \n            className=\"bg-primary/10 text-primary\"\n            data-testid={`case-study-tag-${tag.toLowerCase().replace(/\\s+/g, '-')}`}\n          >\n            {tag}\n          </Badge>\n        ))}\n      </div>\n      \n      <Link href={`/work/${caseStudy.slug}`}>\n        <Button \n          className=\"w-full\" \n          onClick={handleReadMore}\n          data-testid={`button-read-case-study-${caseStudy.slug}`}\n        >\n          Read the Story\n        </Button>\n      </Link>\n    </div>\n  );\n}\n","size_bytes":1843},"client/src/components/ui/chart.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as RechartsPrimitive from \"recharts\"\n\nimport { cn } from \"@/lib/utils\"\n\n// Format: { THEME_NAME: CSS_SELECTOR }\nconst THEMES = { light: \"\", dark: \".dark\" } as const\n\nexport type ChartConfig = {\n  [k in string]: {\n    label?: React.ReactNode\n    icon?: React.ComponentType\n  } & (\n    | { color?: string; theme?: never }\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\n  )\n}\n\ntype ChartContextProps = {\n  config: ChartConfig\n}\n\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\n\nfunction useChart() {\n  const context = React.useContext(ChartContext)\n\n  if (!context) {\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\n  }\n\n  return context\n}\n\nconst ChartContainer = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    config: ChartConfig\n    children: React.ComponentProps<\n      typeof RechartsPrimitive.ResponsiveContainer\n    >[\"children\"]\n  }\n>(({ id, className, children, config, ...props }, ref) => {\n  const uniqueId = React.useId()\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\n\n  return (\n    <ChartContext.Provider value={{ config }}>\n      <div\n        data-chart={chartId}\n        ref={ref}\n        className={cn(\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\n          className\n        )}\n        {...props}\n      >\n        <ChartStyle id={chartId} config={config} />\n        <RechartsPrimitive.ResponsiveContainer>\n          {children}\n        </RechartsPrimitive.ResponsiveContainer>\n      </div>\n    </ChartContext.Provider>\n  )\n})\nChartContainer.displayName = \"Chart\"\n\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\n  const colorConfig = Object.entries(config).filter(\n    ([, config]) => config.theme || config.color\n  )\n\n  if (!colorConfig.length) {\n    return null\n  }\n\n  return (\n    <style\n      dangerouslySetInnerHTML={{\n        __html: Object.entries(THEMES)\n          .map(\n            ([theme, prefix]) => `\n${prefix} [data-chart=${id}] {\n${colorConfig\n  .map(([key, itemConfig]) => {\n    const color =\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\n      itemConfig.color\n    return color ? `  --color-${key}: ${color};` : null\n  })\n  .join(\"\\n\")}\n}\n`\n          )\n          .join(\"\\n\"),\n      }}\n    />\n  )\n}\n\nconst ChartTooltip = RechartsPrimitive.Tooltip\n\nconst ChartTooltipContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\n    React.ComponentProps<\"div\"> & {\n      hideLabel?: boolean\n      hideIndicator?: boolean\n      indicator?: \"line\" | \"dot\" | \"dashed\"\n      nameKey?: string\n      labelKey?: string\n    }\n>(\n  (\n    {\n      active,\n      payload,\n      className,\n      indicator = \"dot\",\n      hideLabel = false,\n      hideIndicator = false,\n      label,\n      labelFormatter,\n      labelClassName,\n      formatter,\n      color,\n      nameKey,\n      labelKey,\n    },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    const tooltipLabel = React.useMemo(() => {\n      if (hideLabel || !payload?.length) {\n        return null\n      }\n\n      const [item] = payload\n      const key = `${labelKey || item?.dataKey || item?.name || \"value\"}`\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\n      const value =\n        !labelKey && typeof label === \"string\"\n          ? config[label as keyof typeof config]?.label || label\n          : itemConfig?.label\n\n      if (labelFormatter) {\n        return (\n          <div className={cn(\"font-medium\", labelClassName)}>\n            {labelFormatter(value, payload)}\n          </div>\n        )\n      }\n\n      if (!value) {\n        return null\n      }\n\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\n    }, [\n      label,\n      labelFormatter,\n      payload,\n      hideLabel,\n      labelClassName,\n      config,\n      labelKey,\n    ])\n\n    if (!active || !payload?.length) {\n      return null\n    }\n\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\n          className\n        )}\n      >\n        {!nestLabel ? tooltipLabel : null}\n        <div className=\"grid gap-1.5\">\n          {payload.map((item, index) => {\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\n            const indicatorColor = color || item.payload.fill || item.color\n\n            return (\n              <div\n                key={item.dataKey}\n                className={cn(\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\n                  indicator === \"dot\" && \"items-center\"\n                )}\n              >\n                {formatter && item?.value !== undefined && item.name ? (\n                  formatter(item.value, item.name, item, index, item.payload)\n                ) : (\n                  <>\n                    {itemConfig?.icon ? (\n                      <itemConfig.icon />\n                    ) : (\n                      !hideIndicator && (\n                        <div\n                          className={cn(\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\n                            {\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\n                              \"w-1\": indicator === \"line\",\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\n                                indicator === \"dashed\",\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\n                            }\n                          )}\n                          style={\n                            {\n                              \"--color-bg\": indicatorColor,\n                              \"--color-border\": indicatorColor,\n                            } as React.CSSProperties\n                          }\n                        />\n                      )\n                    )}\n                    <div\n                      className={cn(\n                        \"flex flex-1 justify-between leading-none\",\n                        nestLabel ? \"items-end\" : \"items-center\"\n                      )}\n                    >\n                      <div className=\"grid gap-1.5\">\n                        {nestLabel ? tooltipLabel : null}\n                        <span className=\"text-muted-foreground\">\n                          {itemConfig?.label || item.name}\n                        </span>\n                      </div>\n                      {item.value && (\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\n                          {item.value.toLocaleString()}\n                        </span>\n                      )}\n                    </div>\n                  </>\n                )}\n              </div>\n            )\n          })}\n        </div>\n      </div>\n    )\n  }\n)\nChartTooltipContent.displayName = \"ChartTooltip\"\n\nconst ChartLegend = RechartsPrimitive.Legend\n\nconst ChartLegendContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> &\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\n      hideIcon?: boolean\n      nameKey?: string\n    }\n>(\n  (\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\n    ref\n  ) => {\n    const { config } = useChart()\n\n    if (!payload?.length) {\n      return null\n    }\n\n    return (\n      <div\n        ref={ref}\n        className={cn(\n          \"flex items-center justify-center gap-4\",\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\n          className\n        )}\n      >\n        {payload.map((item) => {\n          const key = `${nameKey || item.dataKey || \"value\"}`\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\n\n          return (\n            <div\n              key={item.value}\n              className={cn(\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\n              )}\n            >\n              {itemConfig?.icon && !hideIcon ? (\n                <itemConfig.icon />\n              ) : (\n                <div\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\n                  style={{\n                    backgroundColor: item.color,\n                  }}\n                />\n              )}\n              {itemConfig?.label}\n            </div>\n          )\n        })}\n      </div>\n    )\n  }\n)\nChartLegendContent.displayName = \"ChartLegend\"\n\n// Helper to extract item config from a payload.\nfunction getPayloadConfigFromPayload(\n  config: ChartConfig,\n  payload: unknown,\n  key: string\n) {\n  if (typeof payload !== \"object\" || payload === null) {\n    return undefined\n  }\n\n  const payloadPayload =\n    \"payload\" in payload &&\n    typeof payload.payload === \"object\" &&\n    payload.payload !== null\n      ? payload.payload\n      : undefined\n\n  let configLabelKey: string = key\n\n  if (\n    key in payload &&\n    typeof payload[key as keyof typeof payload] === \"string\"\n  ) {\n    configLabelKey = payload[key as keyof typeof payload] as string\n  } else if (\n    payloadPayload &&\n    key in payloadPayload &&\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\n  ) {\n    configLabelKey = payloadPayload[\n      key as keyof typeof payloadPayload\n    ] as string\n  }\n\n  return configLabelKey in config\n    ? config[configLabelKey]\n    : config[key as keyof typeof config]\n}\n\nexport {\n  ChartContainer,\n  ChartTooltip,\n  ChartTooltipContent,\n  ChartLegend,\n  ChartLegendContent,\n  ChartStyle,\n}\n","size_bytes":10481},"client/src/components/ui/checkbox.tsx":{"content":"import * as React from \"react\"\nimport * as CheckboxPrimitive from \"@radix-ui/react-checkbox\"\nimport { Check } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Checkbox = React.forwardRef<\n  React.ElementRef<typeof CheckboxPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof CheckboxPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <CheckboxPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"peer h-4 w-4 shrink-0 rounded-sm border border-primary ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=checked]:text-primary-foreground\",\n      className\n    )}\n    {...props}\n  >\n    <CheckboxPrimitive.Indicator\n      className={cn(\"flex items-center justify-center text-current\")}\n    >\n      <Check className=\"h-4 w-4\" />\n    </CheckboxPrimitive.Indicator>\n  </CheckboxPrimitive.Root>\n))\nCheckbox.displayName = CheckboxPrimitive.Root.displayName\n\nexport { Checkbox }\n","size_bytes":1056},"client/src/components/ui/collapsible.tsx":{"content":"\"use client\"\n\nimport * as CollapsiblePrimitive from \"@radix-ui/react-collapsible\"\n\nconst Collapsible = CollapsiblePrimitive.Root\n\nconst CollapsibleTrigger = CollapsiblePrimitive.CollapsibleTrigger\n\nconst CollapsibleContent = CollapsiblePrimitive.CollapsibleContent\n\nexport { Collapsible, CollapsibleTrigger, CollapsibleContent }\n","size_bytes":329},"client/src/components/ui/command.tsx":{"content":"import * as React from \"react\"\nimport { type DialogProps } from \"@radix-ui/react-dialog\"\nimport { Command as CommandPrimitive } from \"cmdk\"\nimport { Search } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Dialog, DialogContent } from \"@/components/ui/dialog\"\n\nconst Command = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive\n    ref={ref}\n    className={cn(\n      \"flex h-full w-full flex-col overflow-hidden rounded-md bg-popover text-popover-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nCommand.displayName = CommandPrimitive.displayName\n\nconst CommandDialog = ({ children, ...props }: DialogProps) => {\n  return (\n    <Dialog {...props}>\n      <DialogContent className=\"overflow-hidden p-0 shadow-lg\">\n        <Command className=\"[&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground [&_[cmdk-group]:not([hidden])_~[cmdk-group]]:pt-0 [&_[cmdk-group]]:px-2 [&_[cmdk-input-wrapper]_svg]:h-5 [&_[cmdk-input-wrapper]_svg]:w-5 [&_[cmdk-input]]:h-12 [&_[cmdk-item]]:px-2 [&_[cmdk-item]]:py-3 [&_[cmdk-item]_svg]:h-5 [&_[cmdk-item]_svg]:w-5\">\n          {children}\n        </Command>\n      </DialogContent>\n    </Dialog>\n  )\n}\n\nconst CommandInput = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Input>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Input>\n>(({ className, ...props }, ref) => (\n  <div className=\"flex items-center border-b px-3\" cmdk-input-wrapper=\"\">\n    <Search className=\"mr-2 h-4 w-4 shrink-0 opacity-50\" />\n    <CommandPrimitive.Input\n      ref={ref}\n      className={cn(\n        \"flex h-11 w-full rounded-md bg-transparent py-3 text-sm outline-none placeholder:text-muted-foreground disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    />\n  </div>\n))\n\nCommandInput.displayName = CommandPrimitive.Input.displayName\n\nconst CommandList = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.List\n    ref={ref}\n    className={cn(\"max-h-[300px] overflow-y-auto overflow-x-hidden\", className)}\n    {...props}\n  />\n))\n\nCommandList.displayName = CommandPrimitive.List.displayName\n\nconst CommandEmpty = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Empty>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Empty>\n>((props, ref) => (\n  <CommandPrimitive.Empty\n    ref={ref}\n    className=\"py-6 text-center text-sm\"\n    {...props}\n  />\n))\n\nCommandEmpty.displayName = CommandPrimitive.Empty.displayName\n\nconst CommandGroup = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Group>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Group>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Group\n    ref={ref}\n    className={cn(\n      \"overflow-hidden p-1 text-foreground [&_[cmdk-group-heading]]:px-2 [&_[cmdk-group-heading]]:py-1.5 [&_[cmdk-group-heading]]:text-xs [&_[cmdk-group-heading]]:font-medium [&_[cmdk-group-heading]]:text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandGroup.displayName = CommandPrimitive.Group.displayName\n\nconst CommandSeparator = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nCommandSeparator.displayName = CommandPrimitive.Separator.displayName\n\nconst CommandItem = React.forwardRef<\n  React.ElementRef<typeof CommandPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof CommandPrimitive.Item>\n>(({ className, ...props }, ref) => (\n  <CommandPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default gap-2 select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none data-[disabled=true]:pointer-events-none data-[selected='true']:bg-accent data-[selected=true]:text-accent-foreground data-[disabled=true]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      className\n    )}\n    {...props}\n  />\n))\n\nCommandItem.displayName = CommandPrimitive.Item.displayName\n\nconst CommandShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nCommandShortcut.displayName = \"CommandShortcut\"\n\nexport {\n  Command,\n  CommandDialog,\n  CommandInput,\n  CommandList,\n  CommandEmpty,\n  CommandGroup,\n  CommandItem,\n  CommandShortcut,\n  CommandSeparator,\n}\n","size_bytes":4885},"client/src/components/ui/contact-cta.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, Calendar, MessageCircle } from \"lucide-react\";\n\ninterface ContactCTAProps {\n  className?: string;\n  onBookCall?: () => void;\n  onSendMessage?: () => void;\n}\n\nexport function ContactCTA({\n  className,\n  onBookCall,\n  onSendMessage\n}: ContactCTAProps) {\n  const [isVisible, setIsVisible] = useState(false);\n  const [isDismissed, setIsDismissed] = useState(false);\n\n  useEffect(() => {\n    // Check if user previously dismissed\n    const dismissed = localStorage.getItem('contact-cta-dismissed');\n    if (dismissed) {\n      setIsDismissed(true);\n      return;\n    }\n\n    // Show after scrolling down a bit\n    const handleScroll = () => {\n      const scrolled = window.scrollY > 300;\n      setIsVisible(scrolled);\n    };\n\n    window.addEventListener('scroll', handleScroll);\n    return () => window.removeEventListener('scroll', handleScroll);\n  }, []);\n\n  const handleDismiss = () => {\n    setIsDismissed(true);\n    localStorage.setItem('contact-cta-dismissed', 'true');\n  };\n\n  if (isDismissed || !isVisible) {\n    return null;\n  }\n\n  return (\n    <div\n      className={cn(\n        \"fixed bottom-0 left-0 right-0 z-50 md:hidden\",\n        \"bg-surface border-t border-border shadow-hover\",\n        \"transform transition-transform duration-med ease-smooth\",\n        isVisible ? \"translate-y-0\" : \"translate-y-full\",\n        className\n      )}\n      data-testid=\"contact-cta-mobile\"\n    >\n      <div className=\"px-4 py-3\">\n        <div className=\"flex items-center justify-between gap-3\">\n          <div className=\"flex-1 min-w-0\">\n            <div className=\"text-sm font-medium text-foreground leading-tight\">\n              Ready to discuss your project?\n            </div>\n            <div className=\"text-xs text-muted-foreground mt-0.5\">\n              Response within 24h • No sales fluff\n            </div>\n          </div>\n\n          <div className=\"flex items-center gap-2\">\n            <Button\n              size=\"sm\"\n              variant=\"outline\"\n              onClick={onSendMessage}\n              className=\"h-8 px-3 text-xs\"\n              data-testid=\"cta-send-message\"\n            >\n              <MessageCircle className=\"h-3 w-3 mr-1\" />\n              Message\n            </Button>\n\n            <Button\n              size=\"sm\"\n              onClick={onBookCall}\n              className=\"h-8 px-3 text-xs\"\n              data-testid=\"cta-book-call\"\n            >\n              <Calendar className=\"h-3 w-3 mr-1\" />\n              Book Call\n            </Button>\n\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={handleDismiss}\n              className=\"h-8 w-8 p-0 text-muted-foreground hover:text-foreground\"\n              data-testid=\"cta-dismiss\"\n            >\n              <X className=\"h-4 w-4\" />\n              <span className=\"sr-only\">Dismiss</span>\n            </Button>\n          </div>\n        </div>\n      </div>\n    </div>\n  );\n}\n\n// Desktop version - can be used in hero or other sections\nexport function ContactCTADesktop({\n  className,\n  title = \"Let's build something exceptional together\",\n  subtitle = \"Book a 15-min walkthrough and see how I can help accelerate your growth\",\n  onBookCall,\n  onSendMessage\n}: {\n  className?: string;\n  title?: string;\n  subtitle?: string;\n  onBookCall?: () => void;\n  onSendMessage?: () => void;\n}) {\n  return (\n    <div\n      className={cn(\n        \"bg-gradient-to-br from-primary/5 to-primary/10 border border-primary/20 rounded-card p-6\",\n        className\n      )}\n      data-testid=\"contact-cta-desktop\"\n    >\n      <div className=\"text-center max-w-md mx-auto space-y-4\">\n        <div>\n          <h3 className=\"font-display font-semibold text-lg text-foreground leading-tight\">\n            {title}\n          </h3>\n          <p className=\"text-sm text-muted-foreground mt-2 leading-relaxed\">\n            {subtitle}\n          </p>\n        </div>\n\n        <div className=\"flex flex-col sm:flex-row gap-3 justify-center\">\n          <Button\n            onClick={onBookCall}\n            className=\"flex-1 sm:flex-none\"\n            data-testid=\"desktop-cta-book-call\"\n          >\n            <Calendar className=\"h-4 w-4 mr-2\" />\n            Book a Call\n          </Button>\n          \n          <Button\n            variant=\"outline\"\n            onClick={onSendMessage}\n            className=\"flex-1 sm:flex-none\"\n            data-testid=\"desktop-cta-send-message\"\n          >\n            <MessageCircle className=\"h-4 w-4 mr-2\" />\n            Send Message\n          </Button>\n        </div>\n\n        <p className=\"text-xs text-muted-foreground\">\n          Response within 24h • Zero spam • Direct access\n        </p>\n      </div>\n    </div>\n  );\n}","size_bytes":4803},"client/src/components/ui/context-menu.tsx":{"content":"import * as React from \"react\"\nimport * as ContextMenuPrimitive from \"@radix-ui/react-context-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ContextMenu = ContextMenuPrimitive.Root\n\nconst ContextMenuTrigger = ContextMenuPrimitive.Trigger\n\nconst ContextMenuGroup = ContextMenuPrimitive.Group\n\nconst ContextMenuPortal = ContextMenuPrimitive.Portal\n\nconst ContextMenuSub = ContextMenuPrimitive.Sub\n\nconst ContextMenuRadioGroup = ContextMenuPrimitive.RadioGroup\n\nconst ContextMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <ContextMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </ContextMenuPrimitive.SubTrigger>\n))\nContextMenuSubTrigger.displayName = ContextMenuPrimitive.SubTrigger.displayName\n\nconst ContextMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuSubContent.displayName = ContextMenuPrimitive.SubContent.displayName\n\nconst ContextMenuContent = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Portal>\n    <ContextMenuPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"z-50 max-h-[--radix-context-menu-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md animate-in fade-in-80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-context-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </ContextMenuPrimitive.Portal>\n))\nContextMenuContent.displayName = ContextMenuPrimitive.Content.displayName\n\nconst ContextMenuItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuItem.displayName = ContextMenuPrimitive.Item.displayName\n\nconst ContextMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <ContextMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.CheckboxItem>\n))\nContextMenuCheckboxItem.displayName =\n  ContextMenuPrimitive.CheckboxItem.displayName\n\nconst ContextMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <ContextMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <ContextMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </ContextMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </ContextMenuPrimitive.RadioItem>\n))\nContextMenuRadioItem.displayName = ContextMenuPrimitive.RadioItem.displayName\n\nconst ContextMenuLabel = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <ContextMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold text-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nContextMenuLabel.displayName = ContextMenuPrimitive.Label.displayName\n\nconst ContextMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof ContextMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof ContextMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <ContextMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-border\", className)}\n    {...props}\n  />\n))\nContextMenuSeparator.displayName = ContextMenuPrimitive.Separator.displayName\n\nconst ContextMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nContextMenuShortcut.displayName = \"ContextMenuShortcut\"\n\nexport {\n  ContextMenu,\n  ContextMenuTrigger,\n  ContextMenuContent,\n  ContextMenuItem,\n  ContextMenuCheckboxItem,\n  ContextMenuRadioItem,\n  ContextMenuLabel,\n  ContextMenuSeparator,\n  ContextMenuShortcut,\n  ContextMenuGroup,\n  ContextMenuPortal,\n  ContextMenuSub,\n  ContextMenuSubContent,\n  ContextMenuSubTrigger,\n  ContextMenuRadioGroup,\n}\n","size_bytes":7428},"client/src/components/ui/dialog.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as DialogPrimitive from \"@radix-ui/react-dialog\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Dialog = DialogPrimitive.Root\n\nconst DialogTrigger = DialogPrimitive.Trigger\n\nconst DialogPortal = DialogPrimitive.Portal\n\nconst DialogClose = DialogPrimitive.Close\n\nconst DialogOverlay = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Overlay\n    ref={ref}\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogOverlay.displayName = DialogPrimitive.Overlay.displayName\n\nconst DialogContent = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DialogPortal>\n    <DialogOverlay />\n    <DialogPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed left-[50%] top-[50%] z-50 grid w-full max-w-lg translate-x-[-50%] translate-y-[-50%] gap-4 border bg-background p-6 shadow-lg duration-200 data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[state=closed]:slide-out-to-left-1/2 data-[state=closed]:slide-out-to-top-[48%] data-[state=open]:slide-in-from-left-1/2 data-[state=open]:slide-in-from-top-[48%] sm:rounded-lg\",\n        className\n      )}\n      {...props}\n    >\n      {children}\n      <DialogPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-accent data-[state=open]:text-muted-foreground\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </DialogPrimitive.Close>\n    </DialogPrimitive.Content>\n  </DialogPortal>\n))\nDialogContent.displayName = DialogPrimitive.Content.displayName\n\nconst DialogHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-1.5 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogHeader.displayName = \"DialogHeader\"\n\nconst DialogFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nDialogFooter.displayName = \"DialogFooter\"\n\nconst DialogTitle = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDialogTitle.displayName = DialogPrimitive.Title.displayName\n\nconst DialogDescription = React.forwardRef<\n  React.ElementRef<typeof DialogPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DialogPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DialogPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDialogDescription.displayName = DialogPrimitive.Description.displayName\n\nexport {\n  Dialog,\n  DialogPortal,\n  DialogOverlay,\n  DialogClose,\n  DialogTrigger,\n  DialogContent,\n  DialogHeader,\n  DialogFooter,\n  DialogTitle,\n  DialogDescription,\n}\n","size_bytes":3848},"client/src/components/ui/drawer.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport { Drawer as DrawerPrimitive } from \"vaul\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Drawer = ({\n  shouldScaleBackground = true,\n  ...props\n}: React.ComponentProps<typeof DrawerPrimitive.Root>) => (\n  <DrawerPrimitive.Root\n    shouldScaleBackground={shouldScaleBackground}\n    {...props}\n  />\n)\nDrawer.displayName = \"Drawer\"\n\nconst DrawerTrigger = DrawerPrimitive.Trigger\n\nconst DrawerPortal = DrawerPrimitive.Portal\n\nconst DrawerClose = DrawerPrimitive.Close\n\nconst DrawerOverlay = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Overlay\n    ref={ref}\n    className={cn(\"fixed inset-0 z-50 bg-black/80\", className)}\n    {...props}\n  />\n))\nDrawerOverlay.displayName = DrawerPrimitive.Overlay.displayName\n\nconst DrawerContent = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Content>\n>(({ className, children, ...props }, ref) => (\n  <DrawerPortal>\n    <DrawerOverlay />\n    <DrawerPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"fixed inset-x-0 bottom-0 z-50 mt-24 flex h-auto flex-col rounded-t-[10px] border bg-background\",\n        className\n      )}\n      {...props}\n    >\n      <div className=\"mx-auto mt-4 h-2 w-[100px] rounded-full bg-muted\" />\n      {children}\n    </DrawerPrimitive.Content>\n  </DrawerPortal>\n))\nDrawerContent.displayName = \"DrawerContent\"\n\nconst DrawerHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"grid gap-1.5 p-4 text-center sm:text-left\", className)}\n    {...props}\n  />\n)\nDrawerHeader.displayName = \"DrawerHeader\"\n\nconst DrawerFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\"mt-auto flex flex-col gap-2 p-4\", className)}\n    {...props}\n  />\n)\nDrawerFooter.displayName = \"DrawerFooter\"\n\nconst DrawerTitle = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Title\n    ref={ref}\n    className={cn(\n      \"text-lg font-semibold leading-none tracking-tight\",\n      className\n    )}\n    {...props}\n  />\n))\nDrawerTitle.displayName = DrawerPrimitive.Title.displayName\n\nconst DrawerDescription = React.forwardRef<\n  React.ElementRef<typeof DrawerPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof DrawerPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <DrawerPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nDrawerDescription.displayName = DrawerPrimitive.Description.displayName\n\nexport {\n  Drawer,\n  DrawerPortal,\n  DrawerOverlay,\n  DrawerTrigger,\n  DrawerClose,\n  DrawerContent,\n  DrawerHeader,\n  DrawerFooter,\n  DrawerTitle,\n  DrawerDescription,\n}\n","size_bytes":3021},"client/src/components/ui/dropdown-menu.tsx":{"content":"import * as React from \"react\"\nimport * as DropdownMenuPrimitive from \"@radix-ui/react-dropdown-menu\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst DropdownMenu = DropdownMenuPrimitive.Root\n\nconst DropdownMenuTrigger = DropdownMenuPrimitive.Trigger\n\nconst DropdownMenuGroup = DropdownMenuPrimitive.Group\n\nconst DropdownMenuPortal = DropdownMenuPrimitive.Portal\n\nconst DropdownMenuSub = DropdownMenuPrimitive.Sub\n\nconst DropdownMenuRadioGroup = DropdownMenuPrimitive.RadioGroup\n\nconst DropdownMenuSubTrigger = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent data-[state=open]:bg-accent [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto\" />\n  </DropdownMenuPrimitive.SubTrigger>\n))\nDropdownMenuSubTrigger.displayName =\n  DropdownMenuPrimitive.SubTrigger.displayName\n\nconst DropdownMenuSubContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuSubContent.displayName =\n  DropdownMenuPrimitive.SubContent.displayName\n\nconst DropdownMenuContent = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <DropdownMenuPrimitive.Portal>\n    <DropdownMenuPrimitive.Content\n      ref={ref}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 max-h-[var(--radix-dropdown-menu-content-available-height)] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-dropdown-menu-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </DropdownMenuPrimitive.Portal>\n))\nDropdownMenuContent.displayName = DropdownMenuPrimitive.Content.displayName\n\nconst DropdownMenuItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center gap-2 rounded-sm px-2 py-1.5 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50 [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuItem.displayName = DropdownMenuPrimitive.Item.displayName\n\nconst DropdownMenuCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <DropdownMenuPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.CheckboxItem>\n))\nDropdownMenuCheckboxItem.displayName =\n  DropdownMenuPrimitive.CheckboxItem.displayName\n\nconst DropdownMenuRadioItem = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <DropdownMenuPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none transition-colors focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <DropdownMenuPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </DropdownMenuPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </DropdownMenuPrimitive.RadioItem>\n))\nDropdownMenuRadioItem.displayName = DropdownMenuPrimitive.RadioItem.displayName\n\nconst DropdownMenuLabel = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <DropdownMenuPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nDropdownMenuLabel.displayName = DropdownMenuPrimitive.Label.displayName\n\nconst DropdownMenuSeparator = React.forwardRef<\n  React.ElementRef<typeof DropdownMenuPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof DropdownMenuPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <DropdownMenuPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nDropdownMenuSeparator.displayName = DropdownMenuPrimitive.Separator.displayName\n\nconst DropdownMenuShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\"ml-auto text-xs tracking-widest opacity-60\", className)}\n      {...props}\n    />\n  )\n}\nDropdownMenuShortcut.displayName = \"DropdownMenuShortcut\"\n\nexport {\n  DropdownMenu,\n  DropdownMenuTrigger,\n  DropdownMenuContent,\n  DropdownMenuItem,\n  DropdownMenuCheckboxItem,\n  DropdownMenuRadioItem,\n  DropdownMenuLabel,\n  DropdownMenuSeparator,\n  DropdownMenuShortcut,\n  DropdownMenuGroup,\n  DropdownMenuPortal,\n  DropdownMenuSub,\n  DropdownMenuSubContent,\n  DropdownMenuSubTrigger,\n  DropdownMenuRadioGroup,\n}\n","size_bytes":7609},"client/src/components/ui/evidence-gallery.tsx":{"content":"import { useState, useCallback, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Dialog, DialogContent, DialogTrigger } from \"@/components/ui/dialog\";\nimport { Button } from \"@/components/ui/button\";\nimport { X, ChevronLeft, ChevronRight, ZoomIn, Download } from \"lucide-react\";\n\nexport interface EvidenceItem {\n  id: string;\n  src: string;\n  alt: string;\n  caption?: string;\n  type: \"image\" | \"gif\" | \"video\";\n  thumbnail?: string;\n}\n\ninterface EvidenceGalleryProps {\n  items: EvidenceItem[];\n  columns?: 2 | 3 | 4;\n  className?: string;\n}\n\nexport function EvidenceGallery({ \n  items, \n  columns = 3, \n  className \n}: EvidenceGalleryProps) {\n  const [selectedIndex, setSelectedIndex] = useState<number | null>(null);\n  const [isOpen, setIsOpen] = useState(false);\n\n  const gridCols = {\n    2: \"grid-cols-1 md:grid-cols-2\",\n    3: \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3\", \n    4: \"grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4\"\n  };\n\n  const openLightbox = useCallback((index: number) => {\n    setSelectedIndex(index);\n    setIsOpen(true);\n  }, []);\n\n  const closeLightbox = useCallback(() => {\n    setIsOpen(false);\n    setSelectedIndex(null);\n  }, []);\n\n  const goToPrevious = useCallback(() => {\n    setSelectedIndex(prev => \n      prev === null ? null : prev === 0 ? items.length - 1 : prev - 1\n    );\n  }, [items.length]);\n\n  const goToNext = useCallback(() => {\n    setSelectedIndex(prev => \n      prev === null ? null : prev === items.length - 1 ? 0 : prev + 1\n    );\n  }, [items.length]);\n\n  // Keyboard navigation\n  useEffect(() => {\n    const handleKeyDown = (e: KeyboardEvent) => {\n      if (!isOpen) return;\n\n      switch (e.key) {\n        case 'Escape':\n          e.preventDefault();\n          closeLightbox();\n          break;\n        case 'ArrowLeft':\n          e.preventDefault();\n          goToPrevious();\n          break;\n        case 'ArrowRight':\n          e.preventDefault();\n          goToNext();\n          break;\n      }\n    };\n\n    document.addEventListener('keydown', handleKeyDown);\n    return () => document.removeEventListener('keydown', handleKeyDown);\n  }, [isOpen, closeLightbox, goToPrevious, goToNext]);\n\n  const currentItem = selectedIndex !== null ? items[selectedIndex] : null;\n\n  return (\n    <>\n      <div \n        className={cn(\n          \"grid gap-4\",\n          gridCols[columns],\n          className\n        )}\n        data-testid=\"evidence-gallery\"\n      >\n        {items.map((item, index) => (\n          <GalleryThumbnail\n            key={item.id}\n            item={item}\n            index={index}\n            onClick={() => openLightbox(index)}\n          />\n        ))}\n      </div>\n\n      <Dialog open={isOpen} onOpenChange={setIsOpen}>\n        <DialogContent className=\"max-w-5xl p-0 bg-black/95 border-none\">\n          <div className=\"relative h-[90vh] w-full flex items-center justify-center\">\n            {/* Close button */}\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={closeLightbox}\n              className=\"absolute top-4 right-4 z-50 text-white hover:bg-white/20\"\n              data-testid=\"lightbox-close\"\n            >\n              <X className=\"h-5 w-5\" />\n              <span className=\"sr-only\">Close</span>\n            </Button>\n\n            {/* Navigation buttons */}\n            {items.length > 1 && (\n              <>\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={goToPrevious}\n                  className=\"absolute left-4 top-1/2 -translate-y-1/2 z-50 text-white hover:bg-white/20\"\n                  data-testid=\"lightbox-previous\"\n                >\n                  <ChevronLeft className=\"h-6 w-6\" />\n                  <span className=\"sr-only\">Previous</span>\n                </Button>\n\n                <Button\n                  variant=\"ghost\"\n                  size=\"sm\"\n                  onClick={goToNext}\n                  className=\"absolute right-4 top-1/2 -translate-y-1/2 z-50 text-white hover:bg-white/20\"\n                  data-testid=\"lightbox-next\"\n                >\n                  <ChevronRight className=\"h-6 w-6\" />\n                  <span className=\"sr-only\">Next</span>\n                </Button>\n              </>\n            )}\n\n            {/* Main content */}\n            {currentItem && (\n              <div className=\"w-full h-full flex flex-col items-center justify-center p-8\">\n                <div className=\"flex-1 flex items-center justify-center w-full\">\n                  {currentItem.type === 'video' ? (\n                    <video\n                      src={currentItem.src}\n                      controls\n                      className=\"max-w-full max-h-full object-contain\"\n                      data-testid=\"lightbox-video\"\n                    />\n                  ) : (\n                    <img\n                      src={currentItem.src}\n                      alt={currentItem.alt}\n                      className=\"max-w-full max-h-full object-contain\"\n                      data-testid=\"lightbox-image\"\n                    />\n                  )}\n                </div>\n\n                {/* Caption and controls */}\n                {currentItem.caption && (\n                  <div className=\"mt-4 text-center text-white/90 max-w-2xl\">\n                    <p className=\"text-sm leading-relaxed\">{currentItem.caption}</p>\n                  </div>\n                )}\n\n                {/* Bottom controls */}\n                <div className=\"flex items-center justify-center gap-4 mt-4\">\n                  <span className=\"text-white/60 text-sm\">\n                    {selectedIndex! + 1} of {items.length}\n                  </span>\n                  \n                  <Button\n                    variant=\"ghost\"\n                    size=\"sm\"\n                    onClick={() => window.open(currentItem.src, '_blank')}\n                    className=\"text-white hover:bg-white/20\"\n                    data-testid=\"lightbox-download\"\n                  >\n                    <Download className=\"h-4 w-4 mr-1\" />\n                    Download\n                  </Button>\n                </div>\n              </div>\n            )}\n          </div>\n        </DialogContent>\n      </Dialog>\n    </>\n  );\n}\n\ninterface GalleryThumbnailProps {\n  item: EvidenceItem;\n  index: number;\n  onClick: () => void;\n}\n\nfunction GalleryThumbnail({ item, index, onClick }: GalleryThumbnailProps) {\n  return (\n    <div\n      className=\"group relative aspect-video bg-muted rounded-lg overflow-hidden cursor-pointer border border-border\"\n      onClick={onClick}\n      data-testid={`gallery-thumbnail-${index}`}\n    >\n      <img\n        src={item.thumbnail || item.src}\n        alt={item.alt}\n        className=\"w-full h-full object-cover transition-transform duration-med ease-smooth group-hover:scale-105\"\n      />\n      \n      {/* Overlay */}\n      <div className=\"absolute inset-0 bg-black/0 group-hover:bg-black/20 transition-colors duration-med ease-smooth flex items-center justify-center\">\n        <div className=\"opacity-0 group-hover:opacity-100 transition-opacity duration-med ease-smooth\">\n          <div className=\"bg-white/90 rounded-full p-2\">\n            <ZoomIn className=\"h-5 w-5 text-gray-800\" />\n          </div>\n        </div>\n      </div>\n\n      {/* Type indicator */}\n      {item.type !== 'image' && (\n        <div className=\"absolute top-2 right-2 bg-black/70 text-white text-xs px-2 py-1 rounded\">\n          {item.type.toUpperCase()}\n        </div>\n      )}\n\n      {/* Caption preview */}\n      {item.caption && (\n        <div className=\"absolute bottom-0 left-0 right-0 bg-gradient-to-t from-black/70 to-transparent p-3\">\n          <p className=\"text-white text-sm line-clamp-2 leading-tight\">\n            {item.caption}\n          </p>\n        </div>\n      )}\n    </div>\n  );\n}","size_bytes":7837},"client/src/components/ui/filter-chips.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { useCallback, useEffect, useState } from \"react\";\nimport { Button } from \"@/components/ui/button\";\nimport { ScrollArea } from \"@/components/ui/scroll-area\";\n\nexport interface FilterOption {\n  id: string;\n  label: string;\n  count?: number;\n}\n\ninterface FilterChipsProps {\n  options: FilterOption[];\n  value?: string[];\n  onValueChange?: (value: string[]) => void;\n  multiSelect?: boolean;\n  className?: string;\n  urlSync?: {\n    paramName: string;\n  };\n}\n\nexport function FilterChips({\n  options,\n  value = [],\n  onValueChange,\n  multiSelect = false,\n  className,\n  urlSync\n}: FilterChipsProps) {\n  const [selectedIds, setSelectedIds] = useState<string[]>(value);\n\n  // Initialize from URL on mount\n  useEffect(() => {\n    if (urlSync) {\n      const urlParams = new URLSearchParams(window.location.search);\n      const urlValue = urlParams.get(urlSync.paramName);\n      if (urlValue) {\n        const ids = urlValue.split(',').filter(Boolean);\n        setSelectedIds(ids);\n        onValueChange?.(ids);\n      }\n    }\n  }, [urlSync, onValueChange]);\n\n  // Sync with external value changes\n  useEffect(() => {\n    setSelectedIds(value);\n  }, [value]);\n\n  // Update URL when selection changes\n  useEffect(() => {\n    if (urlSync) {\n      const urlParams = new URLSearchParams(window.location.search);\n      if (selectedIds.length > 0) {\n        urlParams.set(urlSync.paramName, selectedIds.join(','));\n      } else {\n        urlParams.delete(urlSync.paramName);\n      }\n      \n      // Prevent trailing \"?\" when no params\n      const newUrl = urlParams.toString() \n        ? `${window.location.pathname}?${urlParams.toString()}`\n        : window.location.pathname;\n      \n      window.history.replaceState({}, '', newUrl);\n    }\n  }, [selectedIds, urlSync]);\n\n  const handleToggle = useCallback((id: string) => {\n    setSelectedIds(prev => {\n      let newValue: string[];\n      \n      if (multiSelect) {\n        newValue = prev.includes(id) \n          ? prev.filter(item => item !== id)\n          : [...prev, id];\n      } else {\n        newValue = prev.includes(id) ? [] : [id];\n      }\n      \n      onValueChange?.(newValue);\n      return newValue;\n    });\n  }, [multiSelect, onValueChange]);\n\n  const clearAll = useCallback(() => {\n    setSelectedIds([]);\n    onValueChange?.([]);\n  }, [onValueChange]);\n\n  return (\n    <div \n      className={cn(\"relative\", className)}\n      data-testid=\"filter-chips\"\n    >\n      <ScrollArea className=\"w-full pb-2\">\n        <div className=\"flex items-center gap-2 px-1\">\n          {selectedIds.length > 0 && (\n            <Button\n              variant=\"ghost\"\n              size=\"sm\"\n              onClick={clearAll}\n              className=\"text-xs h-8 px-3 text-muted-foreground hover:text-foreground\"\n              data-testid=\"filter-clear-all\"\n            >\n              Clear all\n            </Button>\n          )}\n          \n          <div className=\"flex gap-2 flex-nowrap\">\n            {options.map((option) => {\n              const isSelected = selectedIds.includes(option.id);\n              return (\n                <Button\n                  key={option.id}\n                  variant={isSelected ? \"default\" : \"outline\"}\n                  size=\"sm\"\n                  onClick={() => handleToggle(option.id)}\n                  className={cn(\n                    \"h-8 px-3 text-xs font-medium rounded-chip transition-all duration-fast ease-smooth\",\n                    \"focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n                    \"whitespace-nowrap flex-shrink-0\",\n                    isSelected && [\n                      \"bg-primary text-primary-foreground shadow-sm\",\n                      \"hover:bg-primary/90\"\n                    ],\n                    !isSelected && [\n                      \"bg-transparent border-border hover:bg-muted\",\n                      \"hover:border-primary/40 hover:text-foreground\"\n                    ]\n                  )}\n                  data-testid={`filter-chip-${option.id}`}\n                  aria-pressed={isSelected}\n                >\n                  {option.label}\n                  {option.count !== undefined && (\n                    <span className={cn(\n                      \"ml-1.5 text-xs opacity-80\",\n                      isSelected ? \"text-primary-foreground/80\" : \"text-muted-foreground\"\n                    )}>\n                      {option.count}\n                    </span>\n                  )}\n                </Button>\n              );\n            })}\n          </div>\n        </div>\n      </ScrollArea>\n    </div>\n  );\n}\n\n// Helper hook for URL synchronization  \nexport function useFilterUrl(paramName: string) {\n  return { paramName };\n}","size_bytes":4719},"client/src/components/ui/form.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport {\n  Controller,\n  FormProvider,\n  useFormContext,\n  type ControllerProps,\n  type FieldPath,\n  type FieldValues,\n} from \"react-hook-form\"\n\nimport { cn } from \"@/lib/utils\"\nimport { Label } from \"@/components/ui/label\"\n\nconst Form = FormProvider\n\ntype FormFieldContextValue<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n> = {\n  name: TName\n}\n\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\n  {} as FormFieldContextValue\n)\n\nconst FormField = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\n>({\n  ...props\n}: ControllerProps<TFieldValues, TName>) => {\n  return (\n    <FormFieldContext.Provider value={{ name: props.name }}>\n      <Controller {...props} />\n    </FormFieldContext.Provider>\n  )\n}\n\nconst useFormField = () => {\n  const fieldContext = React.useContext(FormFieldContext)\n  const itemContext = React.useContext(FormItemContext)\n  const { getFieldState, formState } = useFormContext()\n\n  const fieldState = getFieldState(fieldContext.name, formState)\n\n  if (!fieldContext) {\n    throw new Error(\"useFormField should be used within <FormField>\")\n  }\n\n  const { id } = itemContext\n\n  return {\n    id,\n    name: fieldContext.name,\n    formItemId: `${id}-form-item`,\n    formDescriptionId: `${id}-form-item-description`,\n    formMessageId: `${id}-form-item-message`,\n    ...fieldState,\n  }\n}\n\ntype FormItemContextValue = {\n  id: string\n}\n\nconst FormItemContext = React.createContext<FormItemContextValue>(\n  {} as FormItemContextValue\n)\n\nconst FormItem = React.forwardRef<\n  HTMLDivElement,\n  React.HTMLAttributes<HTMLDivElement>\n>(({ className, ...props }, ref) => {\n  const id = React.useId()\n\n  return (\n    <FormItemContext.Provider value={{ id }}>\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\n    </FormItemContext.Provider>\n  )\n})\nFormItem.displayName = \"FormItem\"\n\nconst FormLabel = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  const { error, formItemId } = useFormField()\n\n  return (\n    <Label\n      ref={ref}\n      className={cn(error && \"text-destructive\", className)}\n      htmlFor={formItemId}\n      {...props}\n    />\n  )\n})\nFormLabel.displayName = \"FormLabel\"\n\nconst FormControl = React.forwardRef<\n  React.ElementRef<typeof Slot>,\n  React.ComponentPropsWithoutRef<typeof Slot>\n>(({ ...props }, ref) => {\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\n\n  return (\n    <Slot\n      ref={ref}\n      id={formItemId}\n      aria-describedby={\n        !error\n          ? `${formDescriptionId}`\n          : `${formDescriptionId} ${formMessageId}`\n      }\n      aria-invalid={!!error}\n      {...props}\n    />\n  )\n})\nFormControl.displayName = \"FormControl\"\n\nconst FormDescription = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, ...props }, ref) => {\n  const { formDescriptionId } = useFormField()\n\n  return (\n    <p\n      ref={ref}\n      id={formDescriptionId}\n      className={cn(\"text-sm text-muted-foreground\", className)}\n      {...props}\n    />\n  )\n})\nFormDescription.displayName = \"FormDescription\"\n\nconst FormMessage = React.forwardRef<\n  HTMLParagraphElement,\n  React.HTMLAttributes<HTMLParagraphElement>\n>(({ className, children, ...props }, ref) => {\n  const { error, formMessageId } = useFormField()\n  const body = error ? String(error?.message ?? \"\") : children\n\n  if (!body) {\n    return null\n  }\n\n  return (\n    <p\n      ref={ref}\n      id={formMessageId}\n      className={cn(\"text-sm font-medium text-destructive\", className)}\n      {...props}\n    >\n      {body}\n    </p>\n  )\n})\nFormMessage.displayName = \"FormMessage\"\n\nexport {\n  useFormField,\n  Form,\n  FormItem,\n  FormLabel,\n  FormControl,\n  FormDescription,\n  FormMessage,\n  FormField,\n}\n","size_bytes":4120},"client/src/components/ui/hover-card.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as HoverCardPrimitive from \"@radix-ui/react-hover-card\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst HoverCard = HoverCardPrimitive.Root\n\nconst HoverCardTrigger = HoverCardPrimitive.Trigger\n\nconst HoverCardContent = React.forwardRef<\n  React.ElementRef<typeof HoverCardPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof HoverCardPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <HoverCardPrimitive.Content\n    ref={ref}\n    align={align}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 w-64 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-hover-card-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nHoverCardContent.displayName = HoverCardPrimitive.Content.displayName\n\nexport { HoverCard, HoverCardTrigger, HoverCardContent }\n","size_bytes":1251},"client/src/components/ui/input-otp.tsx":{"content":"import * as React from \"react\"\nimport { OTPInput, OTPInputContext } from \"input-otp\"\nimport { Dot } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst InputOTP = React.forwardRef<\n  React.ElementRef<typeof OTPInput>,\n  React.ComponentPropsWithoutRef<typeof OTPInput>\n>(({ className, containerClassName, ...props }, ref) => (\n  <OTPInput\n    ref={ref}\n    containerClassName={cn(\n      \"flex items-center gap-2 has-[:disabled]:opacity-50\",\n      containerClassName\n    )}\n    className={cn(\"disabled:cursor-not-allowed\", className)}\n    {...props}\n  />\n))\nInputOTP.displayName = \"InputOTP\"\n\nconst InputOTPGroup = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ className, ...props }, ref) => (\n  <div ref={ref} className={cn(\"flex items-center\", className)} {...props} />\n))\nInputOTPGroup.displayName = \"InputOTPGroup\"\n\nconst InputOTPSlot = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\"> & { index: number }\n>(({ index, className, ...props }, ref) => {\n  const inputOTPContext = React.useContext(OTPInputContext)\n  const { char, hasFakeCaret, isActive } = inputOTPContext.slots[index]\n\n  return (\n    <div\n      ref={ref}\n      className={cn(\n        \"relative flex h-10 w-10 items-center justify-center border-y border-r border-input text-sm transition-all first:rounded-l-md first:border-l last:rounded-r-md\",\n        isActive && \"z-10 ring-2 ring-ring ring-offset-background\",\n        className\n      )}\n      {...props}\n    >\n      {char}\n      {hasFakeCaret && (\n        <div className=\"pointer-events-none absolute inset-0 flex items-center justify-center\">\n          <div className=\"h-4 w-px animate-caret-blink bg-foreground duration-1000\" />\n        </div>\n      )}\n    </div>\n  )\n})\nInputOTPSlot.displayName = \"InputOTPSlot\"\n\nconst InputOTPSeparator = React.forwardRef<\n  React.ElementRef<\"div\">,\n  React.ComponentPropsWithoutRef<\"div\">\n>(({ ...props }, ref) => (\n  <div ref={ref} role=\"separator\" {...props}>\n    <Dot />\n  </div>\n))\nInputOTPSeparator.displayName = \"InputOTPSeparator\"\n\nexport { InputOTP, InputOTPGroup, InputOTPSlot, InputOTPSeparator }\n","size_bytes":2154},"client/src/components/ui/input.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Input = React.forwardRef<HTMLInputElement, React.ComponentProps<\"input\">>(\n  ({ className, type, ...props }, ref) => {\n    return (\n      <input\n        type={type}\n        className={cn(\n          \"flex h-10 w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background file:border-0 file:bg-transparent file:text-sm file:font-medium file:text-foreground placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n          className\n        )}\n        ref={ref}\n        {...props}\n      />\n    )\n  }\n)\nInput.displayName = \"Input\"\n\nexport { Input }\n","size_bytes":791},"client/src/components/ui/label.tsx":{"content":"import * as React from \"react\"\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst labelVariants = cva(\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\n)\n\nconst Label = React.forwardRef<\n  React.ElementRef<typeof LabelPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\n    VariantProps<typeof labelVariants>\n>(({ className, ...props }, ref) => (\n  <LabelPrimitive.Root\n    ref={ref}\n    className={cn(labelVariants(), className)}\n    {...props}\n  />\n))\nLabel.displayName = LabelPrimitive.Root.displayName\n\nexport { Label }\n","size_bytes":710},"client/src/components/ui/logo-wall.tsx":{"content":"import { cn } from \"@/lib/utils\";\n\nexport interface LogoItem {\n  id: string;\n  name: string;\n  src?: string;\n  sector?: string;\n  redacted?: boolean;\n}\n\ninterface LogoWallProps {\n  logos: LogoItem[];\n  title?: string;\n  className?: string;\n  variant?: \"default\" | \"compact\";\n}\n\nexport function LogoWall({ \n  logos, \n  title = \"Trusted by industry leaders\",\n  className,\n  variant = \"default\" \n}: LogoWallProps) {\n  const displayLogos = logos.slice(0, variant === \"compact\" ? 4 : 6);\n\n  return (\n    <div className={cn(\"space-y-6\", className)} data-testid=\"logo-wall\">\n      {title && (\n        <div className=\"text-center\">\n          <p className=\"text-sm text-muted-foreground font-medium\">\n            {title}\n          </p>\n        </div>\n      )}\n      \n      <div className={cn(\n        \"flex items-center justify-center gap-8 flex-wrap\",\n        variant === \"compact\" && \"gap-6\"\n      )}>\n        {displayLogos.map((logo) => (\n          <LogoItem\n            key={logo.id}\n            logo={logo}\n            variant={variant}\n          />\n        ))}\n      </div>\n    </div>\n  );\n}\n\ninterface LogoItemProps {\n  logo: LogoItem;\n  variant?: \"default\" | \"compact\";\n}\n\nfunction LogoItem({ logo, variant = \"default\" }: LogoItemProps) {\n  const size = variant === \"compact\" ? \"h-8\" : \"h-10\";\n  \n  if (logo.redacted) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center px-4 py-2 bg-muted/50 rounded border border-dashed border-muted-foreground/30 transition-all duration-fast\",\n          \"grayscale hover:grayscale-0\",\n          size\n        )}\n        data-testid={`logo-redacted-${logo.id}`}\n      >\n        <span className=\"text-xs text-muted-foreground font-medium\">\n          {logo.sector || \"Confidential\"}\n        </span>\n      </div>\n    );\n  }\n\n  if (logo.src) {\n    return (\n      <div\n        className={cn(\n          \"flex items-center justify-center transition-all duration-fast\",\n          \"grayscale hover:grayscale-0 opacity-60 hover:opacity-100\",\n          size\n        )}\n        data-testid={`logo-${logo.id}`}\n      >\n        <img\n          src={logo.src}\n          alt={`${logo.name} logo`}\n          className={cn(\"object-contain max-w-full\", size)}\n          loading=\"lazy\"\n        />\n      </div>\n    );\n  }\n\n  // Fallback text logo\n  return (\n    <div\n      className={cn(\n        \"flex items-center justify-center px-3 py-2 text-muted-foreground font-medium text-sm transition-all duration-fast\",\n        \"grayscale hover:grayscale-0 opacity-60 hover:opacity-100\",\n        size\n      )}\n      data-testid={`logo-text-${logo.id}`}\n    >\n      {logo.name}\n    </div>\n  );\n}\n\n// Preset logo collections\nexport const sampleLogos: LogoItem[] = [\n  { id: \"tech-saas\", name: \"TechSaaS Inc\", sector: \"SaaS\", redacted: true },\n  { id: \"fintech-co\", name: \"FinTech Co\", sector: \"FinTech\", redacted: true },\n  { id: \"ecommerce-brand\", name: \"E-commerce Brand\", sector: \"E-commerce\", redacted: true },\n  { id: \"enterprise-soft\", name: \"Enterprise Software\", sector: \"Enterprise\", redacted: true },\n  { id: \"healthcare-tech\", name: \"HealthTech\", sector: \"Healthcare\", redacted: true },\n  { id: \"edtech-startup\", name: \"EdTech Startup\", sector: \"Education\", redacted: true },\n];","size_bytes":3231},"client/src/components/ui/menubar.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as MenubarPrimitive from \"@radix-ui/react-menubar\"\nimport { Check, ChevronRight, Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nfunction MenubarMenu({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Menu>) {\n  return <MenubarPrimitive.Menu {...props} />\n}\n\nfunction MenubarGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Group>) {\n  return <MenubarPrimitive.Group {...props} />\n}\n\nfunction MenubarPortal({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Portal>) {\n  return <MenubarPrimitive.Portal {...props} />\n}\n\nfunction MenubarRadioGroup({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.RadioGroup>) {\n  return <MenubarPrimitive.RadioGroup {...props} />\n}\n\nfunction MenubarSub({\n  ...props\n}: React.ComponentProps<typeof MenubarPrimitive.Sub>) {\n  return <MenubarPrimitive.Sub data-slot=\"menubar-sub\" {...props} />\n}\n\nconst Menubar = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"flex h-10 items-center space-x-1 rounded-md border bg-background p-1\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubar.displayName = MenubarPrimitive.Root.displayName\n\nconst MenubarTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-3 py-1.5 text-sm font-medium outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarTrigger.displayName = MenubarPrimitive.Trigger.displayName\n\nconst MenubarSubTrigger = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubTrigger>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubTrigger> & {\n    inset?: boolean\n  }\n>(({ className, inset, children, ...props }, ref) => (\n  <MenubarPrimitive.SubTrigger\n    ref={ref}\n    className={cn(\n      \"flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[state=open]:bg-accent data-[state=open]:text-accent-foreground\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <ChevronRight className=\"ml-auto h-4 w-4\" />\n  </MenubarPrimitive.SubTrigger>\n))\nMenubarSubTrigger.displayName = MenubarPrimitive.SubTrigger.displayName\n\nconst MenubarSubContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.SubContent>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.SubContent>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.SubContent\n    ref={ref}\n    className={cn(\n      \"z-50 min-w-[8rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarSubContent.displayName = MenubarPrimitive.SubContent.displayName\n\nconst MenubarContent = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Content>\n>(\n  (\n    { className, align = \"start\", alignOffset = -4, sideOffset = 8, ...props },\n    ref\n  ) => (\n    <MenubarPrimitive.Portal>\n      <MenubarPrimitive.Content\n        ref={ref}\n        align={align}\n        alignOffset={alignOffset}\n        sideOffset={sideOffset}\n        className={cn(\n          \"z-50 min-w-[12rem] overflow-hidden rounded-md border bg-popover p-1 text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-menubar-content-transform-origin]\",\n          className\n        )}\n        {...props}\n      />\n    </MenubarPrimitive.Portal>\n  )\n)\nMenubarContent.displayName = MenubarPrimitive.Content.displayName\n\nconst MenubarItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Item> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm px-2 py-1.5 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarItem.displayName = MenubarPrimitive.Item.displayName\n\nconst MenubarCheckboxItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.CheckboxItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.CheckboxItem>\n>(({ className, children, checked, ...props }, ref) => (\n  <MenubarPrimitive.CheckboxItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    checked={checked}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.CheckboxItem>\n))\nMenubarCheckboxItem.displayName = MenubarPrimitive.CheckboxItem.displayName\n\nconst MenubarRadioItem = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.RadioItem>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.RadioItem>\n>(({ className, children, ...props }, ref) => (\n  <MenubarPrimitive.RadioItem\n    ref={ref}\n    className={cn(\n      \"relative flex cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <MenubarPrimitive.ItemIndicator>\n        <Circle className=\"h-2 w-2 fill-current\" />\n      </MenubarPrimitive.ItemIndicator>\n    </span>\n    {children}\n  </MenubarPrimitive.RadioItem>\n))\nMenubarRadioItem.displayName = MenubarPrimitive.RadioItem.displayName\n\nconst MenubarLabel = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Label> & {\n    inset?: boolean\n  }\n>(({ className, inset, ...props }, ref) => (\n  <MenubarPrimitive.Label\n    ref={ref}\n    className={cn(\n      \"px-2 py-1.5 text-sm font-semibold\",\n      inset && \"pl-8\",\n      className\n    )}\n    {...props}\n  />\n))\nMenubarLabel.displayName = MenubarPrimitive.Label.displayName\n\nconst MenubarSeparator = React.forwardRef<\n  React.ElementRef<typeof MenubarPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof MenubarPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <MenubarPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nMenubarSeparator.displayName = MenubarPrimitive.Separator.displayName\n\nconst MenubarShortcut = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLSpanElement>) => {\n  return (\n    <span\n      className={cn(\n        \"ml-auto text-xs tracking-widest text-muted-foreground\",\n        className\n      )}\n      {...props}\n    />\n  )\n}\nMenubarShortcut.displayname = \"MenubarShortcut\"\n\nexport {\n  Menubar,\n  MenubarMenu,\n  MenubarTrigger,\n  MenubarContent,\n  MenubarItem,\n  MenubarSeparator,\n  MenubarLabel,\n  MenubarCheckboxItem,\n  MenubarRadioGroup,\n  MenubarRadioItem,\n  MenubarPortal,\n  MenubarSubContent,\n  MenubarSubTrigger,\n  MenubarGroup,\n  MenubarSub,\n  MenubarShortcut,\n}\n","size_bytes":8605},"client/src/components/ui/metric-card.tsx":{"content":"interface MetricCardProps {\n  value: string;\n  label: string;\n  className?: string;\n}\n\nexport function MetricCard({ value, label, className = \"\" }: MetricCardProps) {\n  return (\n    <div className={`text-center ${className}`} data-testid={`metric-${label.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <div className=\"text-3xl font-bold text-primary\">{value}</div>\n      <div className=\"text-sm text-muted-foreground\">{label}</div>\n    </div>\n  );\n}\n","size_bytes":448},"client/src/components/ui/navigation-menu.tsx":{"content":"import * as React from \"react\"\nimport * as NavigationMenuPrimitive from \"@radix-ui/react-navigation-menu\"\nimport { cva } from \"class-variance-authority\"\nimport { ChevronDown } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst NavigationMenu = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative z-10 flex max-w-max flex-1 items-center justify-center\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <NavigationMenuViewport />\n  </NavigationMenuPrimitive.Root>\n))\nNavigationMenu.displayName = NavigationMenuPrimitive.Root.displayName\n\nconst NavigationMenuList = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.List\n    ref={ref}\n    className={cn(\n      \"group flex flex-1 list-none items-center justify-center space-x-1\",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuList.displayName = NavigationMenuPrimitive.List.displayName\n\nconst NavigationMenuItem = NavigationMenuPrimitive.Item\n\nconst navigationMenuTriggerStyle = cva(\n  \"group inline-flex h-10 w-max items-center justify-center rounded-md bg-background px-4 py-2 text-sm font-medium transition-colors hover:bg-accent hover:text-accent-foreground focus:bg-accent focus:text-accent-foreground focus:outline-none disabled:pointer-events-none disabled:opacity-50 data-[state=open]:text-accent-foreground data-[state=open]:bg-accent/50 data-[state=open]:hover:bg-accent data-[state=open]:focus:bg-accent\"\n)\n\nconst NavigationMenuTrigger = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <NavigationMenuPrimitive.Trigger\n    ref={ref}\n    className={cn(navigationMenuTriggerStyle(), \"group\", className)}\n    {...props}\n  >\n    {children}{\" \"}\n    <ChevronDown\n      className=\"relative top-[1px] ml-1 h-3 w-3 transition duration-200 group-data-[state=open]:rotate-180\"\n      aria-hidden=\"true\"\n    />\n  </NavigationMenuPrimitive.Trigger>\n))\nNavigationMenuTrigger.displayName = NavigationMenuPrimitive.Trigger.displayName\n\nconst NavigationMenuContent = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"left-0 top-0 w-full data-[motion^=from-]:animate-in data-[motion^=to-]:animate-out data-[motion^=from-]:fade-in data-[motion^=to-]:fade-out data-[motion=from-end]:slide-in-from-right-52 data-[motion=from-start]:slide-in-from-left-52 data-[motion=to-end]:slide-out-to-right-52 data-[motion=to-start]:slide-out-to-left-52 md:absolute md:w-auto \",\n      className\n    )}\n    {...props}\n  />\n))\nNavigationMenuContent.displayName = NavigationMenuPrimitive.Content.displayName\n\nconst NavigationMenuLink = NavigationMenuPrimitive.Link\n\nconst NavigationMenuViewport = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Viewport>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Viewport>\n>(({ className, ...props }, ref) => (\n  <div className={cn(\"absolute left-0 top-full flex justify-center\")}>\n    <NavigationMenuPrimitive.Viewport\n      className={cn(\n        \"origin-top-center relative mt-1.5 h-[var(--radix-navigation-menu-viewport-height)] w-full overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-lg data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-90 md:w-[var(--radix-navigation-menu-viewport-width)]\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  </div>\n))\nNavigationMenuViewport.displayName =\n  NavigationMenuPrimitive.Viewport.displayName\n\nconst NavigationMenuIndicator = React.forwardRef<\n  React.ElementRef<typeof NavigationMenuPrimitive.Indicator>,\n  React.ComponentPropsWithoutRef<typeof NavigationMenuPrimitive.Indicator>\n>(({ className, ...props }, ref) => (\n  <NavigationMenuPrimitive.Indicator\n    ref={ref}\n    className={cn(\n      \"top-full z-[1] flex h-1.5 items-end justify-center overflow-hidden data-[state=visible]:animate-in data-[state=hidden]:animate-out data-[state=hidden]:fade-out data-[state=visible]:fade-in\",\n      className\n    )}\n    {...props}\n  >\n    <div className=\"relative top-[60%] h-2 w-2 rotate-45 rounded-tl-sm bg-border shadow-md\" />\n  </NavigationMenuPrimitive.Indicator>\n))\nNavigationMenuIndicator.displayName =\n  NavigationMenuPrimitive.Indicator.displayName\n\nexport {\n  navigationMenuTriggerStyle,\n  NavigationMenu,\n  NavigationMenuList,\n  NavigationMenuItem,\n  NavigationMenuContent,\n  NavigationMenuTrigger,\n  NavigationMenuLink,\n  NavigationMenuIndicator,\n  NavigationMenuViewport,\n}\n","size_bytes":5128},"client/src/components/ui/pagination.tsx":{"content":"import * as React from \"react\"\nimport { ChevronLeft, ChevronRight, MoreHorizontal } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\nimport { ButtonProps, buttonVariants } from \"@/components/ui/button\"\n\nconst Pagination = ({ className, ...props }: React.ComponentProps<\"nav\">) => (\n  <nav\n    role=\"navigation\"\n    aria-label=\"pagination\"\n    className={cn(\"mx-auto flex w-full justify-center\", className)}\n    {...props}\n  />\n)\nPagination.displayName = \"Pagination\"\n\nconst PaginationContent = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    className={cn(\"flex flex-row items-center gap-1\", className)}\n    {...props}\n  />\n))\nPaginationContent.displayName = \"PaginationContent\"\n\nconst PaginationItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li ref={ref} className={cn(\"\", className)} {...props} />\n))\nPaginationItem.displayName = \"PaginationItem\"\n\ntype PaginationLinkProps = {\n  isActive?: boolean\n} & Pick<ButtonProps, \"size\"> &\n  React.ComponentProps<\"a\">\n\nconst PaginationLink = ({\n  className,\n  isActive,\n  size = \"icon\",\n  ...props\n}: PaginationLinkProps) => (\n  <a\n    aria-current={isActive ? \"page\" : undefined}\n    className={cn(\n      buttonVariants({\n        variant: isActive ? \"outline\" : \"ghost\",\n        size,\n      }),\n      className\n    )}\n    {...props}\n  />\n)\nPaginationLink.displayName = \"PaginationLink\"\n\nconst PaginationPrevious = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to previous page\"\n    size=\"default\"\n    className={cn(\"gap-1 pl-2.5\", className)}\n    {...props}\n  >\n    <ChevronLeft className=\"h-4 w-4\" />\n    <span>Previous</span>\n  </PaginationLink>\n)\nPaginationPrevious.displayName = \"PaginationPrevious\"\n\nconst PaginationNext = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof PaginationLink>) => (\n  <PaginationLink\n    aria-label=\"Go to next page\"\n    size=\"default\"\n    className={cn(\"gap-1 pr-2.5\", className)}\n    {...props}\n  >\n    <span>Next</span>\n    <ChevronRight className=\"h-4 w-4\" />\n  </PaginationLink>\n)\nPaginationNext.displayName = \"PaginationNext\"\n\nconst PaginationEllipsis = ({\n  className,\n  ...props\n}: React.ComponentProps<\"span\">) => (\n  <span\n    aria-hidden\n    className={cn(\"flex h-9 w-9 items-center justify-center\", className)}\n    {...props}\n  >\n    <MoreHorizontal className=\"h-4 w-4\" />\n    <span className=\"sr-only\">More pages</span>\n  </span>\n)\nPaginationEllipsis.displayName = \"PaginationEllipsis\"\n\nexport {\n  Pagination,\n  PaginationContent,\n  PaginationEllipsis,\n  PaginationItem,\n  PaginationLink,\n  PaginationNext,\n  PaginationPrevious,\n}\n","size_bytes":2751},"client/src/components/ui/popover.tsx":{"content":"import * as React from \"react\"\nimport * as PopoverPrimitive from \"@radix-ui/react-popover\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Popover = PopoverPrimitive.Root\n\nconst PopoverTrigger = PopoverPrimitive.Trigger\n\nconst PopoverContent = React.forwardRef<\n  React.ElementRef<typeof PopoverPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof PopoverPrimitive.Content>\n>(({ className, align = \"center\", sideOffset = 4, ...props }, ref) => (\n  <PopoverPrimitive.Portal>\n    <PopoverPrimitive.Content\n      ref={ref}\n      align={align}\n      sideOffset={sideOffset}\n      className={cn(\n        \"z-50 w-72 rounded-md border bg-popover p-4 text-popover-foreground shadow-md outline-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-popover-content-transform-origin]\",\n        className\n      )}\n      {...props}\n    />\n  </PopoverPrimitive.Portal>\n))\nPopoverContent.displayName = PopoverPrimitive.Content.displayName\n\nexport { Popover, PopoverTrigger, PopoverContent }\n","size_bytes":1280},"client/src/components/ui/progress.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ProgressPrimitive from \"@radix-ui/react-progress\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Progress = React.forwardRef<\n  React.ElementRef<typeof ProgressPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ProgressPrimitive.Root>\n>(({ className, value, ...props }, ref) => (\n  <ProgressPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative h-4 w-full overflow-hidden rounded-full bg-secondary\",\n      className\n    )}\n    {...props}\n  >\n    <ProgressPrimitive.Indicator\n      className=\"h-full w-full flex-1 bg-primary transition-all\"\n      style={{ transform: `translateX(-${100 - (value || 0)}%)` }}\n    />\n  </ProgressPrimitive.Root>\n))\nProgress.displayName = ProgressPrimitive.Root.displayName\n\nexport { Progress }\n","size_bytes":791},"client/src/components/ui/radio-group.tsx":{"content":"import * as React from \"react\"\nimport * as RadioGroupPrimitive from \"@radix-ui/react-radio-group\"\nimport { Circle } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst RadioGroup = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Root>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Root\n      className={cn(\"grid gap-2\", className)}\n      {...props}\n      ref={ref}\n    />\n  )\n})\nRadioGroup.displayName = RadioGroupPrimitive.Root.displayName\n\nconst RadioGroupItem = React.forwardRef<\n  React.ElementRef<typeof RadioGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof RadioGroupPrimitive.Item>\n>(({ className, ...props }, ref) => {\n  return (\n    <RadioGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        \"aspect-square h-4 w-4 rounded-full border border-primary text-primary ring-offset-background focus:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50\",\n        className\n      )}\n      {...props}\n    >\n      <RadioGroupPrimitive.Indicator className=\"flex items-center justify-center\">\n        <Circle className=\"h-2.5 w-2.5 fill-current text-current\" />\n      </RadioGroupPrimitive.Indicator>\n    </RadioGroupPrimitive.Item>\n  )\n})\nRadioGroupItem.displayName = RadioGroupPrimitive.Item.displayName\n\nexport { RadioGroup, RadioGroupItem }\n","size_bytes":1467},"client/src/components/ui/resizable.tsx":{"content":"\"use client\"\n\nimport { GripVertical } from \"lucide-react\"\nimport * as ResizablePrimitive from \"react-resizable-panels\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ResizablePanelGroup = ({\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelGroup>) => (\n  <ResizablePrimitive.PanelGroup\n    className={cn(\n      \"flex h-full w-full data-[panel-group-direction=vertical]:flex-col\",\n      className\n    )}\n    {...props}\n  />\n)\n\nconst ResizablePanel = ResizablePrimitive.Panel\n\nconst ResizableHandle = ({\n  withHandle,\n  className,\n  ...props\n}: React.ComponentProps<typeof ResizablePrimitive.PanelResizeHandle> & {\n  withHandle?: boolean\n}) => (\n  <ResizablePrimitive.PanelResizeHandle\n    className={cn(\n      \"relative flex w-px items-center justify-center bg-border after:absolute after:inset-y-0 after:left-1/2 after:w-1 after:-translate-x-1/2 focus-visible:outline-none focus-visible:ring-1 focus-visible:ring-ring focus-visible:ring-offset-1 data-[panel-group-direction=vertical]:h-px data-[panel-group-direction=vertical]:w-full data-[panel-group-direction=vertical]:after:left-0 data-[panel-group-direction=vertical]:after:h-1 data-[panel-group-direction=vertical]:after:w-full data-[panel-group-direction=vertical]:after:-translate-y-1/2 data-[panel-group-direction=vertical]:after:translate-x-0 [&[data-panel-group-direction=vertical]>div]:rotate-90\",\n      className\n    )}\n    {...props}\n  >\n    {withHandle && (\n      <div className=\"z-10 flex h-4 w-3 items-center justify-center rounded-sm border bg-border\">\n        <GripVertical className=\"h-2.5 w-2.5\" />\n      </div>\n    )}\n  </ResizablePrimitive.PanelResizeHandle>\n)\n\nexport { ResizablePanelGroup, ResizablePanel, ResizableHandle }\n","size_bytes":1723},"client/src/components/ui/scroll-area.tsx":{"content":"import * as React from \"react\"\nimport * as ScrollAreaPrimitive from \"@radix-ui/react-scroll-area\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ScrollArea = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.Root>\n>(({ className, children, ...props }, ref) => (\n  <ScrollAreaPrimitive.Root\n    ref={ref}\n    className={cn(\"relative overflow-hidden\", className)}\n    {...props}\n  >\n    <ScrollAreaPrimitive.Viewport className=\"h-full w-full rounded-[inherit]\">\n      {children}\n    </ScrollAreaPrimitive.Viewport>\n    <ScrollBar />\n    <ScrollAreaPrimitive.Corner />\n  </ScrollAreaPrimitive.Root>\n))\nScrollArea.displayName = ScrollAreaPrimitive.Root.displayName\n\nconst ScrollBar = React.forwardRef<\n  React.ElementRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>,\n  React.ComponentPropsWithoutRef<typeof ScrollAreaPrimitive.ScrollAreaScrollbar>\n>(({ className, orientation = \"vertical\", ...props }, ref) => (\n  <ScrollAreaPrimitive.ScrollAreaScrollbar\n    ref={ref}\n    orientation={orientation}\n    className={cn(\n      \"flex touch-none select-none transition-colors\",\n      orientation === \"vertical\" &&\n        \"h-full w-2.5 border-l border-l-transparent p-[1px]\",\n      orientation === \"horizontal\" &&\n        \"h-2.5 flex-col border-t border-t-transparent p-[1px]\",\n      className\n    )}\n    {...props}\n  >\n    <ScrollAreaPrimitive.ScrollAreaThumb className=\"relative flex-1 rounded-full bg-border\" />\n  </ScrollAreaPrimitive.ScrollAreaScrollbar>\n))\nScrollBar.displayName = ScrollAreaPrimitive.ScrollAreaScrollbar.displayName\n\nexport { ScrollArea, ScrollBar }\n","size_bytes":1642},"client/src/components/ui/select.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Select = SelectPrimitive.Root\n\nconst SelectGroup = SelectPrimitive.Group\n\nconst SelectValue = SelectPrimitive.Value\n\nconst SelectTrigger = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background data-[placeholder]:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\n      className\n    )}\n    {...props}\n  >\n    {children}\n    <SelectPrimitive.Icon asChild>\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\n    </SelectPrimitive.Icon>\n  </SelectPrimitive.Trigger>\n))\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\n\nconst SelectScrollUpButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollUpButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronUp className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollUpButton>\n))\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\n\nconst SelectScrollDownButton = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.ScrollDownButton\n    ref={ref}\n    className={cn(\n      \"flex cursor-default items-center justify-center py-1\",\n      className\n    )}\n    {...props}\n  >\n    <ChevronDown className=\"h-4 w-4\" />\n  </SelectPrimitive.ScrollDownButton>\n))\nSelectScrollDownButton.displayName =\n  SelectPrimitive.ScrollDownButton.displayName\n\nconst SelectContent = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\n>(({ className, children, position = \"popper\", ...props }, ref) => (\n  <SelectPrimitive.Portal>\n    <SelectPrimitive.Content\n      ref={ref}\n      className={cn(\n        \"relative z-50 max-h-[--radix-select-content-available-height] min-w-[8rem] overflow-y-auto overflow-x-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-select-content-transform-origin]\",\n        position === \"popper\" &&\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\n        className\n      )}\n      position={position}\n      {...props}\n    >\n      <SelectScrollUpButton />\n      <SelectPrimitive.Viewport\n        className={cn(\n          \"p-1\",\n          position === \"popper\" &&\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\n        )}\n      >\n        {children}\n      </SelectPrimitive.Viewport>\n      <SelectScrollDownButton />\n    </SelectPrimitive.Content>\n  </SelectPrimitive.Portal>\n))\nSelectContent.displayName = SelectPrimitive.Content.displayName\n\nconst SelectLabel = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Label>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Label\n    ref={ref}\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nSelectLabel.displayName = SelectPrimitive.Label.displayName\n\nconst SelectItem = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\n>(({ className, children, ...props }, ref) => (\n  <SelectPrimitive.Item\n    ref={ref}\n    className={cn(\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\n      className\n    )}\n    {...props}\n  >\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\n      <SelectPrimitive.ItemIndicator>\n        <Check className=\"h-4 w-4\" />\n      </SelectPrimitive.ItemIndicator>\n    </span>\n\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\n  </SelectPrimitive.Item>\n))\nSelectItem.displayName = SelectPrimitive.Item.displayName\n\nconst SelectSeparator = React.forwardRef<\n  React.ElementRef<typeof SelectPrimitive.Separator>,\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\n>(({ className, ...props }, ref) => (\n  <SelectPrimitive.Separator\n    ref={ref}\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\n    {...props}\n  />\n))\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\n\nexport {\n  Select,\n  SelectGroup,\n  SelectValue,\n  SelectTrigger,\n  SelectContent,\n  SelectLabel,\n  SelectItem,\n  SelectSeparator,\n  SelectScrollUpButton,\n  SelectScrollDownButton,\n}\n","size_bytes":5742},"client/src/components/ui/separator.tsx":{"content":"import * as React from \"react\"\nimport * as SeparatorPrimitive from \"@radix-ui/react-separator\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Separator = React.forwardRef<\n  React.ElementRef<typeof SeparatorPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SeparatorPrimitive.Root>\n>(\n  (\n    { className, orientation = \"horizontal\", decorative = true, ...props },\n    ref\n  ) => (\n    <SeparatorPrimitive.Root\n      ref={ref}\n      decorative={decorative}\n      orientation={orientation}\n      className={cn(\n        \"shrink-0 bg-border\",\n        orientation === \"horizontal\" ? \"h-[1px] w-full\" : \"h-full w-[1px]\",\n        className\n      )}\n      {...props}\n    />\n  )\n)\nSeparator.displayName = SeparatorPrimitive.Root.displayName\n\nexport { Separator }\n","size_bytes":756},"client/src/components/ui/sheet.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as SheetPrimitive from \"@radix-ui/react-dialog\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Sheet = SheetPrimitive.Root\n\nconst SheetTrigger = SheetPrimitive.Trigger\n\nconst SheetClose = SheetPrimitive.Close\n\nconst SheetPortal = SheetPrimitive.Portal\n\nconst SheetOverlay = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Overlay>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Overlay>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Overlay\n    className={cn(\n      \"fixed inset-0 z-50 bg-black/80  data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  />\n))\nSheetOverlay.displayName = SheetPrimitive.Overlay.displayName\n\nconst sheetVariants = cva(\n  \"fixed z-50 gap-4 bg-background p-6 shadow-lg transition ease-in-out data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:duration-300 data-[state=open]:duration-500\",\n  {\n    variants: {\n      side: {\n        top: \"inset-x-0 top-0 border-b data-[state=closed]:slide-out-to-top data-[state=open]:slide-in-from-top\",\n        bottom:\n          \"inset-x-0 bottom-0 border-t data-[state=closed]:slide-out-to-bottom data-[state=open]:slide-in-from-bottom\",\n        left: \"inset-y-0 left-0 h-full w-3/4 border-r data-[state=closed]:slide-out-to-left data-[state=open]:slide-in-from-left sm:max-w-sm\",\n        right:\n          \"inset-y-0 right-0 h-full w-3/4  border-l data-[state=closed]:slide-out-to-right data-[state=open]:slide-in-from-right sm:max-w-sm\",\n      },\n    },\n    defaultVariants: {\n      side: \"right\",\n    },\n  }\n)\n\ninterface SheetContentProps\n  extends React.ComponentPropsWithoutRef<typeof SheetPrimitive.Content>,\n    VariantProps<typeof sheetVariants> {}\n\nconst SheetContent = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Content>,\n  SheetContentProps\n>(({ side = \"right\", className, children, ...props }, ref) => (\n  <SheetPortal>\n    <SheetOverlay />\n    <SheetPrimitive.Content\n      ref={ref}\n      className={cn(sheetVariants({ side }), className)}\n      {...props}\n    >\n      {children}\n      <SheetPrimitive.Close className=\"absolute right-4 top-4 rounded-sm opacity-70 ring-offset-background transition-opacity hover:opacity-100 focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none data-[state=open]:bg-secondary\">\n        <X className=\"h-4 w-4\" />\n        <span className=\"sr-only\">Close</span>\n      </SheetPrimitive.Close>\n    </SheetPrimitive.Content>\n  </SheetPortal>\n))\nSheetContent.displayName = SheetPrimitive.Content.displayName\n\nconst SheetHeader = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col space-y-2 text-center sm:text-left\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetHeader.displayName = \"SheetHeader\"\n\nconst SheetFooter = ({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) => (\n  <div\n    className={cn(\n      \"flex flex-col-reverse sm:flex-row sm:justify-end sm:space-x-2\",\n      className\n    )}\n    {...props}\n  />\n)\nSheetFooter.displayName = \"SheetFooter\"\n\nconst SheetTitle = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Title>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Title>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Title\n    ref={ref}\n    className={cn(\"text-lg font-semibold text-foreground\", className)}\n    {...props}\n  />\n))\nSheetTitle.displayName = SheetPrimitive.Title.displayName\n\nconst SheetDescription = React.forwardRef<\n  React.ElementRef<typeof SheetPrimitive.Description>,\n  React.ComponentPropsWithoutRef<typeof SheetPrimitive.Description>\n>(({ className, ...props }, ref) => (\n  <SheetPrimitive.Description\n    ref={ref}\n    className={cn(\"text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nSheetDescription.displayName = SheetPrimitive.Description.displayName\n\nexport {\n  Sheet,\n  SheetPortal,\n  SheetOverlay,\n  SheetTrigger,\n  SheetClose,\n  SheetContent,\n  SheetHeader,\n  SheetFooter,\n  SheetTitle,\n  SheetDescription,\n}\n","size_bytes":4281},"client/src/components/ui/sidebar.tsx":{"content":"import * as React from \"react\"\nimport { Slot } from \"@radix-ui/react-slot\"\nimport { VariantProps, cva } from \"class-variance-authority\"\nimport { PanelLeft } from \"lucide-react\"\n\nimport { useIsMobile } from \"@/hooks/use-mobile\"\nimport { cn } from \"@/lib/utils\"\nimport { Button } from \"@/components/ui/button\"\nimport { Input } from \"@/components/ui/input\"\nimport { Separator } from \"@/components/ui/separator\"\nimport {\n  Sheet,\n  SheetContent,\n  SheetDescription,\n  SheetHeader,\n  SheetTitle,\n} from \"@/components/ui/sheet\"\nimport { Skeleton } from \"@/components/ui/skeleton\"\nimport {\n  Tooltip,\n  TooltipContent,\n  TooltipProvider,\n  TooltipTrigger,\n} from \"@/components/ui/tooltip\"\n\nconst SIDEBAR_COOKIE_NAME = \"sidebar_state\"\nconst SIDEBAR_COOKIE_MAX_AGE = 60 * 60 * 24 * 7\nconst SIDEBAR_WIDTH = \"16rem\"\nconst SIDEBAR_WIDTH_MOBILE = \"18rem\"\nconst SIDEBAR_WIDTH_ICON = \"3rem\"\nconst SIDEBAR_KEYBOARD_SHORTCUT = \"b\"\n\ntype SidebarContextProps = {\n  state: \"expanded\" | \"collapsed\"\n  open: boolean\n  setOpen: (open: boolean) => void\n  openMobile: boolean\n  setOpenMobile: (open: boolean) => void\n  isMobile: boolean\n  toggleSidebar: () => void\n}\n\nconst SidebarContext = React.createContext<SidebarContextProps | null>(null)\n\nfunction useSidebar() {\n  const context = React.useContext(SidebarContext)\n  if (!context) {\n    throw new Error(\"useSidebar must be used within a SidebarProvider.\")\n  }\n\n  return context\n}\n\nconst SidebarProvider = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    defaultOpen?: boolean\n    open?: boolean\n    onOpenChange?: (open: boolean) => void\n  }\n>(\n  (\n    {\n      defaultOpen = true,\n      open: openProp,\n      onOpenChange: setOpenProp,\n      className,\n      style,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const isMobile = useIsMobile()\n    const [openMobile, setOpenMobile] = React.useState(false)\n\n    // This is the internal state of the sidebar.\n    // We use openProp and setOpenProp for control from outside the component.\n    const [_open, _setOpen] = React.useState(defaultOpen)\n    const open = openProp ?? _open\n    const setOpen = React.useCallback(\n      (value: boolean | ((value: boolean) => boolean)) => {\n        const openState = typeof value === \"function\" ? value(open) : value\n        if (setOpenProp) {\n          setOpenProp(openState)\n        } else {\n          _setOpen(openState)\n        }\n\n        // This sets the cookie to keep the sidebar state.\n        document.cookie = `${SIDEBAR_COOKIE_NAME}=${openState}; path=/; max-age=${SIDEBAR_COOKIE_MAX_AGE}`\n      },\n      [setOpenProp, open]\n    )\n\n    // Helper to toggle the sidebar.\n    const toggleSidebar = React.useCallback(() => {\n      return isMobile\n        ? setOpenMobile((open) => !open)\n        : setOpen((open) => !open)\n    }, [isMobile, setOpen, setOpenMobile])\n\n    // Adds a keyboard shortcut to toggle the sidebar.\n    React.useEffect(() => {\n      const handleKeyDown = (event: KeyboardEvent) => {\n        if (\n          event.key === SIDEBAR_KEYBOARD_SHORTCUT &&\n          (event.metaKey || event.ctrlKey)\n        ) {\n          event.preventDefault()\n          toggleSidebar()\n        }\n      }\n\n      window.addEventListener(\"keydown\", handleKeyDown)\n      return () => window.removeEventListener(\"keydown\", handleKeyDown)\n    }, [toggleSidebar])\n\n    // We add a state so that we can do data-state=\"expanded\" or \"collapsed\".\n    // This makes it easier to style the sidebar with Tailwind classes.\n    const state = open ? \"expanded\" : \"collapsed\"\n\n    const contextValue = React.useMemo<SidebarContextProps>(\n      () => ({\n        state,\n        open,\n        setOpen,\n        isMobile,\n        openMobile,\n        setOpenMobile,\n        toggleSidebar,\n      }),\n      [state, open, setOpen, isMobile, openMobile, setOpenMobile, toggleSidebar]\n    )\n\n    return (\n      <SidebarContext.Provider value={contextValue}>\n        <TooltipProvider delayDuration={0}>\n          <div\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH,\n                \"--sidebar-width-icon\": SIDEBAR_WIDTH_ICON,\n                ...style,\n              } as React.CSSProperties\n            }\n            className={cn(\n              \"group/sidebar-wrapper flex min-h-svh w-full has-[[data-variant=inset]]:bg-sidebar\",\n              className\n            )}\n            ref={ref}\n            {...props}\n          >\n            {children}\n          </div>\n        </TooltipProvider>\n      </SidebarContext.Provider>\n    )\n  }\n)\nSidebarProvider.displayName = \"SidebarProvider\"\n\nconst Sidebar = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    side?: \"left\" | \"right\"\n    variant?: \"sidebar\" | \"floating\" | \"inset\"\n    collapsible?: \"offcanvas\" | \"icon\" | \"none\"\n  }\n>(\n  (\n    {\n      side = \"left\",\n      variant = \"sidebar\",\n      collapsible = \"offcanvas\",\n      className,\n      children,\n      ...props\n    },\n    ref\n  ) => {\n    const { isMobile, state, openMobile, setOpenMobile } = useSidebar()\n\n    if (collapsible === \"none\") {\n      return (\n        <div\n          className={cn(\n            \"flex h-full w-[--sidebar-width] flex-col bg-sidebar text-sidebar-foreground\",\n            className\n          )}\n          ref={ref}\n          {...props}\n        >\n          {children}\n        </div>\n      )\n    }\n\n    if (isMobile) {\n      return (\n        <Sheet open={openMobile} onOpenChange={setOpenMobile} {...props}>\n          <SheetContent\n            data-sidebar=\"sidebar\"\n            data-mobile=\"true\"\n            className=\"w-[--sidebar-width] bg-sidebar p-0 text-sidebar-foreground [&>button]:hidden\"\n            style={\n              {\n                \"--sidebar-width\": SIDEBAR_WIDTH_MOBILE,\n              } as React.CSSProperties\n            }\n            side={side}\n          >\n            <SheetHeader className=\"sr-only\">\n              <SheetTitle>Sidebar</SheetTitle>\n              <SheetDescription>Displays the mobile sidebar.</SheetDescription>\n            </SheetHeader>\n            <div className=\"flex h-full w-full flex-col\">{children}</div>\n          </SheetContent>\n        </Sheet>\n      )\n    }\n\n    return (\n      <div\n        ref={ref}\n        className=\"group peer hidden text-sidebar-foreground md:block\"\n        data-state={state}\n        data-collapsible={state === \"collapsed\" ? collapsible : \"\"}\n        data-variant={variant}\n        data-side={side}\n      >\n        {/* This is what handles the sidebar gap on desktop */}\n        <div\n          className={cn(\n            \"relative w-[--sidebar-width] bg-transparent transition-[width] duration-200 ease-linear\",\n            \"group-data-[collapsible=offcanvas]:w-0\",\n            \"group-data-[side=right]:rotate-180\",\n            variant === \"floating\" || variant === \"inset\"\n              ? \"group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4))]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon]\"\n          )}\n        />\n        <div\n          className={cn(\n            \"fixed inset-y-0 z-10 hidden h-svh w-[--sidebar-width] transition-[left,right,width] duration-200 ease-linear md:flex\",\n            side === \"left\"\n              ? \"left-0 group-data-[collapsible=offcanvas]:left-[calc(var(--sidebar-width)*-1)]\"\n              : \"right-0 group-data-[collapsible=offcanvas]:right-[calc(var(--sidebar-width)*-1)]\",\n            // Adjust the padding for floating and inset variants.\n            variant === \"floating\" || variant === \"inset\"\n              ? \"p-2 group-data-[collapsible=icon]:w-[calc(var(--sidebar-width-icon)_+_theme(spacing.4)_+2px)]\"\n              : \"group-data-[collapsible=icon]:w-[--sidebar-width-icon] group-data-[side=left]:border-r group-data-[side=right]:border-l\",\n            className\n          )}\n          {...props}\n        >\n          <div\n            data-sidebar=\"sidebar\"\n            className=\"flex h-full w-full flex-col bg-sidebar group-data-[variant=floating]:rounded-lg group-data-[variant=floating]:border group-data-[variant=floating]:border-sidebar-border group-data-[variant=floating]:shadow\"\n          >\n            {children}\n          </div>\n        </div>\n      </div>\n    )\n  }\n)\nSidebar.displayName = \"Sidebar\"\n\nconst SidebarTrigger = React.forwardRef<\n  React.ElementRef<typeof Button>,\n  React.ComponentProps<typeof Button>\n>(({ className, onClick, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <Button\n      ref={ref}\n      data-sidebar=\"trigger\"\n      variant=\"ghost\"\n      size=\"icon\"\n      className={cn(\"h-7 w-7\", className)}\n      onClick={(event) => {\n        onClick?.(event)\n        toggleSidebar()\n      }}\n      {...props}\n    >\n      <PanelLeft />\n      <span className=\"sr-only\">Toggle Sidebar</span>\n    </Button>\n  )\n})\nSidebarTrigger.displayName = \"SidebarTrigger\"\n\nconst SidebarRail = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\">\n>(({ className, ...props }, ref) => {\n  const { toggleSidebar } = useSidebar()\n\n  return (\n    <button\n      ref={ref}\n      data-sidebar=\"rail\"\n      aria-label=\"Toggle Sidebar\"\n      tabIndex={-1}\n      onClick={toggleSidebar}\n      title=\"Toggle Sidebar\"\n      className={cn(\n        \"absolute inset-y-0 z-20 hidden w-4 -translate-x-1/2 transition-all ease-linear after:absolute after:inset-y-0 after:left-1/2 after:w-[2px] hover:after:bg-sidebar-border group-data-[side=left]:-right-4 group-data-[side=right]:left-0 sm:flex\",\n        \"[[data-side=left]_&]:cursor-w-resize [[data-side=right]_&]:cursor-e-resize\",\n        \"[[data-side=left][data-state=collapsed]_&]:cursor-e-resize [[data-side=right][data-state=collapsed]_&]:cursor-w-resize\",\n        \"group-data-[collapsible=offcanvas]:translate-x-0 group-data-[collapsible=offcanvas]:after:left-full group-data-[collapsible=offcanvas]:hover:bg-sidebar\",\n        \"[[data-side=left][data-collapsible=offcanvas]_&]:-right-2\",\n        \"[[data-side=right][data-collapsible=offcanvas]_&]:-left-2\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarRail.displayName = \"SidebarRail\"\n\nconst SidebarInset = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"main\">\n>(({ className, ...props }, ref) => {\n  return (\n    <main\n      ref={ref}\n      className={cn(\n        \"relative flex w-full flex-1 flex-col bg-background\",\n        \"md:peer-data-[variant=inset]:m-2 md:peer-data-[state=collapsed]:peer-data-[variant=inset]:ml-2 md:peer-data-[variant=inset]:ml-0 md:peer-data-[variant=inset]:rounded-xl md:peer-data-[variant=inset]:shadow\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInset.displayName = \"SidebarInset\"\n\nconst SidebarInput = React.forwardRef<\n  React.ElementRef<typeof Input>,\n  React.ComponentProps<typeof Input>\n>(({ className, ...props }, ref) => {\n  return (\n    <Input\n      ref={ref}\n      data-sidebar=\"input\"\n      className={cn(\n        \"h-8 w-full bg-background shadow-none focus-visible:ring-2 focus-visible:ring-sidebar-ring\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarInput.displayName = \"SidebarInput\"\n\nconst SidebarHeader = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"header\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarHeader.displayName = \"SidebarHeader\"\n\nconst SidebarFooter = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"footer\"\n      className={cn(\"flex flex-col gap-2 p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarFooter.displayName = \"SidebarFooter\"\n\nconst SidebarSeparator = React.forwardRef<\n  React.ElementRef<typeof Separator>,\n  React.ComponentProps<typeof Separator>\n>(({ className, ...props }, ref) => {\n  return (\n    <Separator\n      ref={ref}\n      data-sidebar=\"separator\"\n      className={cn(\"mx-2 w-auto bg-sidebar-border\", className)}\n      {...props}\n    />\n  )\n})\nSidebarSeparator.displayName = \"SidebarSeparator\"\n\nconst SidebarContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"content\"\n      className={cn(\n        \"flex min-h-0 flex-1 flex-col gap-2 overflow-auto group-data-[collapsible=icon]:overflow-hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarContent.displayName = \"SidebarContent\"\n\nconst SidebarGroup = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => {\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"group\"\n      className={cn(\"relative flex w-full min-w-0 flex-col p-2\", className)}\n      {...props}\n    />\n  )\n})\nSidebarGroup.displayName = \"SidebarGroup\"\n\nconst SidebarGroupLabel = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"div\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-label\"\n      className={cn(\n        \"flex h-8 shrink-0 items-center rounded-md px-2 text-xs font-medium text-sidebar-foreground/70 outline-none ring-sidebar-ring transition-[margin,opacity] duration-200 ease-linear focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        \"group-data-[collapsible=icon]:-mt-8 group-data-[collapsible=icon]:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupLabel.displayName = \"SidebarGroupLabel\"\n\nconst SidebarGroupAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & { asChild?: boolean }\n>(({ className, asChild = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"group-action\"\n      className={cn(\n        \"absolute right-3 top-3.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarGroupAction.displayName = \"SidebarGroupAction\"\n\nconst SidebarGroupContent = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"group-content\"\n    className={cn(\"w-full text-sm\", className)}\n    {...props}\n  />\n))\nSidebarGroupContent.displayName = \"SidebarGroupContent\"\n\nconst SidebarMenu = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu\"\n    className={cn(\"flex w-full min-w-0 flex-col gap-1\", className)}\n    {...props}\n  />\n))\nSidebarMenu.displayName = \"SidebarMenu\"\n\nconst SidebarMenuItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ className, ...props }, ref) => (\n  <li\n    ref={ref}\n    data-sidebar=\"menu-item\"\n    className={cn(\"group/menu-item relative\", className)}\n    {...props}\n  />\n))\nSidebarMenuItem.displayName = \"SidebarMenuItem\"\n\nconst sidebarMenuButtonVariants = cva(\n  \"peer/menu-button flex w-full items-center gap-2 overflow-hidden rounded-md p-2 text-left text-sm outline-none ring-sidebar-ring transition-[width,height,padding] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 group-has-[[data-sidebar=menu-action]]/menu-item:pr-8 aria-disabled:pointer-events-none aria-disabled:opacity-50 data-[active=true]:bg-sidebar-accent data-[active=true]:font-medium data-[active=true]:text-sidebar-accent-foreground data-[state=open]:hover:bg-sidebar-accent data-[state=open]:hover:text-sidebar-accent-foreground group-data-[collapsible=icon]:!size-8 group-data-[collapsible=icon]:!p-2 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0\",\n  {\n    variants: {\n      variant: {\n        default: \"hover:bg-sidebar-accent hover:text-sidebar-accent-foreground\",\n        outline:\n          \"bg-background shadow-[0_0_0_1px_hsl(var(--sidebar-border))] hover:bg-sidebar-accent hover:text-sidebar-accent-foreground hover:shadow-[0_0_0_1px_hsl(var(--sidebar-accent))]\",\n      },\n      size: {\n        default: \"h-8 text-sm\",\n        sm: \"h-7 text-xs\",\n        lg: \"h-12 text-sm group-data-[collapsible=icon]:!p-0\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst SidebarMenuButton = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    isActive?: boolean\n    tooltip?: string | React.ComponentProps<typeof TooltipContent>\n  } & VariantProps<typeof sidebarMenuButtonVariants>\n>(\n  (\n    {\n      asChild = false,\n      isActive = false,\n      variant = \"default\",\n      size = \"default\",\n      tooltip,\n      className,\n      ...props\n    },\n    ref\n  ) => {\n    const Comp = asChild ? Slot : \"button\"\n    const { isMobile, state } = useSidebar()\n\n    const button = (\n      <Comp\n        ref={ref}\n        data-sidebar=\"menu-button\"\n        data-size={size}\n        data-active={isActive}\n        className={cn(sidebarMenuButtonVariants({ variant, size }), className)}\n        {...props}\n      />\n    )\n\n    if (!tooltip) {\n      return button\n    }\n\n    if (typeof tooltip === \"string\") {\n      tooltip = {\n        children: tooltip,\n      }\n    }\n\n    return (\n      <Tooltip>\n        <TooltipTrigger asChild>{button}</TooltipTrigger>\n        <TooltipContent\n          side=\"right\"\n          align=\"center\"\n          hidden={state !== \"collapsed\" || isMobile}\n          {...tooltip}\n        />\n      </Tooltip>\n    )\n  }\n)\nSidebarMenuButton.displayName = \"SidebarMenuButton\"\n\nconst SidebarMenuAction = React.forwardRef<\n  HTMLButtonElement,\n  React.ComponentProps<\"button\"> & {\n    asChild?: boolean\n    showOnHover?: boolean\n  }\n>(({ className, asChild = false, showOnHover = false, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"button\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-action\"\n      className={cn(\n        \"absolute right-1 top-1.5 flex aspect-square w-5 items-center justify-center rounded-md p-0 text-sidebar-foreground outline-none ring-sidebar-ring transition-transform hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 peer-hover/menu-button:text-sidebar-accent-foreground [&>svg]:size-4 [&>svg]:shrink-0\",\n        // Increases the hit area of the button on mobile.\n        \"after:absolute after:-inset-2 after:md:hidden\",\n        \"peer-data-[size=sm]/menu-button:top-1\",\n        \"peer-data-[size=default]/menu-button:top-1.5\",\n        \"peer-data-[size=lg]/menu-button:top-2.5\",\n        \"group-data-[collapsible=icon]:hidden\",\n        showOnHover &&\n          \"group-focus-within/menu-item:opacity-100 group-hover/menu-item:opacity-100 data-[state=open]:opacity-100 peer-data-[active=true]/menu-button:text-sidebar-accent-foreground md:opacity-0\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuAction.displayName = \"SidebarMenuAction\"\n\nconst SidebarMenuBadge = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\">\n>(({ className, ...props }, ref) => (\n  <div\n    ref={ref}\n    data-sidebar=\"menu-badge\"\n    className={cn(\n      \"pointer-events-none absolute right-1 flex h-5 min-w-5 select-none items-center justify-center rounded-md px-1 text-xs font-medium tabular-nums text-sidebar-foreground\",\n      \"peer-hover/menu-button:text-sidebar-accent-foreground peer-data-[active=true]/menu-button:text-sidebar-accent-foreground\",\n      \"peer-data-[size=sm]/menu-button:top-1\",\n      \"peer-data-[size=default]/menu-button:top-1.5\",\n      \"peer-data-[size=lg]/menu-button:top-2.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuBadge.displayName = \"SidebarMenuBadge\"\n\nconst SidebarMenuSkeleton = React.forwardRef<\n  HTMLDivElement,\n  React.ComponentProps<\"div\"> & {\n    showIcon?: boolean\n  }\n>(({ className, showIcon = false, ...props }, ref) => {\n  // Random width between 50 to 90%.\n  const width = React.useMemo(() => {\n    return `${Math.floor(Math.random() * 40) + 50}%`\n  }, [])\n\n  return (\n    <div\n      ref={ref}\n      data-sidebar=\"menu-skeleton\"\n      className={cn(\"flex h-8 items-center gap-2 rounded-md px-2\", className)}\n      {...props}\n    >\n      {showIcon && (\n        <Skeleton\n          className=\"size-4 rounded-md\"\n          data-sidebar=\"menu-skeleton-icon\"\n        />\n      )}\n      <Skeleton\n        className=\"h-4 max-w-[--skeleton-width] flex-1\"\n        data-sidebar=\"menu-skeleton-text\"\n        style={\n          {\n            \"--skeleton-width\": width,\n          } as React.CSSProperties\n        }\n      />\n    </div>\n  )\n})\nSidebarMenuSkeleton.displayName = \"SidebarMenuSkeleton\"\n\nconst SidebarMenuSub = React.forwardRef<\n  HTMLUListElement,\n  React.ComponentProps<\"ul\">\n>(({ className, ...props }, ref) => (\n  <ul\n    ref={ref}\n    data-sidebar=\"menu-sub\"\n    className={cn(\n      \"mx-3.5 flex min-w-0 translate-x-px flex-col gap-1 border-l border-sidebar-border px-2.5 py-0.5\",\n      \"group-data-[collapsible=icon]:hidden\",\n      className\n    )}\n    {...props}\n  />\n))\nSidebarMenuSub.displayName = \"SidebarMenuSub\"\n\nconst SidebarMenuSubItem = React.forwardRef<\n  HTMLLIElement,\n  React.ComponentProps<\"li\">\n>(({ ...props }, ref) => <li ref={ref} {...props} />)\nSidebarMenuSubItem.displayName = \"SidebarMenuSubItem\"\n\nconst SidebarMenuSubButton = React.forwardRef<\n  HTMLAnchorElement,\n  React.ComponentProps<\"a\"> & {\n    asChild?: boolean\n    size?: \"sm\" | \"md\"\n    isActive?: boolean\n  }\n>(({ asChild = false, size = \"md\", isActive, className, ...props }, ref) => {\n  const Comp = asChild ? Slot : \"a\"\n\n  return (\n    <Comp\n      ref={ref}\n      data-sidebar=\"menu-sub-button\"\n      data-size={size}\n      data-active={isActive}\n      className={cn(\n        \"flex h-7 min-w-0 -translate-x-px items-center gap-2 overflow-hidden rounded-md px-2 text-sidebar-foreground outline-none ring-sidebar-ring hover:bg-sidebar-accent hover:text-sidebar-accent-foreground focus-visible:ring-2 active:bg-sidebar-accent active:text-sidebar-accent-foreground disabled:pointer-events-none disabled:opacity-50 aria-disabled:pointer-events-none aria-disabled:opacity-50 [&>span:last-child]:truncate [&>svg]:size-4 [&>svg]:shrink-0 [&>svg]:text-sidebar-accent-foreground\",\n        \"data-[active=true]:bg-sidebar-accent data-[active=true]:text-sidebar-accent-foreground\",\n        size === \"sm\" && \"text-xs\",\n        size === \"md\" && \"text-sm\",\n        \"group-data-[collapsible=icon]:hidden\",\n        className\n      )}\n      {...props}\n    />\n  )\n})\nSidebarMenuSubButton.displayName = \"SidebarMenuSubButton\"\n\nexport {\n  Sidebar,\n  SidebarContent,\n  SidebarFooter,\n  SidebarGroup,\n  SidebarGroupAction,\n  SidebarGroupContent,\n  SidebarGroupLabel,\n  SidebarHeader,\n  SidebarInput,\n  SidebarInset,\n  SidebarMenu,\n  SidebarMenuAction,\n  SidebarMenuBadge,\n  SidebarMenuButton,\n  SidebarMenuItem,\n  SidebarMenuSkeleton,\n  SidebarMenuSub,\n  SidebarMenuSubButton,\n  SidebarMenuSubItem,\n  SidebarProvider,\n  SidebarRail,\n  SidebarSeparator,\n  SidebarTrigger,\n  useSidebar,\n}\n","size_bytes":23567},"client/src/components/ui/skeleton.tsx":{"content":"import { cn } from \"@/lib/utils\"\n\nfunction Skeleton({\n  className,\n  ...props\n}: React.HTMLAttributes<HTMLDivElement>) {\n  return (\n    <div\n      className={cn(\"animate-pulse rounded-md bg-muted\", className)}\n      {...props}\n    />\n  )\n}\n\nexport { Skeleton }\n","size_bytes":261},"client/src/components/ui/skill-category.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport type { SkillCategory } from \"@/data/skills\";\n\ninterface SkillCategoryProps {\n  category: SkillCategory;\n  className?: string;\n}\n\nexport function SkillCategoryComponent({ category, className = \"\" }: SkillCategoryProps) {\n  const getLevelColor = (level: number) => {\n    switch (level) {\n      case 5: return \"bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-200\";\n      case 4: return \"bg-blue-100 text-blue-800 dark:bg-blue-900 dark:text-blue-200\";\n      case 3: return \"bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-200\";\n      case 2: return \"bg-orange-100 text-orange-800 dark:bg-orange-900 dark:text-orange-200\";\n      case 1: return \"bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-200\";\n      default: return \"bg-muted text-muted-foreground\";\n    }\n  };\n\n  const getLevelLabel = (level: number) => {\n    switch (level) {\n      case 5: return \"Expert\";\n      case 4: return \"Advanced\";\n      case 3: return \"Intermediate\";\n      case 2: return \"Basic\";\n      case 1: return \"Learning\";\n      default: return \"Unknown\";\n    }\n  };\n\n  return (\n    <div className={`bg-card border border-border rounded-xl p-6 ${className}`} data-testid={`skill-category-${category.id}`}>\n      <h3 className=\"text-2xl font-semibold mb-2 flex items-center\" data-testid={`skill-category-title-${category.id}`}>\n        <span className=\"text-2xl mr-2\">{category.icon}</span>\n        {category.name}\n      </h3>\n      <p className=\"text-muted-foreground mb-6\" data-testid={`skill-category-description-${category.id}`}>\n        {category.description}\n      </p>\n      \n      <div className=\"space-y-4\">\n        {category.skills.map((skill) => (\n          <div key={skill.name} className=\"flex items-center justify-between\" data-testid={`skill-item-${skill.name.toLowerCase().replace(/\\s+/g, '-')}`}>\n            <span className=\"font-medium\">{skill.name}</span>\n            <Badge \n              className={getLevelColor(skill.level)}\n              data-testid={`skill-level-${skill.name.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              {getLevelLabel(skill.level)}\n            </Badge>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}\n","size_bytes":2238},"client/src/components/ui/slider.tsx":{"content":"import * as React from \"react\"\nimport * as SliderPrimitive from \"@radix-ui/react-slider\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Slider = React.forwardRef<\n  React.ElementRef<typeof SliderPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof SliderPrimitive.Root>\n>(({ className, ...props }, ref) => (\n  <SliderPrimitive.Root\n    ref={ref}\n    className={cn(\n      \"relative flex w-full touch-none select-none items-center\",\n      className\n    )}\n    {...props}\n  >\n    <SliderPrimitive.Track className=\"relative h-2 w-full grow overflow-hidden rounded-full bg-secondary\">\n      <SliderPrimitive.Range className=\"absolute h-full bg-primary\" />\n    </SliderPrimitive.Track>\n    <SliderPrimitive.Thumb className=\"block h-5 w-5 rounded-full border-2 border-primary bg-background ring-offset-background transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50\" />\n  </SliderPrimitive.Root>\n))\nSlider.displayName = SliderPrimitive.Root.displayName\n\nexport { Slider }\n","size_bytes":1077},"client/src/components/ui/stat-chip.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { LucideIcon, TrendingUp } from \"lucide-react\";\n\ninterface StatChipProps {\n  icon?: LucideIcon;\n  label: string;\n  value: string;\n  baseline?: string;\n  trend?: \"up\" | \"down\" | \"neutral\";\n  variant?: \"default\" | \"success\" | \"warning\" | \"primary\";\n  className?: string;\n}\n\nconst variantStyles = {\n  default: \"bg-muted text-muted-foreground border-border\",\n  success: \"bg-success/10 text-success border-success/20\", \n  warning: \"bg-warning/10 text-warning border-warning/20\",\n  primary: \"bg-primary/10 text-primary border-primary/20\",\n};\n\nexport function StatChip({ \n  icon: Icon = TrendingUp,\n  label, \n  value, \n  baseline, \n  trend = \"neutral\",\n  variant = \"default\",\n  className \n}: StatChipProps) {\n  const ariaLabel = baseline \n    ? `${label}: ${value}, baseline: ${baseline}` \n    : `${label}: ${value}`;\n\n  return (\n    <div \n      className={cn(\n        \"inline-flex items-center gap-2 px-4 py-2 rounded-chip border\",\n        \"transition-all duration-fast ease-smooth\",\n        \"hover:shadow-card\",\n        variantStyles[variant],\n        className\n      )}\n      aria-label={ariaLabel}\n      data-testid={`stat-chip-${label.toLowerCase().replace(/\\s+/g, '-')}`}\n    >\n      <Icon className=\"h-4 w-4 flex-shrink-0\" />\n      <div className=\"flex flex-col items-start min-w-0\">\n        <span className=\"text-xs font-medium opacity-80 leading-none\">\n          {label}\n        </span>\n        <span className=\"text-sm font-semibold leading-none mt-1\">\n          {value}\n        </span>\n      </div>\n      {baseline && (\n        <span className=\"text-xs opacity-60 ml-auto\">\n          vs {baseline}\n        </span>\n      )}\n    </div>\n  );\n}\n\nexport function StatChipGroup({ \n  children, \n  className \n}: { \n  children: React.ReactNode; \n  className?: string; \n}) {\n  return (\n    <div \n      className={cn(\"flex flex-wrap gap-3\", className)}\n      data-testid=\"stat-chip-group\"\n    >\n      {children}\n    </div>\n  );\n}","size_bytes":1963},"client/src/components/ui/switch.tsx":{"content":"import * as React from \"react\"\nimport * as SwitchPrimitives from \"@radix-ui/react-switch\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Switch = React.forwardRef<\n  React.ElementRef<typeof SwitchPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof SwitchPrimitives.Root>\n>(({ className, ...props }, ref) => (\n  <SwitchPrimitives.Root\n    className={cn(\n      \"peer inline-flex h-6 w-11 shrink-0 cursor-pointer items-center rounded-full border-2 border-transparent transition-colors focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 focus-visible:ring-offset-background disabled:cursor-not-allowed disabled:opacity-50 data-[state=checked]:bg-primary data-[state=unchecked]:bg-input\",\n      className\n    )}\n    {...props}\n    ref={ref}\n  >\n    <SwitchPrimitives.Thumb\n      className={cn(\n        \"pointer-events-none block h-5 w-5 rounded-full bg-background shadow-lg ring-0 transition-transform data-[state=checked]:translate-x-5 data-[state=unchecked]:translate-x-0\"\n      )}\n    />\n  </SwitchPrimitives.Root>\n))\nSwitch.displayName = SwitchPrimitives.Root.displayName\n\nexport { Switch }\n","size_bytes":1139},"client/src/components/ui/table.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Table = React.forwardRef<\n  HTMLTableElement,\n  React.HTMLAttributes<HTMLTableElement>\n>(({ className, ...props }, ref) => (\n  <div className=\"relative w-full overflow-auto\">\n    <table\n      ref={ref}\n      className={cn(\"w-full caption-bottom text-sm\", className)}\n      {...props}\n    />\n  </div>\n))\nTable.displayName = \"Table\"\n\nconst TableHeader = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <thead ref={ref} className={cn(\"[&_tr]:border-b\", className)} {...props} />\n))\nTableHeader.displayName = \"TableHeader\"\n\nconst TableBody = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tbody\n    ref={ref}\n    className={cn(\"[&_tr:last-child]:border-0\", className)}\n    {...props}\n  />\n))\nTableBody.displayName = \"TableBody\"\n\nconst TableFooter = React.forwardRef<\n  HTMLTableSectionElement,\n  React.HTMLAttributes<HTMLTableSectionElement>\n>(({ className, ...props }, ref) => (\n  <tfoot\n    ref={ref}\n    className={cn(\n      \"border-t bg-muted/50 font-medium [&>tr]:last:border-b-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableFooter.displayName = \"TableFooter\"\n\nconst TableRow = React.forwardRef<\n  HTMLTableRowElement,\n  React.HTMLAttributes<HTMLTableRowElement>\n>(({ className, ...props }, ref) => (\n  <tr\n    ref={ref}\n    className={cn(\n      \"border-b transition-colors hover:bg-muted/50 data-[state=selected]:bg-muted\",\n      className\n    )}\n    {...props}\n  />\n))\nTableRow.displayName = \"TableRow\"\n\nconst TableHead = React.forwardRef<\n  HTMLTableCellElement,\n  React.ThHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <th\n    ref={ref}\n    className={cn(\n      \"h-12 px-4 text-left align-middle font-medium text-muted-foreground [&:has([role=checkbox])]:pr-0\",\n      className\n    )}\n    {...props}\n  />\n))\nTableHead.displayName = \"TableHead\"\n\nconst TableCell = React.forwardRef<\n  HTMLTableCellElement,\n  React.TdHTMLAttributes<HTMLTableCellElement>\n>(({ className, ...props }, ref) => (\n  <td\n    ref={ref}\n    className={cn(\"p-4 align-middle [&:has([role=checkbox])]:pr-0\", className)}\n    {...props}\n  />\n))\nTableCell.displayName = \"TableCell\"\n\nconst TableCaption = React.forwardRef<\n  HTMLTableCaptionElement,\n  React.HTMLAttributes<HTMLTableCaptionElement>\n>(({ className, ...props }, ref) => (\n  <caption\n    ref={ref}\n    className={cn(\"mt-4 text-sm text-muted-foreground\", className)}\n    {...props}\n  />\n))\nTableCaption.displayName = \"TableCaption\"\n\nexport {\n  Table,\n  TableHeader,\n  TableBody,\n  TableFooter,\n  TableHead,\n  TableRow,\n  TableCell,\n  TableCaption,\n}\n","size_bytes":2765},"client/src/components/ui/tabs.tsx":{"content":"import * as React from \"react\"\nimport * as TabsPrimitive from \"@radix-ui/react-tabs\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Tabs = TabsPrimitive.Root\n\nconst TabsList = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.List>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.List>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.List\n    ref={ref}\n    className={cn(\n      \"inline-flex h-10 items-center justify-center rounded-md bg-muted p-1 text-muted-foreground\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsList.displayName = TabsPrimitive.List.displayName\n\nconst TabsTrigger = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Trigger>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Trigger>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Trigger\n    ref={ref}\n    className={cn(\n      \"inline-flex items-center justify-center whitespace-nowrap rounded-sm px-3 py-1.5 text-sm font-medium ring-offset-background transition-all focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=active]:bg-background data-[state=active]:text-foreground data-[state=active]:shadow-sm\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsTrigger.displayName = TabsPrimitive.Trigger.displayName\n\nconst TabsContent = React.forwardRef<\n  React.ElementRef<typeof TabsPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TabsPrimitive.Content>\n>(({ className, ...props }, ref) => (\n  <TabsPrimitive.Content\n    ref={ref}\n    className={cn(\n      \"mt-2 ring-offset-background focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2\",\n      className\n    )}\n    {...props}\n  />\n))\nTabsContent.displayName = TabsPrimitive.Content.displayName\n\nexport { Tabs, TabsList, TabsTrigger, TabsContent }\n","size_bytes":1883},"client/src/components/ui/textarea.tsx":{"content":"import * as React from \"react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst Textarea = React.forwardRef<\n  HTMLTextAreaElement,\n  React.ComponentProps<\"textarea\">\n>(({ className, ...props }, ref) => {\n  return (\n    <textarea\n      className={cn(\n        \"flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm\",\n        className\n      )}\n      ref={ref}\n      {...props}\n    />\n  )\n})\nTextarea.displayName = \"Textarea\"\n\nexport { Textarea }\n","size_bytes":689},"client/src/components/ui/timeline-item.tsx":{"content":"import { Badge } from \"@/components/ui/badge\";\nimport { formatPeriod } from \"@/lib/utils/format\";\nimport type { ExperienceItem } from \"@/data/experience\";\n\ninterface TimelineItemProps {\n  experience: ExperienceItem;\n  className?: string;\n}\n\nexport function TimelineItem({ experience, className = \"\" }: TimelineItemProps) {\n  return (\n    <div className={`flex items-start space-x-4 ${className}`} data-testid={`timeline-item-${experience.company.toLowerCase().replace(/\\s+/g, '-')}`}>\n      <div className=\"bg-primary rounded-full w-3 h-3 mt-2 flex-shrink-0\"></div>\n      <div className=\"flex-1 min-w-0\">\n        <div className=\"flex flex-col sm:flex-row sm:items-center sm:justify-between mb-2\">\n          <h4 className=\"font-semibold text-foreground\" data-testid={`timeline-role-${experience.company.toLowerCase().replace(/\\s+/g, '-')}`}>\n            {experience.role}\n          </h4>\n          <span className=\"text-sm text-muted-foreground\" data-testid={`timeline-period-${experience.company.toLowerCase().replace(/\\s+/g, '-')}`}>\n            {formatPeriod(experience.startDate, experience.endDate)}\n            {experience.current && \" (Current)\"}\n          </span>\n        </div>\n        <p className=\"text-muted-foreground mb-3\" data-testid={`timeline-company-${experience.company.toLowerCase().replace(/\\s+/g, '-')}`}>\n          {experience.company}\n        </p>\n        \n        <ul className=\"space-y-2 mb-4\">\n          {experience.highlights.map((highlight, index) => (\n            <li \n              key={index} \n              className=\"text-muted-foreground text-sm\"\n              data-testid={`timeline-highlight-${experience.company.toLowerCase().replace(/\\s+/g, '-')}-${index}`}\n            >\n              • {highlight}\n            </li>\n          ))}\n        </ul>\n        \n        {experience.impactMetrics.length > 0 && (\n          <div className=\"mb-4\">\n            <h5 className=\"font-medium mb-2\">Key Impact:</h5>\n            <div className=\"grid grid-cols-1 md:grid-cols-2 gap-3\">\n              {experience.impactMetrics.map((metric, index) => (\n                <div \n                  key={index}\n                  className=\"bg-muted/50 rounded-lg p-3\"\n                  data-testid={`timeline-metric-${experience.company.toLowerCase().replace(/\\s+/g, '-')}-${index}`}\n                >\n                  <div className=\"font-semibold text-primary\">{metric.value}</div>\n                  <div className=\"text-sm text-muted-foreground\">{metric.metric}</div>\n                  <div className=\"text-xs text-muted-foreground\">{metric.context}</div>\n                </div>\n              ))}\n            </div>\n          </div>\n        )}\n        \n        <div className=\"flex flex-wrap gap-2\">\n          {experience.stack.map((tech) => (\n            <Badge \n              key={tech} \n              variant=\"outline\" \n              className=\"text-xs\"\n              data-testid={`timeline-tech-${tech.toLowerCase().replace(/\\s+/g, '-')}`}\n            >\n              {tech}\n            </Badge>\n          ))}\n        </div>\n      </div>\n    </div>\n  );\n}\n","size_bytes":3078},"client/src/components/ui/toast.tsx":{"content":"import * as React from \"react\"\nimport * as ToastPrimitives from \"@radix-ui/react-toast\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\nimport { X } from \"lucide-react\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst ToastProvider = ToastPrimitives.Provider\n\nconst ToastViewport = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Viewport>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Viewport>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Viewport\n    ref={ref}\n    className={cn(\n      \"fixed top-0 z-[100] flex max-h-screen w-full flex-col-reverse p-4 sm:bottom-0 sm:right-0 sm:top-auto sm:flex-col md:max-w-[420px]\",\n      className\n    )}\n    {...props}\n  />\n))\nToastViewport.displayName = ToastPrimitives.Viewport.displayName\n\nconst toastVariants = cva(\n  \"group pointer-events-auto relative flex w-full items-center justify-between space-x-4 overflow-hidden rounded-md border p-6 pr-8 shadow-lg transition-all data-[swipe=cancel]:translate-x-0 data-[swipe=end]:translate-x-[var(--radix-toast-swipe-end-x)] data-[swipe=move]:translate-x-[var(--radix-toast-swipe-move-x)] data-[swipe=move]:transition-none data-[state=open]:animate-in data-[state=closed]:animate-out data-[swipe=end]:animate-out data-[state=closed]:fade-out-80 data-[state=closed]:slide-out-to-right-full data-[state=open]:slide-in-from-top-full data-[state=open]:sm:slide-in-from-bottom-full\",\n  {\n    variants: {\n      variant: {\n        default: \"border bg-background text-foreground\",\n        destructive:\n          \"destructive group border-destructive bg-destructive text-destructive-foreground\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n    },\n  }\n)\n\nconst Toast = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Root>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Root> &\n    VariantProps<typeof toastVariants>\n>(({ className, variant, ...props }, ref) => {\n  return (\n    <ToastPrimitives.Root\n      ref={ref}\n      className={cn(toastVariants({ variant }), className)}\n      {...props}\n    />\n  )\n})\nToast.displayName = ToastPrimitives.Root.displayName\n\nconst ToastAction = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Action>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Action>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Action\n    ref={ref}\n    className={cn(\n      \"inline-flex h-8 shrink-0 items-center justify-center rounded-md border bg-transparent px-3 text-sm font-medium ring-offset-background transition-colors hover:bg-secondary focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 group-[.destructive]:border-muted/40 group-[.destructive]:hover:border-destructive/30 group-[.destructive]:hover:bg-destructive group-[.destructive]:hover:text-destructive-foreground group-[.destructive]:focus:ring-destructive\",\n      className\n    )}\n    {...props}\n  />\n))\nToastAction.displayName = ToastPrimitives.Action.displayName\n\nconst ToastClose = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Close>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Close>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Close\n    ref={ref}\n    className={cn(\n      \"absolute right-2 top-2 rounded-md p-1 text-foreground/50 opacity-0 transition-opacity hover:text-foreground focus:opacity-100 focus:outline-none focus:ring-2 group-hover:opacity-100 group-[.destructive]:text-red-300 group-[.destructive]:hover:text-red-50 group-[.destructive]:focus:ring-red-400 group-[.destructive]:focus:ring-offset-red-600\",\n      className\n    )}\n    toast-close=\"\"\n    {...props}\n  >\n    <X className=\"h-4 w-4\" />\n  </ToastPrimitives.Close>\n))\nToastClose.displayName = ToastPrimitives.Close.displayName\n\nconst ToastTitle = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Title>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Title>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Title\n    ref={ref}\n    className={cn(\"text-sm font-semibold\", className)}\n    {...props}\n  />\n))\nToastTitle.displayName = ToastPrimitives.Title.displayName\n\nconst ToastDescription = React.forwardRef<\n  React.ElementRef<typeof ToastPrimitives.Description>,\n  React.ComponentPropsWithoutRef<typeof ToastPrimitives.Description>\n>(({ className, ...props }, ref) => (\n  <ToastPrimitives.Description\n    ref={ref}\n    className={cn(\"text-sm opacity-90\", className)}\n    {...props}\n  />\n))\nToastDescription.displayName = ToastPrimitives.Description.displayName\n\ntype ToastProps = React.ComponentPropsWithoutRef<typeof Toast>\n\ntype ToastActionElement = React.ReactElement<typeof ToastAction>\n\nexport {\n  type ToastProps,\n  type ToastActionElement,\n  ToastProvider,\n  ToastViewport,\n  Toast,\n  ToastTitle,\n  ToastDescription,\n  ToastClose,\n  ToastAction,\n}\n","size_bytes":4845},"client/src/components/ui/toaster.tsx":{"content":"import { useToast } from \"@/hooks/use-toast\"\nimport {\n  Toast,\n  ToastClose,\n  ToastDescription,\n  ToastProvider,\n  ToastTitle,\n  ToastViewport,\n} from \"@/components/ui/toast\"\n\nexport function Toaster() {\n  const { toasts } = useToast()\n\n  return (\n    <ToastProvider>\n      {toasts.map(function ({ id, title, description, action, ...props }) {\n        return (\n          <Toast key={id} {...props}>\n            <div className=\"grid gap-1\">\n              {title && <ToastTitle>{title}</ToastTitle>}\n              {description && (\n                <ToastDescription>{description}</ToastDescription>\n              )}\n            </div>\n            {action}\n            <ToastClose />\n          </Toast>\n        )\n      })}\n      <ToastViewport />\n    </ToastProvider>\n  )\n}\n","size_bytes":772},"client/src/components/ui/toggle-group.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as ToggleGroupPrimitive from \"@radix-ui/react-toggle-group\"\nimport { type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\nimport { toggleVariants } from \"@/components/ui/toggle\"\n\nconst ToggleGroupContext = React.createContext<\n  VariantProps<typeof toggleVariants>\n>({\n  size: \"default\",\n  variant: \"default\",\n})\n\nconst ToggleGroup = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, children, ...props }, ref) => (\n  <ToggleGroupPrimitive.Root\n    ref={ref}\n    className={cn(\"flex items-center justify-center gap-1\", className)}\n    {...props}\n  >\n    <ToggleGroupContext.Provider value={{ variant, size }}>\n      {children}\n    </ToggleGroupContext.Provider>\n  </ToggleGroupPrimitive.Root>\n))\n\nToggleGroup.displayName = ToggleGroupPrimitive.Root.displayName\n\nconst ToggleGroupItem = React.forwardRef<\n  React.ElementRef<typeof ToggleGroupPrimitive.Item>,\n  React.ComponentPropsWithoutRef<typeof ToggleGroupPrimitive.Item> &\n    VariantProps<typeof toggleVariants>\n>(({ className, children, variant, size, ...props }, ref) => {\n  const context = React.useContext(ToggleGroupContext)\n\n  return (\n    <ToggleGroupPrimitive.Item\n      ref={ref}\n      className={cn(\n        toggleVariants({\n          variant: context.variant || variant,\n          size: context.size || size,\n        }),\n        className\n      )}\n      {...props}\n    >\n      {children}\n    </ToggleGroupPrimitive.Item>\n  )\n})\n\nToggleGroupItem.displayName = ToggleGroupPrimitive.Item.displayName\n\nexport { ToggleGroup, ToggleGroupItem }\n","size_bytes":1753},"client/src/components/ui/toggle.tsx":{"content":"import * as React from \"react\"\nimport * as TogglePrimitive from \"@radix-ui/react-toggle\"\nimport { cva, type VariantProps } from \"class-variance-authority\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst toggleVariants = cva(\n  \"inline-flex items-center justify-center rounded-md text-sm font-medium ring-offset-background transition-colors hover:bg-muted hover:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:pointer-events-none disabled:opacity-50 data-[state=on]:bg-accent data-[state=on]:text-accent-foreground [&_svg]:pointer-events-none [&_svg]:size-4 [&_svg]:shrink-0 gap-2\",\n  {\n    variants: {\n      variant: {\n        default: \"bg-transparent\",\n        outline:\n          \"border border-input bg-transparent hover:bg-accent hover:text-accent-foreground\",\n      },\n      size: {\n        default: \"h-10 px-3 min-w-10\",\n        sm: \"h-9 px-2.5 min-w-9\",\n        lg: \"h-11 px-5 min-w-11\",\n      },\n    },\n    defaultVariants: {\n      variant: \"default\",\n      size: \"default\",\n    },\n  }\n)\n\nconst Toggle = React.forwardRef<\n  React.ElementRef<typeof TogglePrimitive.Root>,\n  React.ComponentPropsWithoutRef<typeof TogglePrimitive.Root> &\n    VariantProps<typeof toggleVariants>\n>(({ className, variant, size, ...props }, ref) => (\n  <TogglePrimitive.Root\n    ref={ref}\n    className={cn(toggleVariants({ variant, size, className }))}\n    {...props}\n  />\n))\n\nToggle.displayName = TogglePrimitive.Root.displayName\n\nexport { Toggle, toggleVariants }\n","size_bytes":1527},"client/src/components/ui/tooltip.tsx":{"content":"\"use client\"\n\nimport * as React from \"react\"\nimport * as TooltipPrimitive from \"@radix-ui/react-tooltip\"\n\nimport { cn } from \"@/lib/utils\"\n\nconst TooltipProvider = TooltipPrimitive.Provider\n\nconst Tooltip = TooltipPrimitive.Root\n\nconst TooltipTrigger = TooltipPrimitive.Trigger\n\nconst TooltipContent = React.forwardRef<\n  React.ElementRef<typeof TooltipPrimitive.Content>,\n  React.ComponentPropsWithoutRef<typeof TooltipPrimitive.Content>\n>(({ className, sideOffset = 4, ...props }, ref) => (\n  <TooltipPrimitive.Content\n    ref={ref}\n    sideOffset={sideOffset}\n    className={cn(\n      \"z-50 overflow-hidden rounded-md border bg-popover px-3 py-1.5 text-sm text-popover-foreground shadow-md animate-in fade-in-0 zoom-in-95 data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=closed]:zoom-out-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2 origin-[--radix-tooltip-content-transform-origin]\",\n      className\n    )}\n    {...props}\n  />\n))\nTooltipContent.displayName = TooltipPrimitive.Content.displayName\n\nexport { Tooltip, TooltipTrigger, TooltipContent, TooltipProvider }\n","size_bytes":1209},"client/src/lib/utils/format.ts":{"content":"export function formatMetric(value: number, unit?: string): string {\n  if (value >= 1000000) {\n    return `${(value / 1000000).toFixed(1)}M${unit ? ` ${unit}` : \"\"}`;\n  }\n  if (value >= 1000) {\n    return `${(value / 1000).toFixed(1)}k${unit ? ` ${unit}` : \"\"}`;\n  }\n  return `${value}${unit ? ` ${unit}` : \"\"}`;\n}\n\nexport function formatPercentage(value: number, showSign = true): string {\n  const sign = showSign && value > 0 ? \"+\" : \"\";\n  return `${sign}${value}%`;\n}\n\nexport function formatDelta(baseline: number, value: number, unit?: string): string {\n  const delta = ((value - baseline) / baseline) * 100;\n  const sign = delta > 0 ? \"+\" : \"\";\n  return `${sign}${Math.round(delta)}%`;\n}\n\nexport function formatPeriod(startDate: string, endDate?: string): string {\n  const start = new Date(startDate);\n  const end = endDate ? new Date(endDate) : new Date();\n  \n  const startYear = start.getFullYear();\n  const endYear = end.getFullYear();\n  \n  const startMonth = start.toLocaleDateString(\"en-US\", { month: \"short\" });\n  const endMonth = end.toLocaleDateString(\"en-US\", { month: \"short\" });\n  \n  if (startYear === endYear) {\n    return `${startMonth} – ${endMonth} ${endYear}`;\n  }\n  \n  return `${startMonth} ${startYear} – ${endMonth} ${endYear}`;\n}\n\nexport function formatTimeAgo(date: Date): string {\n  const now = new Date();\n  const diffInSeconds = Math.floor((now.getTime() - date.getTime()) / 1000);\n  \n  if (diffInSeconds < 60) {\n    return \"just now\";\n  }\n  \n  const diffInMinutes = Math.floor(diffInSeconds / 60);\n  if (diffInMinutes < 60) {\n    return `${diffInMinutes}m ago`;\n  }\n  \n  const diffInHours = Math.floor(diffInMinutes / 60);\n  if (diffInHours < 24) {\n    return `${diffInHours}h ago`;\n  }\n  \n  const diffInDays = Math.floor(diffInHours / 24);\n  if (diffInDays < 7) {\n    return `${diffInDays}d ago`;\n  }\n  \n  return date.toLocaleDateString();\n}\n","size_bytes":1877},"client/src/pages/work/[slug].tsx":{"content":"import { useRoute } from \"wouter\";\nimport { Header } from \"@/components/layout/header\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { Button } from \"@/components/ui/button\";\nimport { ArrowLeft, ExternalLink } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { getCaseStudy, caseStudies } from \"@/data/case-studies\";\nimport { MetricCard } from \"@/components/ui/metric-card\";\nimport { StatBar } from \"@/components/ui/stat-bar\";\nimport { TableOfContents } from \"@/components/ui/table-of-contents\";\nimport { EvidenceGallery } from \"@/components/ui/evidence-gallery\";\nimport { BeforeAfterSlider } from \"@/components/ui/before-after-slider\";\nimport { RelatedWorkRail } from \"@/components/ui/related-work-rail\";\nimport { analytics } from \"@/lib/analytics\";\nimport { useEffect, useMemo } from \"react\";\n\nexport default function CaseStudy() {\n  const [match, params] = useRoute(\"/work/:slug\");\n  const caseStudy = match ? getCaseStudy(params!.slug) : null;\n\n  useEffect(() => {\n    if (caseStudy) {\n      analytics.trackCaseStudyOpen(caseStudy.slug);\n    }\n  }, [caseStudy]);\n\n  // Generate table of contents\n  const tocItems = useMemo(() => {\n    if (!caseStudy) return [];\n    \n    const items = [\n      { id: \"challenge\", title: \"The Challenge\", level: 2 },\n      { id: \"approach\", title: \"The Approach\", level: 2 },\n      { id: \"impact\", title: \"The Impact\", level: 2 },\n    ];\n    \n    if (caseStudy.artifacts.length > 0) {\n      items.push({ id: \"evidence\", title: \"Evidence\", level: 2 });\n    }\n    \n    items.push(\n      { id: \"tech-stack\", title: \"Technology Stack\", level: 2 },\n      { id: \"learnings\", title: \"Key Learnings\", level: 2 }\n    );\n    \n    return items;\n  }, [caseStudy]);\n\n  // Get related case studies\n  const relatedCaseStudies = useMemo(() => {\n    if (!caseStudy) return [];\n    \n    // First try to get case studies with shared tags\n    let related = caseStudies.filter(study => \n      study.slug !== caseStudy.slug && \n      study.tags.some(tag => caseStudy.tags.includes(tag))\n    );\n    \n    // If no shared tags, get other case studies  \n    if (related.length === 0) {\n      related = caseStudies.filter(study => study.slug !== caseStudy.slug);\n    }\n    \n    return related.slice(0, 3);\n  }, [caseStudy]);\n\n  if (!caseStudy) {\n    return (\n      <div className=\"min-h-screen bg-background text-foreground\">\n        <Header />\n        <main className=\"py-16\">\n          <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n            <div className=\"text-center\">\n              <h1 className=\"text-4xl font-bold mb-4\" data-testid=\"case-study-not-found-heading\">Case Study Not Found</h1>\n              <p className=\"text-muted-foreground mb-8\" data-testid=\"case-study-not-found-description\">\n                The case study you're looking for doesn't exist.\n              </p>\n              <Link href=\"/work\">\n                <Button data-testid=\"button-back-to-work\">\n                  <ArrowLeft className=\"w-4 h-4 mr-2\" />\n                  Back to All Case Studies\n                </Button>\n              </Link>\n            </div>\n          </div>\n        </main>\n        <Footer />\n      </div>\n    );\n  }\n\n  const handleContactCTA = () => {\n    analytics.trackCTAClick(\"case-study\", \"Book a 15-min portfolio walk-through\");\n  };\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n\n      <main className=\"py-16\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Breadcrumb */}\n            <nav className=\"mb-8\" data-testid=\"breadcrumb\">\n              <Link href=\"/work\" className=\"text-muted-foreground hover:text-foreground transition-colors\">\n                ← Back to Case Studies\n              </Link>\n            </nav>\n\n            {/* Header */}\n            <header className=\"mb-12\">\n              <div className=\"flex items-center mb-6\">\n                <div className=\"text-4xl mr-4\" data-testid={`case-study-emoji-${caseStudy.slug}`}>\n                  {caseStudy.emoji}\n                </div>\n                <div>\n                  <h1 className=\"text-display font-bold mb-2\" data-testid={`case-study-title-${caseStudy.slug}`}>\n                    {caseStudy.title}\n                  </h1>\n                  <div className=\"flex flex-wrap gap-2 mb-3\">\n                    <Badge variant=\"outline\" data-testid={`case-study-role-${caseStudy.slug}`}>\n                      {caseStudy.role}\n                    </Badge>\n                    <Badge variant=\"outline\" data-testid={`case-study-timeframe-${caseStudy.slug}`}>\n                      {caseStudy.timeframe}\n                    </Badge>\n                    <Badge variant=\"outline\" data-testid={`case-study-context-${caseStudy.slug}`}>\n                      {caseStudy.context}\n                    </Badge>\n                  </div>\n                  <p className=\"text-body-lg text-muted-foreground max-w-2xl\">\n                    {caseStudy.problem.split('.')[0]}.\n                  </p>\n                </div>\n              </div>\n\n              {/* Tags */}\n              <div className=\"flex flex-wrap gap-2 mb-8\">\n                {caseStudy.tags.map(tag => (\n                  <Badge \n                    key={tag} \n                    className=\"bg-primary/10 text-primary\"\n                    data-testid={`case-study-tag-${tag.toLowerCase().replace(/\\s+/g, '-')}`}\n                  >\n                    {tag}\n                  </Badge>\n                ))}\n              </div>\n\n              {/* StatBar with Key Outcomes */}\n              <StatBar\n                title=\"Key Outcomes Delivered\"\n                description=\"Measurable impact achieved through strategic system architecture and marketing automation.\"\n                items={caseStudy.results.map(result => ({\n                  label: result.metric,\n                  value: result.value,\n                  delta: result.delta,\n                  baseline: result.baseline,\n                  trend: result.delta?.includes('+') ? 'up' : 'neutral'\n                }))}\n              />\n            </header>\n\n            {/* Table of Contents - Sticky */}\n            <TableOfContents items={tocItems} />\n\n            {/* Content */}\n            <div className=\"prose prose-lg max-w-none space-y-12\">\n              {/* Problem */}\n              <section>\n                <h2 id=\"challenge\" className=\"text-h2 font-bold mb-6\" data-testid=\"case-study-problem-heading\">The Challenge</h2>\n                <p className=\"text-muted-foreground\" data-testid=\"case-study-problem-content\">\n                  {caseStudy.problem}\n                </p>\n                \n                {caseStudy.constraints.length > 0 && (\n                  <div className=\"mt-4\">\n                    <h3 className=\"font-semibold mb-2\">Key Constraints:</h3>\n                    <ul className=\"list-disc list-inside space-y-1\">\n                      {caseStudy.constraints.map((constraint, index) => (\n                        <li key={index} className=\"text-muted-foreground\" data-testid={`case-study-constraint-${index}`}>\n                          {constraint}\n                        </li>\n                      ))}\n                    </ul>\n                  </div>\n                )}\n              </section>\n\n              {/* Approach */}\n              <section>\n                <h2 id=\"approach\" className=\"text-h2 font-bold mb-6\" data-testid=\"case-study-approach-heading\">The Approach</h2>\n                <p className=\"text-muted-foreground\" data-testid=\"case-study-approach-content\">\n                  {caseStudy.approach}\n                </p>\n              </section>\n\n              {/* Results */}\n              <section>\n                <h2 id=\"impact\" className=\"text-h2 font-bold mb-6\" data-testid=\"case-study-results-heading\">The Impact</h2>\n                <div className=\"grid md:grid-cols-2 gap-6\">\n                  {caseStudy.results.map((result, index) => (\n                    <div \n                      key={index} \n                      className=\"bg-card border border-border rounded-lg p-4\"\n                      data-testid={`case-study-result-${index}`}\n                    >\n                      <div className=\"font-semibold text-primary text-lg\">\n                        {result.delta || result.value}\n                        {result.unit && ` ${result.unit}`}\n                      </div>\n                      <div className=\"font-medium\">{result.metric}</div>\n                      {result.baseline && (\n                        <div className=\"text-sm text-muted-foreground\">\n                          From {result.baseline} to {result.value}\n                        </div>\n                      )}\n                      <div className=\"text-sm text-muted-foreground\">{result.period}</div>\n                    </div>\n                  ))}\n                </div>\n              </section>\n\n              {/* Evidence Gallery */}\n              {caseStudy.artifacts.length > 0 && (\n                <section>\n                  <h2 id=\"evidence\" className=\"text-h2 font-bold mb-6\">Evidence & Artifacts</h2>\n                  <EvidenceGallery\n                    items={caseStudy.artifacts.map((artifact, index) => ({\n                      id: `artifact-${index}`,\n                      src: artifact.src,\n                      alt: artifact.alt,\n                      caption: artifact.caption,\n                      type: artifact.type === 'document' ? 'image' : artifact.type as any\n                    }))}\n                    columns={3}\n                  />\n                </section>\n              )}\n\n              {/* Before/After Slider - Sample for demonstration */}\n              {caseStudy.slug === 'the-launchpad' && (\n                <section className=\"mb-12\">\n                  <h2 className=\"text-h2 font-bold mb-6\">Transformation</h2>\n                  <BeforeAfterSlider\n                    beforeImage={{\n                      src: \"/case-studies/launchpad-before.png\",\n                      alt: \"Before: Static directory interface\",\n                      caption: \"Original static directory with limited functionality\"\n                    }}\n                    afterImage={{\n                      src: \"/case-studies/launchpad-after.png\", \n                      alt: \"After: Dynamic automated system\",\n                      caption: \"New automated lead generation system with smart workflows\"\n                    }}\n                  />\n                </section>\n              )}\n\n              {/* Tech Stack */}\n              <section>\n                <h2 id=\"tech-stack\" className=\"text-h2 font-bold mb-6\" data-testid=\"case-study-stack-heading\">Technology Stack</h2>\n                <div className=\"flex flex-wrap gap-2\">\n                  {caseStudy.stack.map(tech => (\n                    <Badge \n                      key={tech} \n                      variant=\"outline\"\n                      data-testid={`case-study-tech-${tech.toLowerCase().replace(/\\s+/g, '-')}`}\n                    >\n                      {tech}\n                    </Badge>\n                  ))}\n                </div>\n              </section>\n\n              {/* Learnings */}\n              {caseStudy.learnings.length > 0 && (\n                <section>\n                  <h2 id=\"learnings\" className=\"text-h2 font-bold mb-6\" data-testid=\"case-study-learnings-heading\">Key Learnings</h2>\n                  <ul className=\"space-y-3\">\n                    {caseStudy.learnings.map((learning, index) => (\n                      <li \n                        key={index} \n                        className=\"flex items-start space-x-2\"\n                        data-testid={`case-study-learning-${index}`}\n                      >\n                        <span className=\"text-primary font-bold\">•</span>\n                        <span className=\"text-muted-foreground\">{learning}</span>\n                      </li>\n                    ))}\n                  </ul>\n                </section>\n              )}\n            </div>\n\n            {/* Related Work Rail */}\n            <div className=\"mt-16 mb-12\" data-testid=\"related-work-rail\">\n              <RelatedWorkRail \n                relatedCaseStudies={relatedCaseStudies}\n                currentSlug={caseStudy.slug}\n                title=\"Related Case Studies\"\n                description=\"Explore other projects with similar challenges and outcomes.\"\n              />\n            </div>\n\n            {/* CTA */}\n            <div className=\"bg-gradient-to-r from-primary/10 via-secondary/10 to-accent/10 border border-primary/20 rounded-xl p-8 mt-16 text-center shadow-md\">\n              <h3 className=\"text-2xl font-bold mb-4\" data-testid=\"case-study-cta-heading\">\n                Interested in similar results?\n              </h3>\n              <p className=\"text-muted-foreground mb-6\" data-testid=\"case-study-cta-description\">\n                Let's discuss how I can help architect marketing systems that drive measurable growth for your organization.\n              </p>\n              <Button \n                size=\"lg\" \n                onClick={handleContactCTA}\n                className=\"bg-primary hover:bg-primary/90 text-primary-foreground\"\n                data-testid=\"button-case-study-cta\"\n                asChild\n              >\n                <a href=\"/contact\">Book a 15-min portfolio walk-through</a>\n              </Button>\n            </div>\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}\n","size_bytes":13566},"replit.md":{"content":"# Portfolio Marketing Platform\n\n## Overview\n\nThis is a professional portfolio and case study showcase platform built for marketing professionals and technical leaders. The application focuses on demonstrating expertise through detailed case studies, technical competencies, and conversion-oriented design. The platform emphasizes performance, accessibility, and user experience to effectively communicate professional value to hiring managers and potential clients.\n\n## User Preferences\n\nPreferred communication style: Simple, everyday language.\n\n## System Architecture\n\n### Frontend Architecture\n- **Framework**: React with TypeScript using Vite for build tooling\n- **Routing**: Wouter for lightweight client-side routing\n- **Styling**: Tailwind CSS with custom CSS variables for theming and design tokens\n- **Component Library**: Radix UI primitives with shadcn/ui components for consistent, accessible UI elements\n- **State Management**: TanStack Query for server state management and caching\n- **Theme System**: Light/dark mode support with system preference detection\n\n### Backend Architecture\n- **Runtime**: Node.js with Express.js server\n- **Language**: TypeScript with ES modules\n- **Database**: PostgreSQL with Drizzle ORM for type-safe database operations\n- **Session Management**: In-memory storage with planned PostgreSQL session store integration\n- **API Design**: RESTful endpoints with comprehensive error handling and logging\n\n### Data Layer\n- **ORM**: Drizzle ORM with PostgreSQL dialect for schema management and migrations\n- **Schema**: Structured tables for users, contact submissions, and analytics events\n- **Validation**: Zod schemas for runtime type validation and data integrity\n- **Database Provider**: Neon Database serverless PostgreSQL\n\n### Authentication & Security\n- **Rate Limiting**: Custom rate limiting middleware for API endpoints\n- **Spam Protection**: Honeypot fields and IP-based rate limiting for contact forms\n- **Data Validation**: Server-side validation using Zod schemas\n- **Security Headers**: Express middleware for security best practices\n\n### Content Management\n- **Static Content**: TypeScript-based data files for case studies, experience, and skills\n- **Dynamic Content**: Database-stored contact submissions and analytics events\n- **Asset Management**: Optimized image handling with responsive design considerations\n- **Performance**: Lazy loading and code splitting for optimal load times\n\n### Design System\n- **Typography**: Fluid responsive typography with clamp() functions\n- **Color System**: HSL-based color tokens supporting light/dark themes\n- **Motion**: Consistent animation timing and easing functions\n- **Component Variants**: Class variance authority for component styling patterns\n- **Accessibility**: ARIA labels, semantic HTML, and keyboard navigation support\n\n## External Dependencies\n\n### Database & Hosting\n- **Neon Database**: Serverless PostgreSQL database for production data storage\n- **Drizzle Kit**: Database migration and schema management tools\n\n### Email Services\n- **SendGrid**: Email delivery service for contact form notifications and communications\n- **Console Email Service**: Development fallback for local testing\n\n### UI & Styling\n- **Radix UI**: Headless component primitives for accessible UI elements\n- **Tailwind CSS**: Utility-first CSS framework for responsive design\n- **Lucide React**: Icon library for consistent iconography\n- **Google Fonts**: Typography with Space Grotesk, Inter, and JetBrains Mono\n\n### Development Tools\n- **Vite**: Build tool and development server with HMR support\n- **ESBuild**: Fast bundling for production builds\n- **TypeScript**: Type safety and developer experience enhancement\n- **Replit Plugins**: Development environment integration for runtime error handling\n\n### Analytics & Tracking\n- **Custom Analytics**: Privacy-focused event tracking system\n- **Session Management**: Client-side session identification for user journey tracking\n\n### Search & Filtering\n- **Fuse.js**: Fuzzy search functionality for case studies and content discovery\n- **URL State Management**: Query parameter handling for filter persistence","size_bytes":4143},"client/src/components/ui/related-work-rail.tsx":{"content":"import { Link } from \"wouter\";\nimport { CaseStudy } from \"@/data/case-studies\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { cn } from \"@/lib/utils\";\nimport { ArrowRight, Clock } from \"lucide-react\";\n\ninterface RelatedWorkRailProps {\n  relatedCaseStudies: CaseStudy[];\n  currentSlug?: string;\n  title?: string;\n  description?: string;\n  className?: string;\n}\n\n// Calculate reading time estimate (same as work.tsx)\nfunction getReadingTime(caseStudy: CaseStudy): string {\n  const wordsPerMinute = 200;\n  const textContent = [\n    caseStudy.problem,\n    caseStudy.approach,\n    caseStudy.learnings.join(' '),\n    caseStudy.constraints.join(' ')\n  ].join(' ');\n  \n  const wordCount = textContent.split(/\\s+/).length;\n  const minutes = Math.ceil(wordCount / wordsPerMinute);\n  return `${minutes} min read`;\n}\n\n// Extract key metrics from case study results (same as work.tsx)\nfunction getTopKPIs(caseStudy: CaseStudy): Array<{ label: string; value: string }> {\n  return caseStudy.results\n    .filter(result => result.delta)\n    .sort((a, b) => {\n      const deltaA = parseInt(a.delta?.replace(/[^0-9]/g, '') || '0');\n      const deltaB = parseInt(b.delta?.replace(/[^0-9]/g, '') || '0');\n      return deltaB - deltaA;\n    })\n    .slice(0, 2)\n    .map(result => ({\n      label: result.metric,\n      value: result.delta || result.value\n    }));\n}\n\nexport function RelatedWorkRail({ \n  relatedCaseStudies, \n  currentSlug,\n  title = \"Related Work\",\n  description,\n  className \n}: RelatedWorkRailProps) {\n  // Filter out the current case study\n  const filteredCaseStudies = relatedCaseStudies.filter(\n    study => study.slug !== currentSlug\n  );\n\n  // Always show the rail, even if no related studies (for testing)\n  const displayCaseStudies = filteredCaseStudies.length > 0 ? filteredCaseStudies : relatedCaseStudies;\n\n  return (\n    <section className={cn(\"space-y-6\", className)}>\n      <div>\n        <h3 className=\"text-h4 font-bold mb-2\">{title}</h3>\n        {description && (\n          <p className=\"text-body text-muted-foreground\">{description}</p>\n        )}\n      </div>\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n        {displayCaseStudies.slice(0, 2).map((study) => {\n          const kpis = getTopKPIs(study);\n          const readingTime = getReadingTime(study);\n\n          return (\n            <Link key={study.slug} href={`/work/${study.slug}`}>\n              <div \n                className=\"group relative bg-card border border-border rounded-xl p-6 hover:border-primary/50 hover:shadow-lg transition-all duration-smooth cursor-pointer\"\n                data-testid={`related-work-${study.slug}`}\n              >\n                {/* Header */}\n                <div className=\"flex items-start justify-between mb-4\">\n                  <div className=\"flex items-center gap-3\">\n                    <div className=\"text-2xl\">{study.emoji}</div>\n                    <div>\n                      <h4 className=\"text-h5 font-bold group-hover:text-primary transition-colors\">\n                        {study.title}\n                      </h4>\n                      <div className=\"text-caption text-muted-foreground\">\n                        {study.timeframe}\n                      </div>\n                    </div>\n                  </div>\n                  \n                  <ArrowRight className=\"h-4 w-4 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 transition-all\" />\n                </div>\n\n                {/* Problem teaser */}\n                <p className=\"text-body-sm text-muted-foreground mb-4 line-clamp-2\">\n                  {study.problem}\n                </p>\n\n                {/* KPIs */}\n                {kpis.length > 0 && (\n                  <div className=\"flex gap-4 mb-4\">\n                    {kpis.map((kpi, index) => (\n                      <div key={index} className=\"text-center\">\n                        <div className=\"text-h6 font-bold text-primary\">\n                          {kpi.value}\n                        </div>\n                        <div className=\"text-caption text-muted-foreground\">\n                          {kpi.label}\n                        </div>\n                      </div>\n                    ))}\n                  </div>\n                )}\n\n                {/* Footer */}\n                <div className=\"flex items-center justify-between pt-4 border-t border-border/50\">\n                  <div className=\"flex flex-wrap gap-1\">\n                    {study.tags.slice(0, 2).map(tag => (\n                      <Badge \n                        key={tag} \n                        variant=\"secondary\" \n                        className=\"text-xs py-0.5 px-2\"\n                      >\n                        {tag}\n                      </Badge>\n                    ))}\n                    {study.tags.length > 2 && (\n                      <Badge variant=\"secondary\" className=\"text-xs py-0.5 px-2\">\n                        +{study.tags.length - 2}\n                      </Badge>\n                    )}\n                  </div>\n                  \n                  <div className=\"flex items-center gap-1 text-muted-foreground text-caption\">\n                    <Clock className=\"h-3 w-3\" />\n                    {readingTime}\n                  </div>\n                </div>\n\n                {/* Hover effect */}\n                <div className=\"absolute inset-0 rounded-xl bg-gradient-to-r from-primary/5 to-secondary/5 opacity-0 group-hover:opacity-100 transition-opacity duration-smooth -z-10\" />\n              </div>\n            </Link>\n          );\n        })}\n      </div>\n\n      {displayCaseStudies.length > 2 && (\n        <div className=\"text-center pt-4\">\n          <Link href=\"/work\">\n            <div className=\"inline-flex items-center gap-2 text-primary hover:text-primary/80 transition-colors text-body font-medium\">\n              View all case studies\n              <ArrowRight className=\"h-4 w-4\" />\n            </div>\n          </Link>\n        </div>\n      )}\n    </section>\n  );\n}","size_bytes":5995},"client/src/components/ui/stat-bar.tsx":{"content":"import { cn } from \"@/lib/utils\";\nimport { TrendingUp, ArrowUpRight } from \"lucide-react\";\n\ninterface StatBarItem {\n  label: string;\n  value: string;\n  delta?: string;\n  baseline?: string;\n  trend?: \"up\" | \"down\" | \"neutral\";\n}\n\ninterface StatBarProps {\n  items: StatBarItem[];\n  title?: string;\n  description?: string;\n  className?: string;\n}\n\nexport function StatBar({ items, title, description, className }: StatBarProps) {\n  return (\n    <div className={cn(\n      \"bg-gradient-to-r from-primary/5 via-secondary/5 to-accent/5 rounded-2xl p-6 md:p-8 border border-border/50\",\n      className\n    )}>\n      {(title || description) && (\n        <div className=\"mb-6\">\n          {title && (\n            <h3 className=\"text-h4 font-bold mb-2 flex items-center gap-2\">\n              <TrendingUp className=\"h-5 w-5 text-primary\" />\n              {title}\n            </h3>\n          )}\n          {description && (\n            <p className=\"text-body text-muted-foreground\">{description}</p>\n          )}\n        </div>\n      )}\n\n      <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 xl:grid-cols-4 gap-4 md:gap-6\">\n        {items.map((item, index) => (\n          <div key={index} className=\"text-center\" data-testid={`stat-bar-item-${index}`}>\n            <div className=\"relative\">\n              <div className=\"text-h3 font-bold text-foreground mb-1\">\n                {item.value}\n                {item.trend === \"up\" && (\n                  <ArrowUpRight className=\"inline-block h-4 w-4 ml-1 text-green-500\" />\n                )}\n              </div>\n              \n              {item.delta && (\n                <div className={cn(\n                  \"text-caption font-semibold mb-1\",\n                  item.delta.includes(\"+\") ? \"text-green-600\" : \n                  item.delta.includes(\"-\") ? \"text-red-600\" : \n                  \"text-muted-foreground\"\n                )}>\n                  {item.delta}\n                </div>\n              )}\n              \n              <div className=\"text-body text-muted-foreground font-medium\">\n                {item.label}\n              </div>\n              \n              {item.baseline && (\n                <div className=\"text-caption text-muted-foreground/75 mt-1\">\n                  from {item.baseline}\n                </div>\n              )}\n            </div>\n          </div>\n        ))}\n      </div>\n    </div>\n  );\n}","size_bytes":2383},"client/src/components/ui/table-of-contents.tsx":{"content":"import { useState, useEffect } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { List } from \"lucide-react\";\n\ninterface TOCItem {\n  id: string;\n  title: string;\n  level: number;\n}\n\ninterface TableOfContentsProps {\n  items: TOCItem[];\n  className?: string;\n}\n\nexport function TableOfContents({ items, className }: TableOfContentsProps) {\n  const [activeId, setActiveId] = useState<string>(\"\");\n  const [isVisible, setIsVisible] = useState(false);\n\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      (entries) => {\n        entries.forEach((entry) => {\n          if (entry.isIntersecting) {\n            setActiveId(entry.target.id);\n          }\n        });\n      },\n      { \n        rootMargin: \"-20% 0% -35% 0%\",\n        threshold: 0.5\n      }\n    );\n\n    // Observe all headings\n    items.forEach(({ id }) => {\n      const element = document.getElementById(id);\n      if (element) observer.observe(element);\n    });\n\n    // Show TOC when user scrolls past header\n    const handleScroll = () => {\n      const scrollY = window.scrollY;\n      setIsVisible(scrollY > 400);\n    };\n\n    window.addEventListener(\"scroll\", handleScroll);\n    handleScroll();\n\n    return () => {\n      observer.disconnect();\n      window.removeEventListener(\"scroll\", handleScroll);\n    };\n  }, [items]);\n\n  const scrollToSection = (id: string) => {\n    const element = document.getElementById(id);\n    if (element) {\n      element.scrollIntoView({ \n        behavior: \"smooth\", \n        block: \"start\" \n      });\n    }\n  };\n\n  if (!isVisible || items.length === 0) return null;\n\n  return (\n    <div className={cn(\n      \"fixed right-4 top-1/2 -translate-y-1/2 z-50 hidden lg:block\",\n      className\n    )}>\n      <div className=\"bg-background/95 backdrop-blur-sm border border-border rounded-xl p-4 shadow-lg min-w-[200px] max-w-[250px]\">\n        <div className=\"flex items-center gap-2 mb-3 text-caption font-semibold text-muted-foreground uppercase tracking-wide\">\n          <List className=\"h-3 w-3\" />\n          Contents\n        </div>\n        \n        <nav>\n          <ul className=\"space-y-1\">\n            {items.map(({ id, title, level }) => (\n              <li key={id}>\n                <button\n                  onClick={() => scrollToSection(id)}\n                  className={cn(\n                    \"text-left w-full text-sm py-1 px-2 rounded-md transition-colors\",\n                    \"hover:bg-accent hover:text-accent-foreground\",\n                    activeId === id \n                      ? \"bg-primary/10 text-primary font-medium border-l-2 border-primary\" \n                      : \"text-muted-foreground\",\n                    level === 3 && \"ml-3 text-xs\"\n                  )}\n                  style={{ \n                    paddingLeft: `${(level - 2) * 12 + 8}px` \n                  }}\n                  data-testid={`toc-item-${id}`}\n                >\n                  {title}\n                </button>\n              </li>\n            ))}\n          </ul>\n        </nav>\n      </div>\n    </div>\n  );\n}","size_bytes":3023},"client/src/components/ui/calendar-embed.tsx":{"content":"import { useState } from \"react\";\nimport { cn } from \"@/lib/utils\";\nimport { Calendar, Clock, Video, CheckCircle } from \"lucide-react\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { analytics } from \"@/lib/analytics\";\n\ninterface CalendarEmbedProps {\n  className?: string;\n  title?: string;\n  description?: string;\n}\n\nexport function CalendarEmbed({ \n  className,\n  title = \"Schedule a Call\",\n  description = \"Book a 15-minute portfolio walk-through to discuss your marketing technology challenges.\"\n}: CalendarEmbedProps) {\n  const [isBooked, setIsBooked] = useState(false);\n  const [selectedSlot, setSelectedSlot] = useState<string | null>(null);\n\n  // Sample time slots for demonstration\n  const timeSlots = [\n    { id: \"1\", date: \"Today\", time: \"2:00 PM\", available: true },\n    { id: \"2\", date: \"Today\", time: \"4:30 PM\", available: true },\n    { id: \"3\", date: \"Tomorrow\", time: \"10:00 AM\", available: true },\n    { id: \"4\", date: \"Tomorrow\", time: \"2:00 PM\", available: false },\n    { id: \"5\", date: \"Tomorrow\", time: \"3:30 PM\", available: true },\n    { id: \"6\", date: \"Friday\", time: \"11:00 AM\", available: true },\n  ];\n\n  const handleSlotSelect = (slotId: string) => {\n    setSelectedSlot(slotId);\n    analytics.track('calendar_slot_select', { slotId });\n  };\n\n  const handleBookCall = () => {\n    if (selectedSlot) {\n      const slot = timeSlots.find(s => s.id === selectedSlot);\n      analytics.trackCTAClick(\"calendar-embed\", `Book Call - ${slot?.date} ${slot?.time}`);\n      setIsBooked(true);\n    }\n  };\n\n  if (isBooked) {\n    return (\n      <Card className={cn(\"border-green-200 bg-green-50/50\", className)}>\n        <CardHeader className=\"text-center\">\n          <div className=\"inline-flex items-center justify-center w-12 h-12 bg-green-100 rounded-full mx-auto mb-3\">\n            <CheckCircle className=\"w-6 h-6 text-green-600\" />\n          </div>\n          <CardTitle className=\"text-green-700\">Call Scheduled!</CardTitle>\n        </CardHeader>\n        <CardContent className=\"text-center space-y-4\">\n          <p className=\"text-sm text-green-600\">\n            Your call has been booked for {timeSlots.find(s => s.id === selectedSlot)?.date} at {timeSlots.find(s => s.id === selectedSlot)?.time}.\n          </p>\n          <div className=\"space-y-2 text-sm text-muted-foreground\">\n            <div className=\"flex items-center justify-center gap-2\">\n              <Video className=\"w-4 h-4\" />\n              <span>Video call link will be sent via email</span>\n            </div>\n            <div className=\"flex items-center justify-center gap-2\">\n              <Clock className=\"w-4 h-4\" />\n              <span>15-minute duration</span>\n            </div>\n          </div>\n        </CardContent>\n      </Card>\n    );\n  }\n\n  return (\n    <Card className={className}>\n      <CardHeader>\n        <CardTitle className=\"flex items-center\">\n          <Calendar className=\"w-5 h-5 mr-2 text-primary\" />\n          {title}\n        </CardTitle>\n        {description && (\n          <p className=\"text-sm text-muted-foreground\">{description}</p>\n        )}\n      </CardHeader>\n      \n      <CardContent className=\"space-y-4\">\n        {/* Time Slot Grid */}\n        <div className=\"space-y-3\">\n          <div className=\"text-sm font-medium text-muted-foreground\">Available Times</div>\n          \n          <div className=\"grid grid-cols-2 gap-2\">\n            {timeSlots.map((slot) => (\n              <button\n                key={slot.id}\n                onClick={() => slot.available && handleSlotSelect(slot.id)}\n                disabled={!slot.available}\n                className={cn(\n                  \"p-3 rounded-lg border text-sm transition-colors text-left\",\n                  slot.available \n                    ? \"border-border hover:border-primary hover:bg-primary/5 cursor-pointer\"\n                    : \"border-border/50 bg-muted/50 text-muted-foreground cursor-not-allowed\",\n                  selectedSlot === slot.id && \"border-primary bg-primary/10\"\n                )}\n                data-testid={`calendar-slot-${slot.id}`}\n              >\n                <div className=\"font-medium\">{slot.date}</div>\n                <div className=\"text-xs text-muted-foreground\">{slot.time}</div>\n                {!slot.available && (\n                  <div className=\"text-xs text-red-500 mt-1\">Unavailable</div>\n                )}\n              </button>\n            ))}\n          </div>\n        </div>\n\n        {/* Meeting Details */}\n        <div className=\"bg-muted/50 rounded-lg p-3 space-y-2\">\n          <div className=\"text-sm font-medium\">Call Details:</div>\n          <div className=\"space-y-1 text-sm text-muted-foreground\">\n            <div className=\"flex items-center gap-2\">\n              <Clock className=\"w-3 h-3\" />\n              <span>15 minutes</span>\n            </div>\n            <div className=\"flex items-center gap-2\">\n              <Video className=\"w-3 h-3\" />\n              <span>Video call (Google Meet)</span>\n            </div>\n          </div>\n        </div>\n\n        {/* Book Button */}\n        <Button \n          className=\"w-full\"\n          disabled={!selectedSlot}\n          onClick={handleBookCall}\n          data-testid=\"button-book-selected-slot\"\n        >\n          {selectedSlot \n            ? `Book ${timeSlots.find(s => s.id === selectedSlot)?.date} at ${timeSlots.find(s => s.id === selectedSlot)?.time}`\n            : \"Select a time slot\"\n          }\n        </Button>\n\n        {/* Alternative */}\n        <div className=\"text-center pt-2\">\n          <p className=\"text-xs text-muted-foreground\">\n            Don't see a good time? <a href=\"mailto:jacob@example.com\" className=\"text-primary hover:underline\">Email me</a> to schedule.\n          </p>\n        </div>\n      </CardContent>\n    </Card>\n  );\n}","size_bytes":5852},"client/src/pages/contact-success.tsx":{"content":"import { useEffect, useMemo } from \"react\";\nimport { Header } from \"@/components/layout/header\";\nimport { Footer } from \"@/components/layout/footer\";\nimport { Button } from \"@/components/ui/button\";\nimport { Card, CardContent, CardHeader, CardTitle } from \"@/components/ui/card\";\nimport { Badge } from \"@/components/ui/badge\";\nimport { CheckCircle, Clock, ArrowRight, Download, Calendar } from \"lucide-react\";\nimport { Link } from \"wouter\";\nimport { caseStudies } from \"@/data/case-studies\";\nimport { analytics } from \"@/lib/analytics\";\nimport { cn } from \"@/lib/utils\";\n\n// Get recommended case studies based on common engagement patterns\nfunction getRecommendedCaseStudies() {\n  return caseStudies\n    .filter(study => ['marketing-automation', 'analytics-engineering', 'data-integrity'].some(tag => \n      study.tags.map(t => t.toLowerCase().replace(/\\s+/g, '-')).includes(tag)\n    ))\n    .slice(0, 2);\n}\n\n// Calculate reading time (same as work page)\nfunction getReadingTime(problem: string, approach: string, learnings: string[]): string {\n  const wordsPerMinute = 200;\n  const textContent = [problem, approach, learnings.join(' ')].join(' ');\n  const wordCount = textContent.split(/\\s+/).length;\n  const minutes = Math.ceil(wordCount / wordsPerMinute);\n  return `${minutes} min read`;\n}\n\nexport default function ContactSuccess() {\n  const recommendedCaseStudies = useMemo(() => getRecommendedCaseStudies(), []);\n\n  useEffect(() => {\n    // Track successful contact page view\n    analytics.track('contact_success_view', {\n      recommended_studies: recommendedCaseStudies.map(study => study.slug)\n    });\n  }, [recommendedCaseStudies]);\n\n  const handleResumeDownload = () => {\n    analytics.trackResumeDownload();\n  };\n\n  const handleScheduleCall = () => {\n    analytics.trackCTAClick(\"contact-success\", \"Schedule Follow-up Call\");\n  };\n\n  const nextSteps = [\n    {\n      icon: CheckCircle,\n      title: \"Message Received\",\n      description: \"Your message has been successfully sent and logged.\",\n      status: \"complete\"\n    },\n    {\n      icon: Clock, \n      title: \"Review & Response\",\n      description: \"I'll review your inquiry and respond within 24 hours.\",\n      status: \"next\"\n    },\n    {\n      icon: Calendar,\n      title: \"Discovery Call\",\n      description: \"We'll schedule a call to discuss your project in detail.\",\n      status: \"upcoming\"\n    }\n  ];\n\n  return (\n    <div className=\"min-h-screen bg-background text-foreground\">\n      <Header />\n\n      <main className=\"py-16\">\n        <div className=\"container mx-auto px-4 sm:px-6 lg:px-8\">\n          <div className=\"max-w-4xl mx-auto\">\n            {/* Success Header */}\n            <div className=\"text-center mb-12\">\n              <div className=\"inline-flex items-center justify-center w-16 h-16 bg-green-100 rounded-full mb-6\">\n                <CheckCircle className=\"w-8 h-8 text-green-600\" />\n              </div>\n              \n              <h1 className=\"text-display font-bold mb-4\" data-testid=\"contact-success-heading\">\n                Message Sent Successfully!\n              </h1>\n              \n              <p className=\"text-body-lg text-muted-foreground max-w-2xl mx-auto\" data-testid=\"contact-success-description\">\n                Thank you for reaching out. I've received your message and will respond within 24 hours with next steps tailored to your project needs.\n              </p>\n            </div>\n\n            {/* Next Steps Timeline */}\n            <section className=\"mb-16\">\n              <h2 className=\"text-h3 font-bold text-center mb-8\">What Happens Next</h2>\n              \n              <div className=\"grid md:grid-cols-3 gap-6\">\n                {nextSteps.map((step, index) => {\n                  const IconComponent = step.icon;\n                  return (\n                    <Card \n                      key={index} \n                      className={\n                        step.status === \"complete\" ? \"relative border-green-200 bg-green-50/50\" :\n                        step.status === \"next\" ? \"relative border-primary bg-primary/5\" : \n                        \"relative\"\n                      }\n                      data-testid={`next-step-${index}`}\n                    >\n                      <CardHeader className=\"text-center pb-4\">\n                        <div className={\n                          step.status === \"complete\" ? \"inline-flex items-center justify-center w-12 h-12 rounded-full mx-auto mb-3 bg-green-100 text-green-600\" :\n                          step.status === \"next\" ? \"inline-flex items-center justify-center w-12 h-12 rounded-full mx-auto mb-3 bg-primary/10 text-primary\" :\n                          \"inline-flex items-center justify-center w-12 h-12 rounded-full mx-auto mb-3 bg-muted text-muted-foreground\"\n                        }>\n                          <IconComponent className=\"w-6 h-6\" />\n                        </div>\n                        <CardTitle className=\"text-h5\">{step.title}</CardTitle>\n                      </CardHeader>\n                      <CardContent className=\"pt-0 text-center\">\n                        <p className=\"text-body-sm text-muted-foreground\">\n                          {step.description}\n                        </p>\n                        \n                        {step.status === \"complete\" && (\n                          <Badge variant=\"secondary\" className=\"mt-3 bg-green-100 text-green-700\">\n                            Complete\n                          </Badge>\n                        )}\n                        \n                        {step.status === \"next\" && (\n                          <Badge className=\"mt-3\">\n                            In Progress\n                          </Badge>\n                        )}\n                      </CardContent>\n                    </Card>\n                  );\n                })}\n              </div>\n            </section>\n\n            {/* Quick Actions */}\n            <section className=\"mb-16\">\n              <div className=\"grid md:grid-cols-2 gap-6\">\n                {/* Schedule Call */}\n                <Card className=\"border-primary/20 bg-gradient-to-br from-primary/5 to-secondary/5\">\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Calendar className=\"w-5 h-5 mr-2 text-primary\" />\n                      Speed Up the Process\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-body-sm text-muted-foreground mb-4\">\n                      Skip the email back-and-forth and book a 15-minute call to discuss your project directly.\n                    </p>\n                    <Button \n                      className=\"w-full\" \n                      onClick={handleScheduleCall}\n                      data-testid=\"button-schedule-followup-call\"\n                    >\n                      <Calendar className=\"w-4 h-4 mr-2\" />\n                      Schedule Follow-up Call\n                    </Button>\n                  </CardContent>\n                </Card>\n\n                {/* Resume Download */}\n                <Card>\n                  <CardHeader>\n                    <CardTitle className=\"flex items-center\">\n                      <Download className=\"w-5 h-5 mr-2 text-primary\" />\n                      Learn More About Me\n                    </CardTitle>\n                  </CardHeader>\n                  <CardContent>\n                    <p className=\"text-body-sm text-muted-foreground mb-4\">\n                      Download my detailed resume to review my experience and technical capabilities.\n                    </p>\n                    <Button \n                      variant=\"outline\" \n                      className=\"w-full\"\n                      onClick={handleResumeDownload}\n                      data-testid=\"button-download-resume-success\"\n                    >\n                      <Download className=\"w-4 h-4 mr-2\" />\n                      Download Resume\n                    </Button>\n                  </CardContent>\n                </Card>\n              </div>\n            </section>\n\n            {/* Recommended Case Studies */}\n            {recommendedCaseStudies.length > 0 && (\n              <section>\n                <div className=\"text-center mb-8\">\n                  <h2 className=\"text-h3 font-bold mb-3\">While You Wait</h2>\n                  <p className=\"text-body text-muted-foreground max-w-2xl mx-auto\">\n                    Explore these relevant case studies to see how I've solved similar challenges for other clients.\n                  </p>\n                </div>\n\n                <div className=\"grid md:grid-cols-2 gap-6 mb-8\">\n                  {recommendedCaseStudies.map((study) => {\n                    const readingTime = getReadingTime(study.problem, study.approach, study.learnings);\n                    const topResult = study.results[0];\n                    \n                    return (\n                      <Link key={study.slug} href={`/work/${study.slug}`}>\n                        <Card \n                          className=\"group h-full hover:border-primary/50 hover:shadow-lg transition-all duration-smooth cursor-pointer\"\n                          data-testid={`recommended-case-study-${study.slug}`}\n                        >\n                          <CardHeader>\n                            <div className=\"flex items-start justify-between mb-3\">\n                              <div className=\"flex items-center gap-3\">\n                                <div className=\"text-2xl\">{study.emoji}</div>\n                                <div>\n                                  <CardTitle className=\"group-hover:text-primary transition-colors text-h5\">\n                                    {study.title}\n                                  </CardTitle>\n                                  <div className=\"text-caption text-muted-foreground\">\n                                    {study.timeframe}\n                                  </div>\n                                </div>\n                              </div>\n                              <ArrowRight className=\"h-4 w-4 text-muted-foreground group-hover:text-primary group-hover:translate-x-1 transition-all\" />\n                            </div>\n\n                            {/* Key Result */}\n                            {topResult && (\n                              <div className=\"bg-primary/5 rounded-lg p-3 mb-3\">\n                                <div className=\"text-h6 font-bold text-primary\">\n                                  {topResult.delta || topResult.value}\n                                </div>\n                                <div className=\"text-caption text-muted-foreground\">\n                                  {topResult.metric}\n                                </div>\n                              </div>\n                            )}\n                          </CardHeader>\n\n                          <CardContent>\n                            {/* Problem Preview */}\n                            <p className=\"text-body-sm text-muted-foreground mb-4 line-clamp-2\">\n                              {study.problem}\n                            </p>\n\n                            {/* Footer */}\n                            <div className=\"flex items-center justify-between pt-3 border-t border-border/50\">\n                              <div className=\"flex flex-wrap gap-1\">\n                                {study.tags.slice(0, 2).map(tag => (\n                                  <Badge key={tag} variant=\"secondary\" className=\"text-xs\">\n                                    {tag}\n                                  </Badge>\n                                ))}\n                                {study.tags.length > 2 && (\n                                  <Badge variant=\"secondary\" className=\"text-xs\">\n                                    +{study.tags.length - 2}\n                                  </Badge>\n                                )}\n                              </div>\n                              \n                              <div className=\"flex items-center gap-1 text-caption text-muted-foreground\">\n                                <Clock className=\"h-3 w-3\" />\n                                {readingTime}\n                              </div>\n                            </div>\n                          </CardContent>\n                        </Card>\n                      </Link>\n                    );\n                  })}\n                </div>\n\n                <div className=\"text-center\">\n                  <Link href=\"/work\">\n                    <Button variant=\"outline\" data-testid=\"button-view-all-case-studies\">\n                      View All Case Studies\n                      <ArrowRight className=\"w-4 h-4 ml-2\" />\n                    </Button>\n                  </Link>\n                </div>\n              </section>\n            )}\n          </div>\n        </div>\n      </main>\n\n      <Footer />\n    </div>\n  );\n}","size_bytes":12968}},"version":1}